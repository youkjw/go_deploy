{
  "version": 3,
  "sources": ["../../codemirror/mode/yaml/yaml.js", "dep:codemirror_mode_yaml_yaml_js"],
  "sourcesContent": ["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"yaml\", function() {\n\n  var cons = ['true', 'false', 'on', 'off', 'yes', 'no'];\n  var keywordRegex = new RegExp(\"\\\\b((\"+cons.join(\")|(\")+\"))$\", 'i');\n\n  return {\n    token: function(stream, state) {\n      var ch = stream.peek();\n      var esc = state.escaped;\n      state.escaped = false;\n      /* comments */\n      if (ch == \"#\" && (stream.pos == 0 || /\\s/.test(stream.string.charAt(stream.pos - 1)))) {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n\n      if (stream.match(/^('([^']|\\\\.)*'?|\"([^\"]|\\\\.)*\"?)/))\n        return \"string\";\n\n      if (state.literal && stream.indentation() > state.keyCol) {\n        stream.skipToEnd(); return \"string\";\n      } else if (state.literal) { state.literal = false; }\n      if (stream.sol()) {\n        state.keyCol = 0;\n        state.pair = false;\n        state.pairStart = false;\n        /* document start */\n        if(stream.match('---')) { return \"def\"; }\n        /* document end */\n        if (stream.match('...')) { return \"def\"; }\n        /* array list item */\n        if (stream.match(/\\s*-\\s+/)) { return 'meta'; }\n      }\n      /* inline pairs/lists */\n      if (stream.match(/^(\\{|\\}|\\[|\\])/)) {\n        if (ch == '{')\n          state.inlinePairs++;\n        else if (ch == '}')\n          state.inlinePairs--;\n        else if (ch == '[')\n          state.inlineList++;\n        else\n          state.inlineList--;\n        return 'meta';\n      }\n\n      /* list separator */\n      if (state.inlineList > 0 && !esc && ch == ',') {\n        stream.next();\n        return 'meta';\n      }\n      /* pairs separator */\n      if (state.inlinePairs > 0 && !esc && ch == ',') {\n        state.keyCol = 0;\n        state.pair = false;\n        state.pairStart = false;\n        stream.next();\n        return 'meta';\n      }\n\n      /* start of value of a pair */\n      if (state.pairStart) {\n        /* block literals */\n        if (stream.match(/^\\s*(\\||\\>)\\s*/)) { state.literal = true; return 'meta'; };\n        /* references */\n        if (stream.match(/^\\s*(\\&|\\*)[a-z0-9\\._-]+\\b/i)) { return 'variable-2'; }\n        /* numbers */\n        if (state.inlinePairs == 0 && stream.match(/^\\s*-?[0-9\\.\\,]+\\s?$/)) { return 'number'; }\n        if (state.inlinePairs > 0 && stream.match(/^\\s*-?[0-9\\.\\,]+\\s?(?=(,|}))/)) { return 'number'; }\n        /* keywords */\n        if (stream.match(keywordRegex)) { return 'keyword'; }\n      }\n\n      /* pairs (associative arrays) -> key */\n      if (!state.pair && stream.match(/^\\s*(?:[,\\[\\]{}&*!|>'\"%@`][^\\s'\":]|[^,\\[\\]{}#&*!|>'\"%@`])[^#]*?(?=\\s*:($|\\s))/)) {\n        state.pair = true;\n        state.keyCol = stream.indentation();\n        return \"atom\";\n      }\n      if (state.pair && stream.match(/^:\\s*/)) { state.pairStart = true; return 'meta'; }\n\n      /* nothing found, continue */\n      state.pairStart = false;\n      state.escaped = (ch == '\\\\');\n      stream.next();\n      return null;\n    },\n    startState: function() {\n      return {\n        pair: false,\n        pairStart: false,\n        keyCol: 0,\n        inlinePairs: 0,\n        inlineList: 0,\n        literal: false,\n        escaped: false\n      };\n    },\n    lineComment: \"#\",\n    fold: \"indent\"\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-yaml\", \"yaml\");\nCodeMirror.defineMIME(\"text/yaml\", \"yaml\");\n\n});\n", "export default require(\"./node_modules/codemirror/mode/yaml/yaml.js\");"],
  "mappings": "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",
  "names": ["CodeMirror"]
}
