{
  "version": 3,
  "sources": ["../../xterm-addon-fit/lib/webpack:/FitAddon/webpack/universalModuleDefinition", "../../xterm-addon-fit/lib/webpack:/FitAddon/src/FitAddon.ts", "../../xterm-addon-fit/lib/webpack:/FitAddon/webpack/bootstrap", "../../xterm-addon-fit/lib/webpack:/FitAddon/webpack/startup", "dep:xterm-addon-fit"],
  "sourcesContent": ["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"FitAddon\"] = factory();\n\telse\n\t\troot[\"FitAddon\"] = factory();\n})(self, function() {\nreturn ", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { Terminal, ITerminalAddon } from 'xterm';\n\ninterface ITerminalDimensions {\n  /**\n   * The number of rows in the terminal.\n   */\n  rows: number;\n\n  /**\n   * The number of columns in the terminal.\n   */\n  cols: number;\n}\n\nconst MINIMUM_COLS = 2;\nconst MINIMUM_ROWS = 1;\n\nexport class FitAddon implements ITerminalAddon {\n  private _terminal: Terminal | undefined;\n\n  constructor() {}\n\n  public activate(terminal: Terminal): void {\n    this._terminal = terminal;\n  }\n\n  public dispose(): void {}\n\n  public fit(): void {\n    const dims = this.proposeDimensions();\n    if (!dims || !this._terminal) {\n      return;\n    }\n\n    // TODO: Remove reliance on private API\n    const core = (this._terminal as any)._core;\n\n    // Force a full render\n    if (this._terminal.rows !== dims.rows || this._terminal.cols !== dims.cols) {\n      core._renderService.clear();\n      this._terminal.resize(dims.cols, dims.rows);\n    }\n  }\n\n  public proposeDimensions(): ITerminalDimensions | undefined {\n    if (!this._terminal) {\n      return undefined;\n    }\n\n    if (!this._terminal.element || !this._terminal.element.parentElement) {\n      return undefined;\n    }\n\n    // TODO: Remove reliance on private API\n    const core = (this._terminal as any)._core;\n\n    if (core._renderService.dimensions.actualCellWidth === 0 || core._renderService.dimensions.actualCellHeight === 0) {\n      return undefined;\n    }\n\n    const parentElementStyle = window.getComputedStyle(this._terminal.element.parentElement);\n    const parentElementHeight = parseInt(parentElementStyle.getPropertyValue('height'));\n    const parentElementWidth = Math.max(0, parseInt(parentElementStyle.getPropertyValue('width')));\n    const elementStyle = window.getComputedStyle(this._terminal.element);\n    const elementPadding = {\n      top: parseInt(elementStyle.getPropertyValue('padding-top')),\n      bottom: parseInt(elementStyle.getPropertyValue('padding-bottom')),\n      right: parseInt(elementStyle.getPropertyValue('padding-right')),\n      left: parseInt(elementStyle.getPropertyValue('padding-left'))\n    };\n    const elementPaddingVer = elementPadding.top + elementPadding.bottom;\n    const elementPaddingHor = elementPadding.right + elementPadding.left;\n    const availableHeight = parentElementHeight - elementPaddingVer;\n    const availableWidth = parentElementWidth - elementPaddingHor - core.viewport.scrollBarWidth;\n    const geometry = {\n      cols: Math.max(MINIMUM_COLS, Math.floor(availableWidth / core._renderService.dimensions.actualCellWidth)),\n      rows: Math.max(MINIMUM_ROWS, Math.floor(availableHeight / core._renderService.dimensions.actualCellHeight))\n    };\n    return geometry;\n  }\n}\n", "// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n", "// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(775);\n", "export default require(\"./node_modules/xterm-addon-fit/lib/xterm-addon-fit.js\");"],
  "mappings": ";;;;;;;KAAA,SAA2CA,GAAMC,GAAAA;AAC1B,kBAAA,OAAZC,WAA0C,YAAA,OAAXC,SACxCA,OAAOD,UAAUD,EAAAA,IACQ,cAAA,OAAXG,UAAyBA,OAAOC,MAC9CD,OAAO,CAAA,GAAIH,CAAAA,IACe,YAAA,OAAZC,UACdA,QAAkB,WAAID,EAAAA,IAEtBD,EAAe,WAAIC,EAAAA;IAAAA,EAClBK,MAAM,WAAA;AACT,cAAA,MAAA;AAAA;AAAA,YAAA,IAAA,EAAA,KAAA,CAAAC,IAAAC,OAAA;AAAA,iBAAA,eAAAA,IAAA,cAAA,EAAA,OAAA,KAAA,CAAA,GAAAA,GAAA,WAAA;ACSA,cAGA,IAAA,WAAA;AAGE,qBAAAD,KAAA;YAAA;AA4DF,mBA1DSA,GAAA,UAAAE,WAAP,SAAgBC,IAAAA;AACdC,mBAAKC,YAAYF;YAAAA,GAGZH,GAAA,UAAAM,UAAP,WAAA;YAAA,GAEON,GAAA,UAAAO,MAAP,WAAA;AACE,kBAAMC,KAAOJ,KAAKK,kBAAAA;AAClB,kBAAKD,MAASJ,KAAKC,WAAnB;AAKA,oBAAMK,KAAQN,KAAKC,UAAkBM;AAGjCP,qBAAKC,UAAUO,SAASJ,GAAKI,QAAQR,KAAKC,UAAUQ,SAASL,GAAKK,SACpEH,GAAKI,eAAeC,MAAAA,GACpBX,KAAKC,UAAUW,OAAOR,GAAKK,MAAML,GAAKI,IAAAA;cAAAA;YAAAA,GAInCZ,GAAA,UAAAS,oBAAP,WAAA;AACE,kBAAKL,KAAKC,aAILD,KAAKC,UAAUY,WAAYb,KAAKC,UAAUY,QAAQC,eAAvD;AAKA,oBAAMR,KAAQN,KAAKC,UAAkBM;AAErC,oBAAuD,MAAnDD,GAAKI,eAAeK,WAAWC,mBAA6E,MAApDV,GAAKI,eAAeK,WAAWE,kBAA3F;AAIA,sBAAMC,KAAqBC,OAAOC,iBAAiBpB,KAAKC,UAAUY,QAAQC,aAAAA,GACpEO,KAAsBC,SAASJ,GAAmBK,iBAAiB,QAAA,CAAA,GACnEC,IAAqBC,KAAKC,IAAI,GAAGJ,SAASJ,GAAmBK,iBAAiB,OAAA,CAAA,CAAA,GAC9EI,IAAeR,OAAOC,iBAAiBpB,KAAKC,UAAUY,OAAAA,GAStDe,IAAkBP,MAPjBC,SAASK,EAAaJ,iBAAiB,aAAA,CAAA,IACpCD,SAASK,EAAaJ,iBAAiB,gBAAA,CAAA,IAO3CM,IAAiBL,KANdF,SAASK,EAAaJ,iBAAiB,eAAA,CAAA,IACxCD,SAASK,EAAaJ,iBAAiB,cAAA,CAAA,KAKiBjB,GAAKwB,SAASC;AAK9E,yBAJiB,EACftB,MAAMgB,KAAKC,IA7DI,GA6DcD,KAAKO,MAAMH,IAAiBvB,GAAKI,eAAeK,WAAWC,eAAAA,CAAAA,GACxFR,MAAMiB,KAAKC,IA7DI,GA6DcD,KAAKO,MAAMJ,IAAkBtB,GAAKI,eAAeK,WAAWE,gBAAAA,CAAAA,EAAAA;gBAAAA;cAAAA;YAAAA,GAI/FrB;UAAA,EA/DA;AAAa,UAAAC,GAAAoC,WAAAA;QAAAA,EAAAA,GCrBTC,IAA2B,CAAA;ACE/B,eDCA,SAASC,EAAoBC,GAAAA;AAE5B,cAAGF,EAAyBE;AAC3B,mBAAOF,EAAyBE,GAAU7C;AAG3C,cAAIC,IAAS0C,EAAyBE,KAAY,EAGjD7C,SAAS,CAAA,EAAA;AAOV,iBAHA8C,EAAoBD,GAAU5C,GAAQA,EAAOD,SAAS4C,CAAAA,GAG/C3C,EAAOD;QAAAA,ECjBY,GAAA;MAAA,GAAA;IAAA,CAAA;;;;;ACH3B,IAAO,0BAAQ;",
  "names": ["root", "factory", "exports", "module", "define", "amd", "self", "e", "t", "activate", "terminal", "this", "_terminal", "dispose", "fit", "dims", "proposeDimensions", "core", "_core", "rows", "cols", "_renderService", "clear", "resize", "element", "parentElement", "dimensions", "actualCellWidth", "actualCellHeight", "parentElementStyle", "window", "getComputedStyle", "parentElementHeight", "parseInt", "getPropertyValue", "parentElementWidth", "Math", "max", "elementStyle", "availableHeight", "availableWidth", "viewport", "scrollBarWidth", "floor", "FitAddon", "__webpack_module_cache__", "__webpack_require__", "moduleId", "__webpack_modules__"]
}
