{
  "version": 3,
  "sources": ["../../xterm/lib/webpack:/xterm/webpack/universalModuleDefinition", "../../xterm/lib/webpack:/xterm/src/browser/AccessibilityManager.ts", "../../xterm/lib/webpack:/xterm/src/browser/Clipboard.ts", "../../xterm/lib/webpack:/xterm/src/browser/Color.ts", "../../xterm/lib/webpack:/xterm/src/browser/ColorContrastCache.ts", "../../xterm/lib/webpack:/xterm/src/browser/ColorManager.ts", "../../xterm/lib/webpack:/xterm/src/browser/Dom.ts", "../../xterm/lib/webpack:/xterm/src/browser/Lifecycle.ts", "../../xterm/lib/webpack:/xterm/src/browser/Linkifier.ts", "../../xterm/lib/webpack:/xterm/src/browser/Linkifier2.ts", "../../xterm/lib/webpack:/xterm/src/browser/LocalizableStrings.ts", "../../xterm/lib/webpack:/xterm/src/browser/MouseZoneManager.ts", "../../xterm/lib/webpack:/xterm/src/browser/RenderDebouncer.ts", "../../xterm/lib/webpack:/xterm/src/browser/ScreenDprMonitor.ts", "../../xterm/lib/webpack:/xterm/src/browser/Terminal.ts", "../../xterm/lib/webpack:/xterm/src/browser/TimeBasedDebouncer.ts", "../../xterm/lib/webpack:/xterm/src/browser/Viewport.ts", "../../xterm/lib/webpack:/xterm/src/browser/input/CompositionHelper.ts", "../../xterm/lib/webpack:/xterm/src/browser/input/Mouse.ts", "../../xterm/lib/webpack:/xterm/src/browser/input/MoveToCell.ts", "../../xterm/lib/webpack:/xterm/src/browser/public/Terminal.ts", "../../xterm/lib/webpack:/xterm/src/browser/renderer/BaseRenderLayer.ts", "../../xterm/lib/webpack:/xterm/src/browser/renderer/CursorRenderLayer.ts", "../../xterm/lib/webpack:/xterm/src/browser/renderer/CustomGlyphs.ts", "../../xterm/lib/webpack:/xterm/src/browser/renderer/GridCache.ts", "../../xterm/lib/webpack:/xterm/src/browser/renderer/LinkRenderLayer.ts", "../../xterm/lib/webpack:/xterm/src/browser/renderer/Renderer.ts", "../../xterm/lib/webpack:/xterm/src/browser/renderer/RendererUtils.ts", "../../xterm/lib/webpack:/xterm/src/browser/renderer/SelectionRenderLayer.ts", "../../xterm/lib/webpack:/xterm/src/browser/renderer/TextRenderLayer.ts", "../../xterm/lib/webpack:/xterm/src/browser/renderer/atlas/BaseCharAtlas.ts", "../../xterm/lib/webpack:/xterm/src/browser/renderer/atlas/CharAtlasCache.ts", "../../xterm/lib/webpack:/xterm/src/browser/renderer/atlas/CharAtlasUtils.ts", "../../xterm/lib/webpack:/xterm/src/browser/renderer/atlas/Constants.ts", "../../xterm/lib/webpack:/xterm/src/browser/renderer/atlas/DynamicCharAtlas.ts", "../../xterm/lib/webpack:/xterm/src/browser/renderer/atlas/LRUMap.ts", "../../xterm/lib/webpack:/xterm/src/browser/renderer/dom/DomRenderer.ts", "../../xterm/lib/webpack:/xterm/src/browser/renderer/dom/DomRendererRowFactory.ts", "../../xterm/lib/webpack:/xterm/src/browser/selection/SelectionModel.ts", "../../xterm/lib/webpack:/xterm/src/browser/services/CharSizeService.ts", "../../xterm/lib/webpack:/xterm/src/browser/services/CharacterJoinerService.ts", "../../xterm/lib/webpack:/xterm/src/browser/services/CoreBrowserService.ts", "../../xterm/lib/webpack:/xterm/src/browser/services/MouseService.ts", "../../xterm/lib/webpack:/xterm/src/browser/services/RenderService.ts", "../../xterm/lib/webpack:/xterm/src/browser/services/SelectionService.ts", "../../xterm/lib/webpack:/xterm/src/browser/services/Services.ts", "../../xterm/lib/webpack:/xterm/src/browser/services/SoundService.ts", "../../xterm/lib/webpack:/xterm/src/common/CircularList.ts", "../../xterm/lib/webpack:/xterm/src/common/Clone.ts", "../../xterm/lib/webpack:/xterm/src/common/CoreTerminal.ts", "../../xterm/lib/webpack:/xterm/src/common/EventEmitter.ts", "../../xterm/lib/webpack:/xterm/src/common/InputHandler.ts", "../../xterm/lib/webpack:/xterm/src/common/Lifecycle.ts", "../../xterm/lib/webpack:/xterm/src/common/Platform.ts", "../../xterm/lib/webpack:/xterm/src/common/TypedArrayUtils.ts", "../../xterm/lib/webpack:/xterm/src/common/WindowsMode.ts", "../../xterm/lib/webpack:/xterm/src/common/buffer/AttributeData.ts", "../../xterm/lib/webpack:/xterm/src/common/buffer/Buffer.ts", "../../xterm/lib/webpack:/xterm/src/common/buffer/BufferLine.ts", "../../xterm/lib/webpack:/xterm/src/common/buffer/BufferRange.ts", "../../xterm/lib/webpack:/xterm/src/common/buffer/BufferReflow.ts", "../../xterm/lib/webpack:/xterm/src/common/buffer/BufferSet.ts", "../../xterm/lib/webpack:/xterm/src/common/buffer/CellData.ts", "../../xterm/lib/webpack:/xterm/src/common/buffer/Constants.ts", "../../xterm/lib/webpack:/xterm/src/common/buffer/Marker.ts", "../../xterm/lib/webpack:/xterm/src/common/data/Charsets.ts", "../../xterm/lib/webpack:/xterm/src/common/data/EscapeSequences.ts", "../../xterm/lib/webpack:/xterm/src/common/input/Keyboard.ts", "../../xterm/lib/webpack:/xterm/src/common/input/TextDecoder.ts", "../../xterm/lib/webpack:/xterm/src/common/input/UnicodeV6.ts", "../../xterm/lib/webpack:/xterm/src/common/input/WriteBuffer.ts", "../../xterm/lib/webpack:/xterm/src/common/input/XParseColor.ts", "../../xterm/lib/webpack:/xterm/src/common/parser/Constants.ts", "../../xterm/lib/webpack:/xterm/src/common/parser/DcsParser.ts", "../../xterm/lib/webpack:/xterm/src/common/parser/EscapeSequenceParser.ts", "../../xterm/lib/webpack:/xterm/src/common/parser/OscParser.ts", "../../xterm/lib/webpack:/xterm/src/common/parser/Params.ts", "../../xterm/lib/webpack:/xterm/src/common/public/AddonManager.ts", "../../xterm/lib/webpack:/xterm/src/common/public/BufferApiView.ts", "../../xterm/lib/webpack:/xterm/src/common/public/BufferLineApiView.ts", "../../xterm/lib/webpack:/xterm/src/common/public/BufferNamespaceApi.ts", "../../xterm/lib/webpack:/xterm/src/common/public/ParserApi.ts", "../../xterm/lib/webpack:/xterm/src/common/public/UnicodeApi.ts", "../../xterm/lib/webpack:/xterm/src/common/services/BufferService.ts", "../../xterm/lib/webpack:/xterm/src/common/services/CharsetService.ts", "../../xterm/lib/webpack:/xterm/src/common/services/CoreMouseService.ts", "../../xterm/lib/webpack:/xterm/src/common/services/CoreService.ts", "../../xterm/lib/webpack:/xterm/src/common/services/DirtyRowService.ts", "../../xterm/lib/webpack:/xterm/src/common/services/InstantiationService.ts", "../../xterm/lib/webpack:/xterm/src/common/services/LogService.ts", "../../xterm/lib/webpack:/xterm/src/common/services/OptionsService.ts", "../../xterm/lib/webpack:/xterm/src/common/services/ServiceRegistry.ts", "../../xterm/lib/webpack:/xterm/src/common/services/Services.ts", "../../xterm/lib/webpack:/xterm/src/common/services/UnicodeService.ts", "../../xterm/lib/webpack:/xterm/webpack/bootstrap", "../../xterm/lib/webpack:/xterm/webpack/startup", "dep:xterm"],
  "sourcesContent": ["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(self, function() {\nreturn ", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport * as Strings from 'browser/LocalizableStrings';\nimport { ITerminal, IRenderDebouncer } from 'browser/Types';\nimport { IBuffer } from 'common/buffer/Types';\nimport { isMac } from 'common/Platform';\nimport { TimeBasedDebouncer } from 'browser/TimeBasedDebouncer';\nimport { addDisposableDomListener } from 'browser/Lifecycle';\nimport { Disposable } from 'common/Lifecycle';\nimport { ScreenDprMonitor } from 'browser/ScreenDprMonitor';\nimport { IRenderService } from 'browser/services/Services';\nimport { removeElementFromParent } from 'browser/Dom';\n\nconst MAX_ROWS_TO_READ = 20;\n\nconst enum BoundaryPosition {\n  TOP,\n  BOTTOM\n}\n\nexport class AccessibilityManager extends Disposable {\n  private _accessibilityTreeRoot: HTMLElement;\n  private _rowContainer: HTMLElement;\n  private _rowElements: HTMLElement[];\n  private _liveRegion: HTMLElement;\n  private _liveRegionLineCount: number = 0;\n\n  private _renderRowsDebouncer: IRenderDebouncer;\n  private _screenDprMonitor: ScreenDprMonitor;\n\n  private _topBoundaryFocusListener: (e: FocusEvent) => void;\n  private _bottomBoundaryFocusListener: (e: FocusEvent) => void;\n\n  /**\n   * This queue has a character pushed to it for keys that are pressed, if the\n   * next character added to the terminal is equal to the key char then it is\n   * not announced (added to live region) because it has already been announced\n   * by the textarea event (which cannot be canceled). There are some race\n   * condition cases if there is typing while data is streaming, but this covers\n   * the main case of typing into the prompt and inputting the answer to a\n   * question (Y/N, etc.).\n   */\n  private _charsToConsume: string[] = [];\n\n  private _charsToAnnounce: string = '';\n\n  constructor(\n    private readonly _terminal: ITerminal,\n    private readonly _renderService: IRenderService\n  ) {\n    super();\n    this._accessibilityTreeRoot = document.createElement('div');\n    this._accessibilityTreeRoot.setAttribute('role', 'document');\n    this._accessibilityTreeRoot.classList.add('xterm-accessibility');\n    this._accessibilityTreeRoot.tabIndex = 0;\n\n    this._rowContainer = document.createElement('div');\n    this._rowContainer.setAttribute('role', 'list');\n    this._rowContainer.classList.add('xterm-accessibility-tree');\n    this._rowElements = [];\n    for (let i = 0; i < this._terminal.rows; i++) {\n      this._rowElements[i] = this._createAccessibilityTreeNode();\n      this._rowContainer.appendChild(this._rowElements[i]);\n    }\n\n    this._topBoundaryFocusListener = e => this._onBoundaryFocus(e, BoundaryPosition.TOP);\n    this._bottomBoundaryFocusListener = e => this._onBoundaryFocus(e, BoundaryPosition.BOTTOM);\n    this._rowElements[0].addEventListener('focus', this._topBoundaryFocusListener);\n    this._rowElements[this._rowElements.length - 1].addEventListener('focus', this._bottomBoundaryFocusListener);\n\n    this._refreshRowsDimensions();\n    this._accessibilityTreeRoot.appendChild(this._rowContainer);\n\n    this._renderRowsDebouncer = new TimeBasedDebouncer(this._renderRows.bind(this));\n    this._refreshRows();\n\n    this._liveRegion = document.createElement('div');\n    this._liveRegion.classList.add('live-region');\n    this._liveRegion.setAttribute('aria-live', 'assertive');\n    this._accessibilityTreeRoot.appendChild(this._liveRegion);\n\n    if (!this._terminal.element) {\n      throw new Error('Cannot enable accessibility before Terminal.open');\n    }\n    this._terminal.element.insertAdjacentElement('afterbegin', this._accessibilityTreeRoot);\n\n    this.register(this._renderRowsDebouncer);\n    this.register(this._terminal.onResize(e => this._onResize(e.rows)));\n    this.register(this._terminal.onRender(e => this._refreshRows(e.start, e.end)));\n    this.register(this._terminal.onScroll(() => this._refreshRows()));\n    // Line feed is an issue as the prompt won't be read out after a command is run\n    this.register(this._terminal.onA11yChar(char => this._onChar(char)));\n    this.register(this._terminal.onLineFeed(() => this._onChar('\\n')));\n    this.register(this._terminal.onA11yTab(spaceCount => this._onTab(spaceCount)));\n    this.register(this._terminal.onKey(e => this._onKey(e.key)));\n    this.register(this._terminal.onBlur(() => this._clearLiveRegion()));\n    this.register(this._renderService.onDimensionsChange(() => this._refreshRowsDimensions()));\n\n    this._screenDprMonitor = new ScreenDprMonitor();\n    this.register(this._screenDprMonitor);\n    this._screenDprMonitor.setListener(() => this._refreshRowsDimensions());\n    // This shouldn't be needed on modern browsers but is present in case the\n    // media query that drives the ScreenDprMonitor isn't supported\n    this.register(addDisposableDomListener(window, 'resize', () => this._refreshRowsDimensions()));\n  }\n\n  public dispose(): void {\n    super.dispose();\n    removeElementFromParent(this._accessibilityTreeRoot);\n    this._rowElements.length = 0;\n  }\n\n  private _onBoundaryFocus(e: FocusEvent, position: BoundaryPosition): void {\n    const boundaryElement = e.target as HTMLElement;\n    const beforeBoundaryElement = this._rowElements[position === BoundaryPosition.TOP ? 1 : this._rowElements.length - 2];\n\n    // Don't scroll if the buffer top has reached the end in that direction\n    const posInSet = boundaryElement.getAttribute('aria-posinset');\n    const lastRowPos = position === BoundaryPosition.TOP ? '1' : `${this._terminal.buffer.lines.length}`;\n    if (posInSet === lastRowPos) {\n      return;\n    }\n\n    // Don't scroll when the last focused item was not the second row (focus is going the other\n    // direction)\n    if (e.relatedTarget !== beforeBoundaryElement) {\n      return;\n    }\n\n    // Remove old boundary element from array\n    let topBoundaryElement: HTMLElement;\n    let bottomBoundaryElement: HTMLElement;\n    if (position === BoundaryPosition.TOP) {\n      topBoundaryElement = boundaryElement;\n      bottomBoundaryElement = this._rowElements.pop()!;\n      this._rowContainer.removeChild(bottomBoundaryElement);\n    } else {\n      topBoundaryElement = this._rowElements.shift()!;\n      bottomBoundaryElement = boundaryElement;\n      this._rowContainer.removeChild(topBoundaryElement);\n    }\n\n    // Remove listeners from old boundary elements\n    topBoundaryElement.removeEventListener('focus', this._topBoundaryFocusListener);\n    bottomBoundaryElement.removeEventListener('focus', this._bottomBoundaryFocusListener);\n\n    // Add new element to array/DOM\n    if (position === BoundaryPosition.TOP) {\n      const newElement = this._createAccessibilityTreeNode();\n      this._rowElements.unshift(newElement);\n      this._rowContainer.insertAdjacentElement('afterbegin', newElement);\n    } else {\n      const newElement = this._createAccessibilityTreeNode();\n      this._rowElements.push(newElement);\n      this._rowContainer.appendChild(newElement);\n    }\n\n    // Add listeners to new boundary elements\n    this._rowElements[0].addEventListener('focus', this._topBoundaryFocusListener);\n    this._rowElements[this._rowElements.length - 1].addEventListener('focus', this._bottomBoundaryFocusListener);\n\n    // Scroll up\n    this._terminal.scrollLines(position === BoundaryPosition.TOP ? -1 : 1);\n\n    // Focus new boundary before element\n    this._rowElements[position === BoundaryPosition.TOP ? 1 : this._rowElements.length - 2].focus();\n\n    // Prevent the standard behavior\n    e.preventDefault();\n    e.stopImmediatePropagation();\n  }\n\n  private _onResize(rows: number): void {\n    // Remove bottom boundary listener\n    this._rowElements[this._rowElements.length - 1].removeEventListener('focus', this._bottomBoundaryFocusListener);\n\n    // Grow rows as required\n    for (let i = this._rowContainer.children.length; i < this._terminal.rows; i++) {\n      this._rowElements[i] = this._createAccessibilityTreeNode();\n      this._rowContainer.appendChild(this._rowElements[i]);\n    }\n    // Shrink rows as required\n    while (this._rowElements.length > rows) {\n      this._rowContainer.removeChild(this._rowElements.pop()!);\n    }\n\n    // Add bottom boundary listener\n    this._rowElements[this._rowElements.length - 1].addEventListener('focus', this._bottomBoundaryFocusListener);\n\n    this._refreshRowsDimensions();\n  }\n\n  private _createAccessibilityTreeNode(): HTMLElement {\n    const element = document.createElement('div');\n    element.setAttribute('role', 'listitem');\n    element.tabIndex = -1;\n    this._refreshRowDimensions(element);\n    return element;\n  }\n\n  private _onTab(spaceCount: number): void {\n    for (let i = 0; i < spaceCount; i++) {\n      this._onChar(' ');\n    }\n  }\n\n  private _onChar(char: string): void {\n    if (this._liveRegionLineCount < MAX_ROWS_TO_READ + 1) {\n      if (this._charsToConsume.length > 0) {\n        // Have the screen reader ignore the char if it was just input\n        const shiftedChar = this._charsToConsume.shift();\n        if (shiftedChar !== char) {\n          this._charsToAnnounce += char;\n        }\n      } else {\n        this._charsToAnnounce += char;\n      }\n\n      if (char === '\\n') {\n        this._liveRegionLineCount++;\n        if (this._liveRegionLineCount === MAX_ROWS_TO_READ + 1) {\n          this._liveRegion.textContent += Strings.tooMuchOutput;\n        }\n      }\n\n      // Only detach/attach on mac as otherwise messages can go unaccounced\n      if (isMac) {\n        if (this._liveRegion.textContent && this._liveRegion.textContent.length > 0 && !this._liveRegion.parentNode) {\n          setTimeout(() => {\n            this._accessibilityTreeRoot.appendChild(this._liveRegion);\n          }, 0);\n        }\n      }\n    }\n  }\n\n  private _clearLiveRegion(): void {\n    this._liveRegion.textContent = '';\n    this._liveRegionLineCount = 0;\n\n    // Only detach/attach on mac as otherwise messages can go unaccounced\n    if (isMac) {\n      removeElementFromParent(this._liveRegion);\n    }\n  }\n\n  private _onKey(keyChar: string): void {\n    this._clearLiveRegion();\n    this._charsToConsume.push(keyChar);\n  }\n\n  private _refreshRows(start?: number, end?: number): void {\n    this._renderRowsDebouncer.refresh(start, end, this._terminal.rows);\n  }\n\n  private _renderRows(start: number, end: number): void {\n    const buffer: IBuffer = this._terminal.buffer;\n    const setSize = buffer.lines.length.toString();\n    for (let i = start; i <= end; i++) {\n      const lineData = buffer.translateBufferLineToString(buffer.ydisp + i, true);\n      const posInSet = (buffer.ydisp + i + 1).toString();\n      const element = this._rowElements[i];\n      if (element) {\n        if (lineData.length === 0) {\n          element.innerText = '\\u00a0';\n        } else {\n          element.textContent = lineData;\n        }\n        element.setAttribute('aria-posinset', posInSet);\n        element.setAttribute('aria-setsize', setSize);\n      }\n    }\n    this._announceCharacters();\n  }\n\n  private _refreshRowsDimensions(): void {\n    if (!this._renderService.dimensions.actualCellHeight) {\n      return;\n    }\n    if (this._rowElements.length !== this._terminal.rows) {\n      this._onResize(this._terminal.rows);\n    }\n    for (let i = 0; i < this._terminal.rows; i++) {\n      this._refreshRowDimensions(this._rowElements[i]);\n    }\n  }\n\n  private _refreshRowDimensions(element: HTMLElement): void {\n    element.style.height = `${this._renderService.dimensions.actualCellHeight}px`;\n  }\n\n  private _announceCharacters(): void {\n    if (this._charsToAnnounce.length === 0) {\n      return;\n    }\n    this._liveRegion.textContent += this._charsToAnnounce;\n    this._charsToAnnounce = '';\n  }\n}\n", "/**\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ISelectionService } from 'browser/services/Services';\nimport { ICoreService } from 'common/services/Services';\n\n/**\n * Prepares text to be pasted into the terminal by normalizing the line endings\n * @param text The pasted text that needs processing before inserting into the terminal\n */\nexport function prepareTextForTerminal(text: string): string {\n  return text.replace(/\\r?\\n/g, '\\r');\n}\n\n/**\n * Bracket text for paste, if necessary, as per https://cirw.in/blog/bracketed-paste\n * @param text The pasted text to bracket\n */\nexport function bracketTextForPaste(text: string, bracketedPasteMode: boolean): string {\n  if (bracketedPasteMode) {\n    return '\\x1b[200~' + text + '\\x1b[201~';\n  }\n  return text;\n}\n\n/**\n * Binds copy functionality to the given terminal.\n * @param ev The original copy event to be handled\n */\nexport function copyHandler(ev: ClipboardEvent, selectionService: ISelectionService): void {\n  if (ev.clipboardData) {\n    ev.clipboardData.setData('text/plain', selectionService.selectionText);\n  }\n  // Prevent or the original text will be copied.\n  ev.preventDefault();\n}\n\n/**\n * Redirect the clipboard's data to the terminal's input handler.\n * @param ev The original paste event to be handled\n * @param term The terminal on which to apply the handled paste event\n */\nexport function handlePasteEvent(ev: ClipboardEvent, textarea: HTMLTextAreaElement, coreService: ICoreService): void {\n  ev.stopPropagation();\n  if (ev.clipboardData) {\n    const text = ev.clipboardData.getData('text/plain');\n    paste(text, textarea, coreService);\n  }\n}\n\nexport function paste(text: string, textarea: HTMLTextAreaElement, coreService: ICoreService): void {\n  text = prepareTextForTerminal(text);\n  text = bracketTextForPaste(text, coreService.decPrivateModes.bracketedPasteMode);\n  coreService.triggerDataEvent(text, true);\n  textarea.value = '';\n}\n\n/**\n * Moves the textarea under the mouse cursor and focuses it.\n * @param ev The original right click event to be handled.\n * @param textarea The terminal's textarea.\n */\nexport function moveTextAreaUnderMouseCursor(ev: MouseEvent, textarea: HTMLTextAreaElement, screenElement: HTMLElement): void {\n\n  // Calculate textarea position relative to the screen element\n  const pos = screenElement.getBoundingClientRect();\n  const left = ev.clientX - pos.left - 10;\n  const top = ev.clientY - pos.top - 10;\n\n  // Bring textarea at the cursor position\n  textarea.style.width = '20px';\n  textarea.style.height = '20px';\n  textarea.style.left = `${left}px`;\n  textarea.style.top = `${top}px`;\n  textarea.style.zIndex = '1000';\n\n  textarea.focus();\n}\n\n/**\n * Bind to right-click event and allow right-click copy and paste.\n * @param ev The original right click event to be handled.\n * @param textarea The terminal's textarea.\n * @param selectionService The terminal's selection manager.\n * @param shouldSelectWord If true and there is no selection the current word will be selected\n */\nexport function rightClickHandler(ev: MouseEvent, textarea: HTMLTextAreaElement, screenElement: HTMLElement, selectionService: ISelectionService, shouldSelectWord: boolean): void {\n  moveTextAreaUnderMouseCursor(ev, textarea, screenElement);\n\n  if (shouldSelectWord) {\n    selectionService.rightClickSelect(ev);\n  }\n\n  // Get textarea ready to copy from the context menu\n  textarea.value = selectionService.selectionText;\n  textarea.select();\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IColor } from 'browser/Types';\nimport { IColorRGB } from 'common/Types';\n\n/**\n * Helper functions where the source type is \"channels\" (individual color channels as numbers).\n */\nexport namespace channels {\n  export function toCss(r: number, g: number, b: number, a?: number): string {\n    if (a !== undefined) {\n      return `#${toPaddedHex(r)}${toPaddedHex(g)}${toPaddedHex(b)}${toPaddedHex(a)}`;\n    }\n    return `#${toPaddedHex(r)}${toPaddedHex(g)}${toPaddedHex(b)}`;\n  }\n\n  export function toRgba(r: number, g: number, b: number, a: number = 0xFF): number {\n    // Note: The aggregated number is RGBA32 (BE), thus needs to be converted to ABGR32\n    // on LE systems, before it can be used for direct 32-bit buffer writes.\n    // >>> 0 forces an unsigned int\n    return (r << 24 | g << 16 | b << 8 | a) >>> 0;\n  }\n}\n\n/**\n * Helper functions where the source type is `IColor`.\n */\nexport namespace color {\n  export function blend(bg: IColor, fg: IColor): IColor {\n    const a = (fg.rgba & 0xFF) / 255;\n    if (a === 1) {\n      return {\n        css: fg.css,\n        rgba: fg.rgba\n      };\n    }\n    const fgR = (fg.rgba >> 24) & 0xFF;\n    const fgG = (fg.rgba >> 16) & 0xFF;\n    const fgB = (fg.rgba >> 8) & 0xFF;\n    const bgR = (bg.rgba >> 24) & 0xFF;\n    const bgG = (bg.rgba >> 16) & 0xFF;\n    const bgB = (bg.rgba >> 8) & 0xFF;\n    const r = bgR + Math.round((fgR - bgR) * a);\n    const g = bgG + Math.round((fgG - bgG) * a);\n    const b = bgB + Math.round((fgB - bgB) * a);\n    const css = channels.toCss(r, g, b);\n    const rgba = channels.toRgba(r, g, b);\n    return { css, rgba };\n  }\n\n  export function isOpaque(color: IColor): boolean {\n    return (color.rgba & 0xFF) === 0xFF;\n  }\n\n  export function ensureContrastRatio(bg: IColor, fg: IColor, ratio: number): IColor | undefined {\n    const result = rgba.ensureContrastRatio(bg.rgba, fg.rgba, ratio);\n    if (!result) {\n      return undefined;\n    }\n    return rgba.toColor(\n      (result >> 24 & 0xFF),\n      (result >> 16 & 0xFF),\n      (result >> 8  & 0xFF)\n    );\n  }\n\n  export function opaque(color: IColor): IColor {\n    const rgbaColor = (color.rgba | 0xFF) >>> 0;\n    const [r, g, b] = rgba.toChannels(rgbaColor);\n    return {\n      css: channels.toCss(r, g, b),\n      rgba: rgbaColor\n    };\n  }\n\n  export function opacity(color: IColor, opacity: number): IColor {\n    const a = Math.round(opacity * 0xFF);\n    const [r, g, b] = rgba.toChannels(color.rgba);\n    return {\n      css: channels.toCss(r, g, b, a),\n      rgba: channels.toRgba(r, g, b, a)\n    };\n  }\n\n  export function toColorRGB(color: IColor): IColorRGB {\n    return [(color.rgba >> 24) & 0xFF, (color.rgba >> 16) & 0xFF, (color.rgba >> 8) & 0xFF];\n  }\n}\n\n/**\n * Helper functions where the source type is \"css\" (string: '#rgb', '#rgba', '#rrggbb', '#rrggbbaa').\n */\nexport namespace css {\n  export function toColor(css: string): IColor {\n    switch (css.length) {\n      case 7: // #rrggbb\n        return {\n          css,\n          rgba: (parseInt(css.slice(1), 16) << 8 | 0xFF) >>> 0\n        };\n      case 9: // #rrggbbaa\n        return {\n          css,\n          rgba: parseInt(css.slice(1), 16) >>> 0\n        };\n    }\n    throw new Error('css.toColor: Unsupported css format');\n  }\n}\n\n/**\n * Helper functions where the source type is \"rgb\" (number: 0xrrggbb).\n */\nexport namespace rgb {\n  /**\n   * Gets the relative luminance of an RGB color, this is useful in determining the contrast ratio\n   * between two colors.\n   * @param rgb The color to use.\n   * @see https://www.w3.org/TR/WCAG20/#relativeluminancedef\n   */\n  export function relativeLuminance(rgb: number): number {\n    return relativeLuminance2(\n      (rgb >> 16) & 0xFF,\n      (rgb >> 8 ) & 0xFF,\n      (rgb      ) & 0xFF);\n  }\n\n  /**\n   * Gets the relative luminance of an RGB color, this is useful in determining the contrast ratio\n   * between two colors.\n   * @param r The red channel (0x00 to 0xFF).\n   * @param g The green channel (0x00 to 0xFF).\n   * @param b The blue channel (0x00 to 0xFF).\n   * @see https://www.w3.org/TR/WCAG20/#relativeluminancedef\n   */\n  export function relativeLuminance2(r: number, g: number, b: number): number {\n    const rs = r / 255;\n    const gs = g / 255;\n    const bs = b / 255;\n    const rr = rs <= 0.03928 ? rs / 12.92 : Math.pow((rs + 0.055) / 1.055, 2.4);\n    const rg = gs <= 0.03928 ? gs / 12.92 : Math.pow((gs + 0.055) / 1.055, 2.4);\n    const rb = bs <= 0.03928 ? bs / 12.92 : Math.pow((bs + 0.055) / 1.055, 2.4);\n    return rr * 0.2126 + rg * 0.7152 + rb * 0.0722;\n  }\n}\n\n/**\n * Helper functions where the source type is \"rgba\" (number: 0xrrggbbaa).\n */\nexport namespace rgba {\n  export function ensureContrastRatio(bgRgba: number, fgRgba: number, ratio: number): number | undefined {\n    const bgL = rgb.relativeLuminance(bgRgba >> 8);\n    const fgL = rgb.relativeLuminance(fgRgba >> 8);\n    const cr = contrastRatio(bgL, fgL);\n    if (cr < ratio) {\n      if (fgL < bgL) {\n        return reduceLuminance(bgRgba, fgRgba, ratio);\n      }\n      return increaseLuminance(bgRgba, fgRgba, ratio);\n    }\n    return undefined;\n  }\n\n  export function reduceLuminance(bgRgba: number, fgRgba: number, ratio: number): number {\n    // This is a naive but fast approach to reducing luminance as converting to\n    // HSL and back is expensive\n    const bgR = (bgRgba >> 24) & 0xFF;\n    const bgG = (bgRgba >> 16) & 0xFF;\n    const bgB = (bgRgba >>  8) & 0xFF;\n    let fgR = (fgRgba >> 24) & 0xFF;\n    let fgG = (fgRgba >> 16) & 0xFF;\n    let fgB = (fgRgba >>  8) & 0xFF;\n    let cr = contrastRatio(rgb.relativeLuminance2(fgR, fgB, fgG), rgb.relativeLuminance2(bgR, bgG, bgB));\n    while (cr < ratio && (fgR > 0 || fgG > 0 || fgB > 0)) {\n      // Reduce by 10% until the ratio is hit\n      fgR -= Math.max(0, Math.ceil(fgR * 0.1));\n      fgG -= Math.max(0, Math.ceil(fgG * 0.1));\n      fgB -= Math.max(0, Math.ceil(fgB * 0.1));\n      cr = contrastRatio(rgb.relativeLuminance2(fgR, fgB, fgG), rgb.relativeLuminance2(bgR, bgG, bgB));\n    }\n    return (fgR << 24 | fgG << 16 | fgB << 8 | 0xFF) >>> 0;\n  }\n\n  export function increaseLuminance(bgRgba: number, fgRgba: number, ratio: number): number {\n    // This is a naive but fast approach to increasing luminance as converting to\n    // HSL and back is expensive\n    const bgR = (bgRgba >> 24) & 0xFF;\n    const bgG = (bgRgba >> 16) & 0xFF;\n    const bgB = (bgRgba >>  8) & 0xFF;\n    let fgR = (fgRgba >> 24) & 0xFF;\n    let fgG = (fgRgba >> 16) & 0xFF;\n    let fgB = (fgRgba >>  8) & 0xFF;\n    let cr = contrastRatio(rgb.relativeLuminance2(fgR, fgB, fgG), rgb.relativeLuminance2(bgR, bgG, bgB));\n    while (cr < ratio && (fgR < 0xFF || fgG < 0xFF || fgB < 0xFF)) {\n      // Increase by 10% until the ratio is hit\n      fgR = Math.min(0xFF, fgR + Math.ceil((255 - fgR) * 0.1));\n      fgG = Math.min(0xFF, fgG + Math.ceil((255 - fgG) * 0.1));\n      fgB = Math.min(0xFF, fgB + Math.ceil((255 - fgB) * 0.1));\n      cr = contrastRatio(rgb.relativeLuminance2(fgR, fgB, fgG), rgb.relativeLuminance2(bgR, bgG, bgB));\n    }\n    return (fgR << 24 | fgG << 16 | fgB << 8 | 0xFF) >>> 0;\n  }\n\n  // FIXME: Move this to channels NS?\n  export function toChannels(value: number): [number, number, number, number] {\n    return [(value >> 24) & 0xFF, (value >> 16) & 0xFF, (value >> 8) & 0xFF, value & 0xFF];\n  }\n\n  export function toColor(r: number, g: number, b: number): IColor {\n    return {\n      css: channels.toCss(r, g, b),\n      rgba: channels.toRgba(r, g, b)\n    };\n  }\n}\n\nexport function toPaddedHex(c: number): string {\n  const s = c.toString(16);\n  return s.length < 2 ? '0' + s : s;\n}\n\n/**\n * Gets the contrast ratio between two relative luminance values.\n * @param l1 The first relative luminance.\n * @param l2 The first relative luminance.\n * @see https://www.w3.org/TR/WCAG20/#contrast-ratiodef\n */\nexport function contrastRatio(l1: number, l2: number): number {\n  if (l1 < l2) {\n    return (l2 + 0.05) / (l1 + 0.05);\n  }\n  return (l1 + 0.05) / (l2 + 0.05);\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IColor, IColorContrastCache } from 'browser/Types';\n\nexport class ColorContrastCache implements IColorContrastCache {\n  private _color: { [bg: number]: { [fg: number]: IColor | null | undefined } | undefined } = {};\n  private _rgba: { [bg: number]: { [fg: number]: string | null | undefined } | undefined } = {};\n\n  public clear(): void {\n    this._color = {};\n    this._rgba = {};\n  }\n\n  public setCss(bg: number, fg: number, value: string | null): void {\n    if (!this._rgba[bg]) {\n      this._rgba[bg] = {};\n    }\n    this._rgba[bg]![fg] = value;\n  }\n\n  public getCss(bg: number, fg: number): string | null | undefined {\n    return this._rgba[bg] ? this._rgba[bg]![fg] : undefined;\n  }\n\n  public setColor(bg: number, fg: number, value: IColor | null): void {\n    if (!this._color[bg]) {\n      this._color[bg] = {};\n    }\n    this._color[bg]![fg] = value;\n  }\n\n  public getColor(bg: number, fg: number): IColor | null | undefined {\n    return this._color[bg] ? this._color[bg]![fg] : undefined;\n  }\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IColorManager, IColor, IColorSet, IColorContrastCache } from 'browser/Types';\nimport { ITheme } from 'common/services/Services';\nimport { channels, color, css } from 'browser/Color';\nimport { ColorContrastCache } from 'browser/ColorContrastCache';\nimport { ColorIndex } from 'common/Types';\n\n\ninterface IRestoreColorSet {\n  foreground: IColor;\n  background: IColor;\n  cursor: IColor;\n  ansi: IColor[];\n}\n\n\nconst DEFAULT_FOREGROUND = css.toColor('#ffffff');\nconst DEFAULT_BACKGROUND = css.toColor('#000000');\nconst DEFAULT_CURSOR = css.toColor('#ffffff');\nconst DEFAULT_CURSOR_ACCENT = css.toColor('#000000');\nconst DEFAULT_SELECTION = {\n  css: 'rgba(255, 255, 255, 0.3)',\n  rgba: 0xFFFFFF4D\n};\n\n// An IIFE to generate DEFAULT_ANSI_COLORS.\nexport const DEFAULT_ANSI_COLORS = Object.freeze((() => {\n  const colors = [\n    // dark:\n    css.toColor('#2e3436'),\n    css.toColor('#cc0000'),\n    css.toColor('#4e9a06'),\n    css.toColor('#c4a000'),\n    css.toColor('#3465a4'),\n    css.toColor('#75507b'),\n    css.toColor('#06989a'),\n    css.toColor('#d3d7cf'),\n    // bright:\n    css.toColor('#555753'),\n    css.toColor('#ef2929'),\n    css.toColor('#8ae234'),\n    css.toColor('#fce94f'),\n    css.toColor('#729fcf'),\n    css.toColor('#ad7fa8'),\n    css.toColor('#34e2e2'),\n    css.toColor('#eeeeec')\n  ];\n\n  // Fill in the remaining 240 ANSI colors.\n  // Generate colors (16-231)\n  const v = [0x00, 0x5f, 0x87, 0xaf, 0xd7, 0xff];\n  for (let i = 0; i < 216; i++) {\n    const r = v[(i / 36) % 6 | 0];\n    const g = v[(i / 6) % 6 | 0];\n    const b = v[i % 6];\n    colors.push({\n      css: channels.toCss(r, g, b),\n      rgba: channels.toRgba(r, g, b)\n    });\n  }\n\n  // Generate greys (232-255)\n  for (let i = 0; i < 24; i++) {\n    const c = 8 + i * 10;\n    colors.push({\n      css: channels.toCss(c, c, c),\n      rgba: channels.toRgba(c, c, c)\n    });\n  }\n\n  return colors;\n})());\n\n/**\n * Manages the source of truth for a terminal's colors.\n */\nexport class ColorManager implements IColorManager {\n  public colors: IColorSet;\n  private _ctx: CanvasRenderingContext2D;\n  private _litmusColor: CanvasGradient;\n  private _contrastCache: IColorContrastCache;\n  private _restoreColors!: IRestoreColorSet;\n\n  constructor(document: Document, public allowTransparency: boolean) {\n    const canvas = document.createElement('canvas');\n    canvas.width = 1;\n    canvas.height = 1;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      throw new Error('Could not get rendering context');\n    }\n    this._ctx = ctx;\n    this._ctx.globalCompositeOperation = 'copy';\n    this._litmusColor = this._ctx.createLinearGradient(0, 0, 1, 1);\n    this._contrastCache = new ColorContrastCache();\n    this.colors = {\n      foreground: DEFAULT_FOREGROUND,\n      background: DEFAULT_BACKGROUND,\n      cursor: DEFAULT_CURSOR,\n      cursorAccent: DEFAULT_CURSOR_ACCENT,\n      selectionTransparent: DEFAULT_SELECTION,\n      selectionOpaque: color.blend(DEFAULT_BACKGROUND, DEFAULT_SELECTION),\n      ansi: DEFAULT_ANSI_COLORS.slice(),\n      contrastCache: this._contrastCache\n    };\n    this._updateRestoreColors();\n  }\n\n  public onOptionsChange(key: string): void {\n    if (key === 'minimumContrastRatio') {\n      this._contrastCache.clear();\n    }\n  }\n\n  /**\n   * Sets the terminal's theme.\n   * @param theme The  theme to use. If a partial theme is provided then default\n   * colors will be used where colors are not defined.\n   */\n  public setTheme(theme: ITheme = {}): void {\n    this.colors.foreground = this._parseColor(theme.foreground, DEFAULT_FOREGROUND);\n    this.colors.background = this._parseColor(theme.background, DEFAULT_BACKGROUND);\n    this.colors.cursor = this._parseColor(theme.cursor, DEFAULT_CURSOR, true);\n    this.colors.cursorAccent = this._parseColor(theme.cursorAccent, DEFAULT_CURSOR_ACCENT, true);\n    this.colors.selectionTransparent = this._parseColor(theme.selection, DEFAULT_SELECTION, true);\n    this.colors.selectionOpaque = color.blend(this.colors.background, this.colors.selectionTransparent);\n    /**\n     * If selection color is opaque, blend it with background with 0.3 opacity\n     * Issue #2737\n     */\n    if (color.isOpaque(this.colors.selectionTransparent)) {\n      const opacity = 0.3;\n      this.colors.selectionTransparent = color.opacity(this.colors.selectionTransparent, opacity);\n    }\n    this.colors.ansi[0] = this._parseColor(theme.black, DEFAULT_ANSI_COLORS[0]);\n    this.colors.ansi[1] = this._parseColor(theme.red, DEFAULT_ANSI_COLORS[1]);\n    this.colors.ansi[2] = this._parseColor(theme.green, DEFAULT_ANSI_COLORS[2]);\n    this.colors.ansi[3] = this._parseColor(theme.yellow, DEFAULT_ANSI_COLORS[3]);\n    this.colors.ansi[4] = this._parseColor(theme.blue, DEFAULT_ANSI_COLORS[4]);\n    this.colors.ansi[5] = this._parseColor(theme.magenta, DEFAULT_ANSI_COLORS[5]);\n    this.colors.ansi[6] = this._parseColor(theme.cyan, DEFAULT_ANSI_COLORS[6]);\n    this.colors.ansi[7] = this._parseColor(theme.white, DEFAULT_ANSI_COLORS[7]);\n    this.colors.ansi[8] = this._parseColor(theme.brightBlack, DEFAULT_ANSI_COLORS[8]);\n    this.colors.ansi[9] = this._parseColor(theme.brightRed, DEFAULT_ANSI_COLORS[9]);\n    this.colors.ansi[10] = this._parseColor(theme.brightGreen, DEFAULT_ANSI_COLORS[10]);\n    this.colors.ansi[11] = this._parseColor(theme.brightYellow, DEFAULT_ANSI_COLORS[11]);\n    this.colors.ansi[12] = this._parseColor(theme.brightBlue, DEFAULT_ANSI_COLORS[12]);\n    this.colors.ansi[13] = this._parseColor(theme.brightMagenta, DEFAULT_ANSI_COLORS[13]);\n    this.colors.ansi[14] = this._parseColor(theme.brightCyan, DEFAULT_ANSI_COLORS[14]);\n    this.colors.ansi[15] = this._parseColor(theme.brightWhite, DEFAULT_ANSI_COLORS[15]);\n    // Clear our the cache\n    this._contrastCache.clear();\n    this._updateRestoreColors();\n  }\n\n  public restoreColor(slot?: ColorIndex): void {\n    // unset slot restores all ansi colors\n    if (slot === undefined) {\n      for (let i = 0; i < this._restoreColors.ansi.length; ++i) {\n        this.colors.ansi[i] = this._restoreColors.ansi[i];\n      }\n      return;\n    }\n    switch (slot) {\n      case ColorIndex.FOREGROUND:\n        this.colors.foreground = this._restoreColors.foreground;\n        break;\n      case ColorIndex.BACKGROUND:\n        this.colors.background = this._restoreColors.background;\n        break;\n      case ColorIndex.CURSOR:\n        this.colors.cursor = this._restoreColors.cursor;\n        break;\n      default:\n        this.colors.ansi[slot] = this._restoreColors.ansi[slot];\n    }\n  }\n\n  private _updateRestoreColors(): void {\n    this._restoreColors = {\n      foreground: this.colors.foreground,\n      background: this.colors.background,\n      cursor: this.colors.cursor,\n      ansi: [...this.colors.ansi]\n    };\n  }\n\n  private _parseColor(\n    css: string | undefined,\n    fallback: IColor,\n    allowTransparency: boolean = this.allowTransparency\n  ): IColor {\n    if (css === undefined) {\n      return fallback;\n    }\n\n    // If parsing the value results in failure, then it must be ignored, and the attribute must\n    // retain its previous value.\n    // -- https://html.spec.whatwg.org/multipage/canvas.html#fill-and-stroke-styles\n    this._ctx.fillStyle = this._litmusColor;\n    this._ctx.fillStyle = css;\n    if (typeof this._ctx.fillStyle !== 'string') {\n      console.warn(`Color: ${css} is invalid using fallback ${fallback.css}`);\n      return fallback;\n    }\n\n    this._ctx.fillRect(0, 0, 1, 1);\n    const data = this._ctx.getImageData(0, 0, 1, 1).data;\n\n    // Check if the printed color was transparent\n    if (data[3] !== 0xFF) {\n      if (!allowTransparency) {\n        // Ideally we'd just ignore the alpha channel, but...\n        //\n        // Browsers may not give back exactly the same RGB values we put in, because most/all\n        // convert the color to a pre-multiplied representation. getImageData converts that back to\n        // a un-premultipled representation, but the precision loss may make the RGB channels unuable\n        // on their own.\n        //\n        // E.g. In Chrome #12345610 turns into #10305010, and in the extreme case, 0xFFFFFF00 turns\n        // into 0x00000000.\n        //\n        // \"Note: Due to the lossy nature of converting to and from premultiplied alpha color values,\n        // pixels that have just been set using putImageData() might be returned to an equivalent\n        // getImageData() as different values.\"\n        // -- https://html.spec.whatwg.org/multipage/canvas.html#pixel-manipulation\n        //\n        // So let's just use the fallback color in this case instead.\n        console.warn(\n          `Color: ${css} is using transparency, but allowTransparency is false. ` +\n          `Using fallback ${fallback.css}.`\n        );\n        return fallback;\n      }\n\n      // https://html.spec.whatwg.org/multipage/canvas.html#serialisation-of-a-color\n      // the color value has alpha less than 1.0, and the string is the color value in the CSS rgba()\n      const [r, g, b, a] = this._ctx.fillStyle.substring(5, this._ctx.fillStyle.length - 1).split(',').map(component => Number(component));\n      const alpha = Math.round(a * 255);\n      const rgba: number = channels.toRgba(r, g, b, alpha);\n      return {\n        rgba,\n        css\n      };\n    }\n\n    return {\n      // https://html.spec.whatwg.org/multipage/canvas.html#serialisation-of-a-color\n      // if it has alpha equal to 1.0, then the string is a lowercase six-digit hex value, prefixed with a \"#\" character\n      css: this._ctx.fillStyle,\n      rgba: channels.toRgba(data[0], data[1], data[2], data[3])\n    };\n  }\n}\n", "/**\n * Copyright (c) 2020 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nexport function removeElementFromParent(...elements: (HTMLElement | undefined)[]): void {\n  for (const e of elements) {\n    e?.parentElement?.removeChild(e);\n  }\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IDisposable } from 'common/Types';\n\n/**\n * Adds a disposable listener to a node in the DOM, returning the disposable.\n * @param type The event type.\n * @param handler The handler for the listener.\n */\nexport function addDisposableDomListener(\n  node: Element | Window | Document,\n  type: string,\n  handler: (e: any) => void,\n  options?: boolean | AddEventListenerOptions\n): IDisposable {\n  node.addEventListener(type, handler, options);\n  let disposed = false;\n  return {\n    dispose: () => {\n      if (disposed) {\n        return;\n      }\n      disposed = true;\n      node.removeEventListener(type, handler, options);\n    }\n  };\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ILinkifierEvent, ILinkMatcher, LinkMatcherHandler, ILinkMatcherOptions, ILinkifier, IMouseZoneManager, IMouseZone, IRegisteredLinkMatcher } from 'browser/Types';\nimport { IBufferStringIteratorResult } from 'common/buffer/Types';\nimport { EventEmitter, IEvent } from 'common/EventEmitter';\nimport { ILogService, IBufferService, IOptionsService, IUnicodeService } from 'common/services/Services';\n\n/**\n * Limit of the unwrapping line expansion (overscan) at the top and bottom\n * of the actual viewport in ASCII characters.\n * A limit of 2000 should match most sane urls.\n */\nconst OVERSCAN_CHAR_LIMIT = 2000;\n\n/**\n * The Linkifier applies links to rows shortly after they have been refreshed.\n */\nexport class Linkifier implements ILinkifier {\n  /**\n   * The time to wait after a row is changed before it is linkified. This prevents\n   * the costly operation of searching every row multiple times, potentially a\n   * huge amount of times.\n   */\n  protected static _timeBeforeLatency = 200;\n\n  protected _linkMatchers: IRegisteredLinkMatcher[] = [];\n\n  private _mouseZoneManager: IMouseZoneManager | undefined;\n  private _element: HTMLElement | undefined;\n\n  private _rowsTimeoutId: number | undefined;\n  private _nextLinkMatcherId = 0;\n  private _rowsToLinkify: { start: number | undefined, end: number | undefined };\n\n  private _onShowLinkUnderline = new EventEmitter<ILinkifierEvent>();\n  public get onShowLinkUnderline(): IEvent<ILinkifierEvent> { return this._onShowLinkUnderline.event; }\n  private _onHideLinkUnderline = new EventEmitter<ILinkifierEvent>();\n  public get onHideLinkUnderline(): IEvent<ILinkifierEvent> { return this._onHideLinkUnderline.event; }\n  private _onLinkTooltip = new EventEmitter<ILinkifierEvent>();\n  public get onLinkTooltip(): IEvent<ILinkifierEvent> { return this._onLinkTooltip.event; }\n\n  constructor(\n    @IBufferService protected readonly _bufferService: IBufferService,\n    @ILogService private readonly _logService: ILogService,\n    @IUnicodeService private readonly _unicodeService: IUnicodeService\n  ) {\n    this._rowsToLinkify = {\n      start: undefined,\n      end: undefined\n    };\n  }\n\n  /**\n   * Attaches the linkifier to the DOM, enabling linkification.\n   * @param mouseZoneManager The mouse zone manager to register link zones with.\n   */\n  public attachToDom(element: HTMLElement, mouseZoneManager: IMouseZoneManager): void {\n    this._element = element;\n    this._mouseZoneManager = mouseZoneManager;\n  }\n\n  /**\n   * Queue linkification on a set of rows.\n   * @param start The row to linkify from (inclusive).\n   * @param end The row to linkify to (inclusive).\n   */\n  public linkifyRows(start: number, end: number): void {\n    // Don't attempt linkify if not yet attached to DOM\n    if (!this._mouseZoneManager) {\n      return;\n    }\n\n    // Increase range to linkify\n    if (this._rowsToLinkify.start === undefined || this._rowsToLinkify.end === undefined) {\n      this._rowsToLinkify.start = start;\n      this._rowsToLinkify.end = end;\n    } else {\n      this._rowsToLinkify.start = Math.min(this._rowsToLinkify.start, start);\n      this._rowsToLinkify.end = Math.max(this._rowsToLinkify.end, end);\n    }\n\n    // Clear out any existing links on this row range\n    this._mouseZoneManager.clearAll(start, end);\n\n    // Restart timer\n    if (this._rowsTimeoutId) {\n      clearTimeout(this._rowsTimeoutId);\n    }\n\n    // Cannot use window.setTimeout since tests need to run in node\n    this._rowsTimeoutId = setTimeout(() => this._linkifyRows(), Linkifier._timeBeforeLatency) as any as number;\n  }\n\n  /**\n   * Linkifies the rows requested.\n   */\n  private _linkifyRows(): void {\n    this._rowsTimeoutId = undefined;\n    const buffer = this._bufferService.buffer;\n\n    if (this._rowsToLinkify.start === undefined || this._rowsToLinkify.end === undefined) {\n      this._logService.debug('_rowToLinkify was unset before _linkifyRows was called');\n      return;\n    }\n\n    // Ensure the start row exists\n    const absoluteRowIndexStart = buffer.ydisp + this._rowsToLinkify.start;\n    if (absoluteRowIndexStart >= buffer.lines.length) {\n      return;\n    }\n\n    // Invalidate bad end row values (if a resize happened)\n    const absoluteRowIndexEnd = buffer.ydisp + Math.min(this._rowsToLinkify.end, this._bufferService.rows) + 1;\n\n    // Iterate over the range of unwrapped content strings within start..end\n    // (excluding).\n    // _doLinkifyRow gets full unwrapped lines with the start row as buffer offset\n    // for every matcher.\n    // The unwrapping is needed to also match content that got wrapped across\n    // several buffer lines. To avoid a worst case scenario where the whole buffer\n    // contains just a single unwrapped string we limit this line expansion beyond\n    // the viewport to +OVERSCAN_CHAR_LIMIT chars (overscan) at top and bottom.\n    // This comes with the tradeoff that matches longer than OVERSCAN_CHAR_LIMIT\n    // chars will not match anymore at the viewport borders.\n    const overscanLineLimit = Math.ceil(OVERSCAN_CHAR_LIMIT / this._bufferService.cols);\n    const iterator = this._bufferService.buffer.iterator(\n      false, absoluteRowIndexStart, absoluteRowIndexEnd, overscanLineLimit, overscanLineLimit);\n    while (iterator.hasNext()) {\n      const lineData: IBufferStringIteratorResult = iterator.next();\n      for (let i = 0; i < this._linkMatchers.length; i++) {\n        this._doLinkifyRow(lineData.range.first, lineData.content, this._linkMatchers[i]);\n      }\n    }\n\n    this._rowsToLinkify.start = undefined;\n    this._rowsToLinkify.end = undefined;\n  }\n\n  /**\n   * Registers a link matcher, allowing custom link patterns to be matched and\n   * handled.\n   * @param regex The regular expression to search for. Specifically, this\n   * searches the textContent of the rows. You will want to use \\s to match a\n   * space ' ' character for example.\n   * @param handler The callback when the link is called.\n   * @param options Options for the link matcher.\n   * @return The ID of the new matcher, this can be used to deregister.\n   */\n  public registerLinkMatcher(regex: RegExp, handler: LinkMatcherHandler, options: ILinkMatcherOptions = {}): number {\n    if (!handler) {\n      throw new Error('handler must be defined');\n    }\n    const matcher: IRegisteredLinkMatcher = {\n      id: this._nextLinkMatcherId++,\n      regex,\n      handler,\n      matchIndex: options.matchIndex,\n      validationCallback: options.validationCallback,\n      hoverTooltipCallback: options.tooltipCallback,\n      hoverLeaveCallback: options.leaveCallback,\n      willLinkActivate: options.willLinkActivate,\n      priority: options.priority || 0\n    };\n    this._addLinkMatcherToList(matcher);\n    return matcher.id;\n  }\n\n  /**\n   * Inserts a link matcher to the list in the correct position based on the\n   * priority of each link matcher. New link matchers of equal priority are\n   * considered after older link matchers.\n   * @param matcher The link matcher to be added.\n   */\n  private _addLinkMatcherToList(matcher: IRegisteredLinkMatcher): void {\n    if (this._linkMatchers.length === 0) {\n      this._linkMatchers.push(matcher);\n      return;\n    }\n\n    for (let i = this._linkMatchers.length - 1; i >= 0; i--) {\n      if (matcher.priority <= this._linkMatchers[i].priority) {\n        this._linkMatchers.splice(i + 1, 0, matcher);\n        return;\n      }\n    }\n\n    this._linkMatchers.splice(0, 0, matcher);\n  }\n\n  /**\n   * Deregisters a link matcher if it has been registered.\n   * @param matcherId The link matcher's ID (returned after register)\n   * @return Whether a link matcher was found and deregistered.\n   */\n  public deregisterLinkMatcher(matcherId: number): boolean {\n    for (let i = 0; i < this._linkMatchers.length; i++) {\n      if (this._linkMatchers[i].id === matcherId) {\n        this._linkMatchers.splice(i, 1);\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Linkifies a row given a specific handler.\n   * @param rowIndex The row index to linkify (absolute index).\n   * @param text string content of the unwrapped row.\n   * @param matcher The link matcher for this line.\n   */\n  private _doLinkifyRow(rowIndex: number, text: string, matcher: ILinkMatcher): void {\n    // clone regex to do a global search on text\n    const rex = new RegExp(matcher.regex.source, (matcher.regex.flags || '') + 'g');\n    let match;\n    let stringIndex = -1;\n    while ((match = rex.exec(text)) !== null) {\n      const uri = match[typeof matcher.matchIndex !== 'number' ? 0 : matcher.matchIndex];\n      if (!uri) {\n        // something matched but does not comply with the given matchIndex\n        // since this is most likely a bug the regex itself we simply do nothing here\n        this._logService.debug('match found without corresponding matchIndex', match, matcher);\n        break;\n      }\n\n      // Get index, match.index is for the outer match which includes negated chars\n      // therefore we cannot use match.index directly, instead we search the position\n      // of the match group in text again\n      // also correct regex and string search offsets for the next loop run\n      stringIndex = text.indexOf(uri, stringIndex + 1);\n      rex.lastIndex = stringIndex + uri.length;\n      if (stringIndex < 0) {\n        // invalid stringIndex (should not have happened)\n        break;\n      }\n\n      // get the buffer index as [absolute row, col] for the match\n      const bufferIndex = this._bufferService.buffer.stringIndexToBufferIndex(rowIndex, stringIndex);\n      if (bufferIndex[0] < 0) {\n        // invalid bufferIndex (should not have happened)\n        break;\n      }\n\n      const line = this._bufferService.buffer.lines.get(bufferIndex[0]);\n      if (!line) {\n        break;\n      }\n\n      const attr = line.getFg(bufferIndex[1]);\n      const fg = attr ? (attr >> 9) & 0x1ff : undefined;\n\n      if (matcher.validationCallback) {\n        matcher.validationCallback(uri, isValid => {\n          // Discard link if the line has already changed\n          if (this._rowsTimeoutId) {\n            return;\n          }\n          if (isValid) {\n            this._addLink(bufferIndex[1], bufferIndex[0] - this._bufferService.buffer.ydisp, uri, matcher, fg);\n          }\n        });\n      } else {\n        this._addLink(bufferIndex[1], bufferIndex[0] - this._bufferService.buffer.ydisp, uri, matcher, fg);\n      }\n    }\n  }\n\n  /**\n   * Registers a link to the mouse zone manager.\n   * @param x The column the link starts.\n   * @param y The row the link is on.\n   * @param uri The URI of the link.\n   * @param matcher The link matcher for the link.\n   * @param fg The link color for hover event.\n   */\n  private _addLink(x: number, y: number, uri: string, matcher: ILinkMatcher, fg: number | undefined): void {\n    if (!this._mouseZoneManager || !this._element) {\n      return;\n    }\n    // FIXME: get cell length from buffer to avoid mismatch after Unicode version change\n    const width = this._unicodeService.getStringCellWidth(uri);\n    const x1 = x % this._bufferService.cols;\n    const y1 = y + Math.floor(x / this._bufferService.cols);\n    let x2 = (x1 + width) % this._bufferService.cols;\n    let y2 = y1 + Math.floor((x1 + width) / this._bufferService.cols);\n    if (x2 === 0) {\n      x2 = this._bufferService.cols;\n      y2--;\n    }\n\n    this._mouseZoneManager.add(new MouseZone(\n      x1 + 1,\n      y1 + 1,\n      x2 + 1,\n      y2 + 1,\n      e => {\n        if (matcher.handler) {\n          return matcher.handler(e, uri);\n        }\n        const newWindow = window.open();\n        if (newWindow) {\n          newWindow.opener = null;\n          newWindow.location.href = uri;\n        } else {\n          console.warn('Opening link blocked as opener could not be cleared');\n        }\n      },\n      () => {\n        this._onShowLinkUnderline.fire(this._createLinkHoverEvent(x1, y1, x2, y2, fg));\n        this._element!.classList.add('xterm-cursor-pointer');\n      },\n      e => {\n        this._onLinkTooltip.fire(this._createLinkHoverEvent(x1, y1, x2, y2, fg));\n        if (matcher.hoverTooltipCallback) {\n          // Note that IViewportRange use 1-based coordinates to align with escape sequences such\n          // as CUP which use 1,1 as the default for row/col\n          matcher.hoverTooltipCallback(e, uri, { start: { x: x1, y: y1 }, end: { x: x2, y: y2 } });\n        }\n      },\n      () => {\n        this._onHideLinkUnderline.fire(this._createLinkHoverEvent(x1, y1, x2, y2, fg));\n        this._element!.classList.remove('xterm-cursor-pointer');\n        if (matcher.hoverLeaveCallback) {\n          matcher.hoverLeaveCallback();\n        }\n      },\n      e => {\n        if (matcher.willLinkActivate) {\n          return matcher.willLinkActivate(e, uri);\n        }\n        return true;\n      }\n    ));\n  }\n\n  private _createLinkHoverEvent(x1: number, y1: number, x2: number, y2: number, fg: number | undefined): ILinkifierEvent {\n    return { x1, y1, x2, y2, cols: this._bufferService.cols, fg };\n  }\n}\n\nexport class MouseZone implements IMouseZone {\n  constructor(\n    public x1: number,\n    public y1: number,\n    public x2: number,\n    public y2: number,\n    public clickCallback: (e: MouseEvent) => any,\n    public hoverCallback: (e: MouseEvent) => any,\n    public tooltipCallback: (e: MouseEvent) => any,\n    public leaveCallback: () => void,\n    public willLinkActivate: (e: MouseEvent) => boolean\n  ) {\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ILinkifier2, ILinkProvider, IBufferCellPosition, ILink, ILinkifierEvent, ILinkDecorations, ILinkWithState } from 'browser/Types';\nimport { IDisposable } from 'common/Types';\nimport { IMouseService, IRenderService } from './services/Services';\nimport { IBufferService } from 'common/services/Services';\nimport { EventEmitter, IEvent } from 'common/EventEmitter';\nimport { Disposable, getDisposeArrayDisposable, disposeArray } from 'common/Lifecycle';\nimport { addDisposableDomListener } from 'browser/Lifecycle';\n\nexport class Linkifier2 extends Disposable implements ILinkifier2 {\n  private _element: HTMLElement | undefined;\n  private _mouseService: IMouseService | undefined;\n  private _renderService: IRenderService | undefined;\n  private _linkProviders: ILinkProvider[] = [];\n  public get currentLink(): ILinkWithState | undefined { return this._currentLink; }\n  protected _currentLink: ILinkWithState | undefined;\n  private _lastMouseEvent: MouseEvent | undefined;\n  private _linkCacheDisposables: IDisposable[] = [];\n  private _lastBufferCell: IBufferCellPosition | undefined;\n  private _isMouseOut: boolean = true;\n  private _activeProviderReplies: Map<Number, ILinkWithState[] | undefined> | undefined;\n  private _activeLine: number = -1;\n\n  private _onShowLinkUnderline = this.register(new EventEmitter<ILinkifierEvent>());\n  public get onShowLinkUnderline(): IEvent<ILinkifierEvent> { return this._onShowLinkUnderline.event; }\n  private _onHideLinkUnderline = this.register(new EventEmitter<ILinkifierEvent>());\n  public get onHideLinkUnderline(): IEvent<ILinkifierEvent> { return this._onHideLinkUnderline.event; }\n\n  constructor(\n    @IBufferService private readonly _bufferService: IBufferService\n  ) {\n    super();\n    this.register(getDisposeArrayDisposable(this._linkCacheDisposables));\n  }\n\n  public registerLinkProvider(linkProvider: ILinkProvider): IDisposable {\n    this._linkProviders.push(linkProvider);\n    return {\n      dispose: () => {\n        // Remove the link provider from the list\n        const providerIndex = this._linkProviders.indexOf(linkProvider);\n\n        if (providerIndex !== -1) {\n          this._linkProviders.splice(providerIndex, 1);\n        }\n      }\n    };\n  }\n\n  public attachToDom(element: HTMLElement, mouseService: IMouseService, renderService: IRenderService): void {\n    this._element = element;\n    this._mouseService = mouseService;\n    this._renderService = renderService;\n\n    this.register(addDisposableDomListener(this._element, 'mouseleave', () => {\n      this._isMouseOut = true;\n      this._clearCurrentLink();\n    }));\n    this.register(addDisposableDomListener(this._element, 'mousemove', this._onMouseMove.bind(this)));\n    this.register(addDisposableDomListener(this._element, 'click', this._onClick.bind(this)));\n  }\n\n  private _onMouseMove(event: MouseEvent): void {\n    this._lastMouseEvent = event;\n\n    if (!this._element || !this._mouseService) {\n      return;\n    }\n\n    const position = this._positionFromMouseEvent(event, this._element, this._mouseService);\n    if (!position) {\n      return;\n    }\n    this._isMouseOut = false;\n\n    // Ignore the event if it's an embedder created hover widget\n    const composedPath = event.composedPath() as HTMLElement[];\n    for (let i = 0; i < composedPath.length; i++) {\n      const target = composedPath[i];\n      // Hit Terminal.element, break and continue\n      if (target.classList.contains('xterm')) {\n        break;\n      }\n      // It's a hover, don't respect hover event\n      if (target.classList.contains('xterm-hover')) {\n        return;\n      }\n    }\n\n    if (!this._lastBufferCell || (position.x !== this._lastBufferCell.x || position.y !== this._lastBufferCell.y)) {\n      this._onHover(position);\n      this._lastBufferCell = position;\n    }\n  }\n\n  private _onHover(position: IBufferCellPosition): void {\n    // TODO: This currently does not cache link provider results across wrapped lines, activeLine should be something like `activeRange: {startY, endY}`\n    // Check if we need to clear the link\n    if (this._activeLine !== position.y) {\n      this._clearCurrentLink();\n      this._askForLink(position, false);\n      return;\n    }\n\n    // Check the if the link is in the mouse position\n    const isCurrentLinkInPosition = this._currentLink && this._linkAtPosition(this._currentLink.link, position);\n    if (!isCurrentLinkInPosition) {\n      this._clearCurrentLink();\n      this._askForLink(position, true);\n    }\n  }\n\n  private _askForLink(position: IBufferCellPosition, useLineCache: boolean): void {\n    if (!this._activeProviderReplies || !useLineCache) {\n      this._activeProviderReplies?.forEach(reply => {\n        reply?.forEach(linkWithState => {\n          if (linkWithState.link.dispose) {\n            linkWithState.link.dispose();\n          }\n        });\n      });\n      this._activeProviderReplies = new Map();\n      this._activeLine = position.y;\n    }\n    let linkProvided = false;\n\n    // There is no link cached, so ask for one\n    this._linkProviders.forEach((linkProvider, i) => {\n      if (useLineCache) {\n        const existingReply = this._activeProviderReplies?.get(i);\n        // If there isn't a reply, the provider hasn't responded yet.\n\n        // TODO: If there isn't a reply yet it means that the provider is still resolving. Ensuring\n        // provideLinks isn't triggered again saves ILink.hover firing twice though. This probably\n        // needs promises to get fixed\n        if (existingReply) {\n          linkProvided = this._checkLinkProviderResult(i, position, linkProvided);\n        }\n      } else {\n        linkProvider.provideLinks(position.y, (links: ILink[] | undefined) => {\n          if (this._isMouseOut) {\n            return;\n          }\n          const linksWithState: ILinkWithState[] | undefined = links?.map(link  => ({ link }));\n          this._activeProviderReplies?.set(i, linksWithState);\n          linkProvided = this._checkLinkProviderResult(i, position, linkProvided);\n\n          // If all providers have responded, remove lower priority links that intersect ranges of\n          // higher priority links\n          if (this._activeProviderReplies?.size === this._linkProviders.length) {\n            this._removeIntersectingLinks(position.y, this._activeProviderReplies);\n          }\n        });\n      }\n    });\n  }\n\n  private _removeIntersectingLinks(y: number, replies: Map<Number, ILinkWithState[] | undefined>): void {\n    const occupiedCells = new Set<number>();\n    for (let i = 0; i < replies.size; i++) {\n      const providerReply = replies.get(i);\n      if (!providerReply) {\n        continue;\n      }\n      for (let i = 0; i < providerReply.length; i++) {\n        const linkWithState = providerReply[i];\n        const startX = linkWithState.link.range.start.y < y ? 0 : linkWithState.link.range.start.x;\n        const endX = linkWithState.link.range.end.y > y ? this._bufferService.cols : linkWithState.link.range.end.x;\n        for (let x = startX; x <= endX; x++) {\n          if (occupiedCells.has(x)) {\n            providerReply.splice(i--, 1);\n            break;\n          }\n          occupiedCells.add(x);\n        }\n      }\n    }\n  }\n\n  private _checkLinkProviderResult(index: number, position: IBufferCellPosition, linkProvided: boolean): boolean {\n    if (!this._activeProviderReplies) {\n      return linkProvided;\n    }\n\n    const links = this._activeProviderReplies.get(index);\n\n    // Check if every provider before this one has come back undefined\n    let hasLinkBefore = false;\n    for (let j = 0; j < index; j++) {\n      if (!this._activeProviderReplies.has(j) || this._activeProviderReplies.get(j)) {\n        hasLinkBefore = true;\n      }\n    }\n\n    // If all providers with higher priority came back undefined, then this provider's link for\n    // the position should be used\n    if (!hasLinkBefore && links) {\n      const linkAtPosition = links.find(link => this._linkAtPosition(link.link, position));\n      if (linkAtPosition) {\n        linkProvided = true;\n        this._handleNewLink(linkAtPosition);\n      }\n    }\n\n    // Check if all the providers have responded\n    if (this._activeProviderReplies.size === this._linkProviders.length && !linkProvided) {\n      // Respect the order of the link providers\n      for (let j = 0; j < this._activeProviderReplies.size; j++) {\n        const currentLink = this._activeProviderReplies.get(j)?.find(link => this._linkAtPosition(link.link, position));\n        if (currentLink) {\n          linkProvided = true;\n          this._handleNewLink(currentLink);\n          break;\n        }\n      }\n    }\n\n    return linkProvided;\n  }\n\n  private _onClick(event: MouseEvent): void {\n    if (!this._element || !this._mouseService || !this._currentLink) {\n      return;\n    }\n\n    const position = this._positionFromMouseEvent(event, this._element, this._mouseService);\n\n    if (!position) {\n      return;\n    }\n\n    if (this._linkAtPosition(this._currentLink.link, position)) {\n      this._currentLink.link.activate(event, this._currentLink.link.text);\n    }\n  }\n\n  private _clearCurrentLink(startRow?: number, endRow?: number): void {\n    if (!this._element || !this._currentLink || !this._lastMouseEvent) {\n      return;\n    }\n\n    // If we have a start and end row, check that the link is within it\n    if (!startRow || !endRow || (this._currentLink.link.range.start.y >= startRow && this._currentLink.link.range.end.y <= endRow)) {\n      this._linkLeave(this._element, this._currentLink.link, this._lastMouseEvent);\n      this._currentLink = undefined;\n      disposeArray(this._linkCacheDisposables);\n    }\n  }\n\n  private _handleNewLink(linkWithState: ILinkWithState): void {\n    if (!this._element || !this._lastMouseEvent || !this._mouseService) {\n      return;\n    }\n\n    const position = this._positionFromMouseEvent(this._lastMouseEvent, this._element, this._mouseService);\n\n    if (!position) {\n      return;\n    }\n\n    // Trigger hover if the we have a link at the position\n    if (this._linkAtPosition(linkWithState.link, position)) {\n      this._currentLink = linkWithState;\n      this._currentLink.state = {\n        decorations: {\n          underline: linkWithState.link.decorations === undefined ? true : linkWithState.link.decorations.underline,\n          pointerCursor: linkWithState.link.decorations === undefined ? true : linkWithState.link.decorations.pointerCursor\n        },\n        isHovered: true\n      };\n      this._linkHover(this._element, linkWithState.link, this._lastMouseEvent);\n\n      // Add listener for tracking decorations changes\n      linkWithState.link.decorations = {} as ILinkDecorations;\n      Object.defineProperties(linkWithState.link.decorations, {\n        pointerCursor: {\n          get: () => this._currentLink?.state?.decorations.pointerCursor,\n          set: v => {\n            if (this._currentLink?.state && this._currentLink.state.decorations.pointerCursor !== v) {\n              this._currentLink.state.decorations.pointerCursor = v;\n              if (this._currentLink.state.isHovered) {\n                this._element?.classList.toggle('xterm-cursor-pointer', v);\n              }\n            }\n          }\n        },\n        underline: {\n          get: () => this._currentLink?.state?.decorations.underline,\n          set: v => {\n            if (this._currentLink?.state && this._currentLink?.state?.decorations.underline !== v) {\n              this._currentLink.state.decorations.underline = v;\n              if (this._currentLink.state.isHovered) {\n                this._fireUnderlineEvent(linkWithState.link, v);\n              }\n            }\n          }\n        }\n      });\n\n      // Add listener for rerendering\n      if (this._renderService) {\n        this._linkCacheDisposables.push(this._renderService.onRenderedBufferChange(e => {\n          // When start is 0 a scroll most likely occurred, make sure links above the fold also get\n          // cleared.\n          const start = e.start === 0 ? 0 : e.start + 1 + this._bufferService.buffer.ydisp;\n          this._clearCurrentLink(start, e.end + 1 + this._bufferService.buffer.ydisp);\n        }));\n      }\n    }\n  }\n\n  protected _linkHover(element: HTMLElement, link: ILink, event: MouseEvent): void {\n    if (this._currentLink?.state) {\n      this._currentLink.state.isHovered = true;\n      if (this._currentLink.state.decorations.underline) {\n        this._fireUnderlineEvent(link, true);\n      }\n      if (this._currentLink.state.decorations.pointerCursor) {\n        element.classList.add('xterm-cursor-pointer');\n      }\n    }\n\n    if (link.hover) {\n      link.hover(event, link.text);\n    }\n  }\n\n  private _fireUnderlineEvent(link: ILink, showEvent: boolean): void {\n    const range = link.range;\n    const scrollOffset = this._bufferService.buffer.ydisp;\n    const event = this._createLinkUnderlineEvent(range.start.x - 1, range.start.y - scrollOffset - 1, range.end.x, range.end.y - scrollOffset - 1, undefined);\n    const emitter = showEvent ? this._onShowLinkUnderline : this._onHideLinkUnderline;\n    emitter.fire(event);\n  }\n\n  protected _linkLeave(element: HTMLElement, link: ILink, event: MouseEvent): void {\n    if (this._currentLink?.state) {\n      this._currentLink.state.isHovered = false;\n      if (this._currentLink.state.decorations.underline) {\n        this._fireUnderlineEvent(link, false);\n      }\n      if (this._currentLink.state.decorations.pointerCursor) {\n        element.classList.remove('xterm-cursor-pointer');\n      }\n    }\n\n    if (link.leave) {\n      link.leave(event, link.text);\n    }\n  }\n\n  /**\n   * Check if the buffer position is within the link\n   * @param link\n   * @param position\n   */\n  private _linkAtPosition(link: ILink, position: IBufferCellPosition): boolean {\n    const sameLine = link.range.start.y === link.range.end.y;\n    const wrappedFromLeft = link.range.start.y < position.y;\n    const wrappedToRight = link.range.end.y > position.y;\n\n    // If the start and end have the same y, then the position must be between start and end x\n    // If not, then handle each case seperately, depending on which way it wraps\n    return ((sameLine && link.range.start.x <= position.x && link.range.end.x >= position.x) ||\n      (wrappedFromLeft && link.range.end.x >= position.x) ||\n      (wrappedToRight && link.range.start.x <= position.x) ||\n      (wrappedFromLeft && wrappedToRight)) &&\n      link.range.start.y <= position.y &&\n      link.range.end.y >= position.y;\n  }\n\n  /**\n   * Get the buffer position from a mouse event\n   * @param event\n   */\n  private _positionFromMouseEvent(event: MouseEvent, element: HTMLElement, mouseService: IMouseService): IBufferCellPosition | undefined {\n    const coords = mouseService.getCoords(event, element, this._bufferService.cols, this._bufferService.rows);\n    if (!coords) {\n      return;\n    }\n\n    return { x: coords[0], y: coords[1] + this._bufferService.buffer.ydisp };\n  }\n\n  private _createLinkUnderlineEvent(x1: number, y1: number, x2: number, y2: number, fg: number | undefined): ILinkifierEvent {\n    return { x1, y1, x2, y2, cols: this._bufferService.cols, fg };\n  }\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\n// eslint-disable-next-line prefer-const\nexport let promptLabel = 'Terminal input';\n\n// eslint-disable-next-line prefer-const\nexport let tooMuchOutput = 'Too much output to announce, navigate to rows manually to read';\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { Disposable } from 'common/Lifecycle';\nimport { addDisposableDomListener } from 'browser/Lifecycle';\nimport { IMouseService, ISelectionService } from 'browser/services/Services';\nimport { IMouseZoneManager, IMouseZone } from 'browser/Types';\nimport { IBufferService, IOptionsService } from 'common/services/Services';\n\n/**\n * The MouseZoneManager allows components to register zones within the terminal\n * that trigger hover and click callbacks.\n *\n * This class was intentionally made not so robust initially as the only case it\n * needed to support was single-line links which never overlap. Improvements can\n * be made in the future.\n */\nexport class MouseZoneManager extends Disposable implements IMouseZoneManager {\n  private _zones: IMouseZone[] = [];\n\n  private _areZonesActive: boolean = false;\n  private _mouseMoveListener: (e: MouseEvent) => any;\n  private _mouseLeaveListener: (e: MouseEvent) => any;\n  private _clickListener: (e: MouseEvent) => any;\n\n  private _tooltipTimeout: number | undefined;\n  private _currentZone: IMouseZone | undefined;\n  private _lastHoverCoords: [number | undefined, number | undefined] = [undefined, undefined];\n  private _initialSelectionLength: number = 0;\n\n  constructor(\n    private readonly _element: HTMLElement,\n    private readonly _screenElement: HTMLElement,\n    @IBufferService private readonly _bufferService: IBufferService,\n    @IMouseService private readonly _mouseService: IMouseService,\n    @ISelectionService private readonly _selectionService: ISelectionService,\n    @IOptionsService private readonly _optionsService: IOptionsService\n  ) {\n    super();\n\n    this.register(addDisposableDomListener(this._element, 'mousedown', e => this._onMouseDown(e)));\n\n    // These events are expensive, only listen to it when mouse zones are active\n    this._mouseMoveListener = e => this._onMouseMove(e);\n    this._mouseLeaveListener = e => this._onMouseLeave(e);\n    this._clickListener = e => this._onClick(e);\n  }\n\n  public dispose(): void {\n    super.dispose();\n    this._deactivate();\n  }\n\n  public add(zone: IMouseZone): void {\n    this._zones.push(zone);\n    if (this._zones.length === 1) {\n      this._activate();\n    }\n  }\n\n  public clearAll(start?: number, end?: number): void {\n    // Exit if there's nothing to clear\n    if (this._zones.length === 0) {\n      return;\n    }\n\n    // Clear all if start/end weren't set\n    if (!start || !end) {\n      start = 0;\n      end = this._bufferService.rows - 1;\n    }\n\n    // Iterate through zones and clear them out if they're within the range\n    for (let i = 0; i < this._zones.length; i++) {\n      const zone = this._zones[i];\n      if ((zone.y1 > start && zone.y1 <= end + 1) ||\n          (zone.y2 > start && zone.y2 <= end + 1) ||\n          (zone.y1 < start && zone.y2 > end + 1)) {\n        if (this._currentZone && this._currentZone === zone) {\n          this._currentZone.leaveCallback();\n          this._currentZone = undefined;\n        }\n        this._zones.splice(i--, 1);\n      }\n    }\n\n    // Deactivate the mouse zone manager if all the zones have been removed\n    if (this._zones.length === 0) {\n      this._deactivate();\n    }\n  }\n\n  private _activate(): void {\n    if (!this._areZonesActive) {\n      this._areZonesActive = true;\n      this._element.addEventListener('mousemove', this._mouseMoveListener);\n      this._element.addEventListener('mouseleave', this._mouseLeaveListener);\n      this._element.addEventListener('click', this._clickListener);\n    }\n  }\n\n  private _deactivate(): void {\n    if (this._areZonesActive) {\n      this._areZonesActive = false;\n      this._element.removeEventListener('mousemove', this._mouseMoveListener);\n      this._element.removeEventListener('mouseleave', this._mouseLeaveListener);\n      this._element.removeEventListener('click', this._clickListener);\n    }\n  }\n\n  private _onMouseMove(e: MouseEvent): void {\n    // TODO: Ideally this would only clear the hover state when the mouse moves\n    // outside of the mouse zone\n    if (this._lastHoverCoords[0] !== e.pageX || this._lastHoverCoords[1] !== e.pageY) {\n      this._onHover(e);\n      // Record the current coordinates\n      this._lastHoverCoords = [e.pageX, e.pageY];\n    }\n  }\n\n  private _onHover(e: MouseEvent): void {\n    const zone = this._findZoneEventAt(e);\n\n    // Do nothing if the zone is the same\n    if (zone === this._currentZone) {\n      return;\n    }\n\n    // Fire the hover end callback and cancel any existing timer if a new zone\n    // is being hovered\n    if (this._currentZone) {\n      this._currentZone.leaveCallback();\n      this._currentZone = undefined;\n      if (this._tooltipTimeout) {\n        clearTimeout(this._tooltipTimeout);\n      }\n    }\n\n    // Exit if there is not zone\n    if (!zone) {\n      return;\n    }\n    this._currentZone = zone;\n\n    // Trigger the hover callback\n    if (zone.hoverCallback) {\n      zone.hoverCallback(e);\n    }\n\n    // Restart the tooltip timeout\n    this._tooltipTimeout = window.setTimeout(() => this._onTooltip(e), this._optionsService.rawOptions.linkTooltipHoverDuration);\n  }\n\n  private _onTooltip(e: MouseEvent): void {\n    this._tooltipTimeout = undefined;\n    const zone = this._findZoneEventAt(e);\n    zone?.tooltipCallback(e);\n  }\n\n  private _onMouseDown(e: MouseEvent): void {\n    // Store current terminal selection length, to check if we're performing\n    // a selection operation\n    this._initialSelectionLength = this._getSelectionLength();\n\n    // Ignore the event if there are no zones active\n    if (!this._areZonesActive) {\n      return;\n    }\n\n    // Find the active zone, prevent event propagation if found to prevent other\n    // components from handling the mouse event.\n    const zone = this._findZoneEventAt(e);\n    if (zone?.willLinkActivate(e)) {\n      e.preventDefault();\n      e.stopImmediatePropagation();\n    }\n  }\n\n  private _onMouseLeave(e: MouseEvent): void {\n    // Fire the hover end callback and cancel any existing timer if the mouse\n    // leaves the terminal element\n    if (this._currentZone) {\n      this._currentZone.leaveCallback();\n      this._currentZone = undefined;\n      if (this._tooltipTimeout) {\n        clearTimeout(this._tooltipTimeout);\n      }\n    }\n  }\n\n  private _onClick(e: MouseEvent): void {\n    // Find the active zone and click it if found and no selection was\n    // being performed\n    const zone = this._findZoneEventAt(e);\n    const currentSelectionLength = this._getSelectionLength();\n\n    if (zone && currentSelectionLength === this._initialSelectionLength) {\n      zone.clickCallback(e);\n      e.preventDefault();\n      e.stopImmediatePropagation();\n    }\n  }\n\n  private _getSelectionLength(): number {\n    const selectionText = this._selectionService.selectionText;\n    return selectionText ? selectionText.length : 0;\n  }\n\n  private _findZoneEventAt(e: MouseEvent): IMouseZone | undefined {\n    const coords = this._mouseService.getCoords(e, this._screenElement, this._bufferService.cols, this._bufferService.rows);\n    if (!coords) {\n      return undefined;\n    }\n    const x = coords[0];\n    const y = coords[1];\n    for (let i = 0; i < this._zones.length; i++) {\n      const zone = this._zones[i];\n      if (zone.y1 === zone.y2) {\n        // Single line link\n        if (y === zone.y1 && x >= zone.x1 && x < zone.x2) {\n          return zone;\n        }\n      } else {\n        // Multi-line link\n        if ((y === zone.y1 && x >= zone.x1) ||\n            (y === zone.y2 && x < zone.x2) ||\n            (y > zone.y1 && y < zone.y2)) {\n          return zone;\n        }\n      }\n    }\n    return undefined;\n  }\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IRenderDebouncer } from 'browser/Types';\n\n/**\n * Debounces calls to render terminal rows using animation frames.\n */\nexport class RenderDebouncer implements IRenderDebouncer {\n  private _rowStart: number | undefined;\n  private _rowEnd: number | undefined;\n  private _rowCount: number | undefined;\n  private _animationFrame: number | undefined;\n\n  constructor(\n    private _renderCallback: (start: number, end: number) => void\n  ) {\n  }\n\n  public dispose(): void {\n    if (this._animationFrame) {\n      window.cancelAnimationFrame(this._animationFrame);\n      this._animationFrame = undefined;\n    }\n  }\n\n  public refresh(rowStart: number | undefined, rowEnd: number | undefined, rowCount: number): void {\n    this._rowCount = rowCount;\n    // Get the min/max row start/end for the arg values\n    rowStart = rowStart !== undefined ? rowStart : 0;\n    rowEnd = rowEnd !== undefined ? rowEnd : this._rowCount - 1;\n    // Set the properties to the updated values\n    this._rowStart = this._rowStart !== undefined ? Math.min(this._rowStart, rowStart) : rowStart;\n    this._rowEnd = this._rowEnd !== undefined ? Math.max(this._rowEnd, rowEnd) : rowEnd;\n\n    if (this._animationFrame) {\n      return;\n    }\n\n    this._animationFrame = window.requestAnimationFrame(() => this._innerRefresh());\n  }\n\n  private _innerRefresh(): void {\n    // Make sure values are set\n    if (this._rowStart === undefined || this._rowEnd === undefined || this._rowCount === undefined) {\n      return;\n    }\n\n    // Clamp values\n    const start = Math.max(this._rowStart, 0);\n    const end = Math.min(this._rowEnd, this._rowCount - 1);\n\n    // Reset debouncer (this happens before render callback as the render could trigger it again)\n    this._rowStart = undefined;\n    this._rowEnd = undefined;\n    this._animationFrame = undefined;\n\n    // Run render callback\n    this._renderCallback(start, end);\n  }\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { Disposable } from 'common/Lifecycle';\n\nexport type ScreenDprListener = (newDevicePixelRatio?: number, oldDevicePixelRatio?: number) => void;\n\n/**\n * The screen device pixel ratio monitor allows listening for when the\n * window.devicePixelRatio value changes. This is done not with polling but with\n * the use of window.matchMedia to watch media queries. When the event fires,\n * the listener will be reattached using a different media query to ensure that\n * any further changes will register.\n *\n * The listener should fire on both window zoom changes and switching to a\n * monitor with a different DPI.\n */\nexport class ScreenDprMonitor extends Disposable {\n  private _currentDevicePixelRatio: number = window.devicePixelRatio;\n  private _outerListener: ((this: MediaQueryList, ev: MediaQueryListEvent) => any) | undefined;\n  private _listener: ScreenDprListener | undefined;\n  private _resolutionMediaMatchList: MediaQueryList | undefined;\n\n  public setListener(listener: ScreenDprListener): void {\n    if (this._listener) {\n      this.clearListener();\n    }\n    this._listener = listener;\n    this._outerListener = () => {\n      if (!this._listener) {\n        return;\n      }\n      this._listener(window.devicePixelRatio, this._currentDevicePixelRatio);\n      this._updateDpr();\n    };\n    this._updateDpr();\n  }\n\n  public dispose(): void {\n    super.dispose();\n    this.clearListener();\n  }\n\n  private _updateDpr(): void {\n    if (!this._outerListener) {\n      return;\n    }\n\n    // Clear listeners for old DPR\n    this._resolutionMediaMatchList?.removeListener(this._outerListener);\n\n    // Add listeners for new DPR\n    this._currentDevicePixelRatio = window.devicePixelRatio;\n    this._resolutionMediaMatchList = window.matchMedia(`screen and (resolution: ${window.devicePixelRatio}dppx)`);\n    this._resolutionMediaMatchList.addListener(this._outerListener);\n  }\n\n  public clearListener(): void {\n    if (!this._resolutionMediaMatchList || !this._listener || !this._outerListener) {\n      return;\n    }\n    this._resolutionMediaMatchList.removeListener(this._outerListener);\n    this._resolutionMediaMatchList = undefined;\n    this._listener = undefined;\n    this._outerListener = undefined;\n  }\n}\n", "/**\n * Copyright (c) 2014 The xterm.js authors. All rights reserved.\n * Copyright (c) 2012-2013, Christopher Jeffrey (MIT License)\n * @license MIT\n *\n * Originally forked from (with the author's permission):\n *   Fabrice Bellard's javascript vt100 for jslinux:\n *   http://bellard.org/jslinux/\n *   Copyright (c) 2011 Fabrice Bellard\n *   The original design remains. The terminal itself\n *   has been extended to include xterm CSI codes, among\n *   other features.\n *\n * Terminal Emulation References:\n *   http://vt100.net/\n *   http://invisible-island.net/xterm/ctlseqs/ctlseqs.txt\n *   http://invisible-island.net/xterm/ctlseqs/ctlseqs.html\n *   http://invisible-island.net/vttest/\n *   http://www.inwap.com/pdp10/ansicode.txt\n *   http://linux.die.net/man/4/console_codes\n *   http://linux.die.net/man/7/urxvt\n */\n\nimport { ICompositionHelper, ITerminal, IBrowser, CustomKeyEventHandler, ILinkifier, IMouseZoneManager, LinkMatcherHandler, ILinkMatcherOptions, IViewport, ILinkifier2, CharacterJoinerHandler } from 'browser/Types';\nimport { IRenderer } from 'browser/renderer/Types';\nimport { CompositionHelper } from 'browser/input/CompositionHelper';\nimport { Viewport } from 'browser/Viewport';\nimport { rightClickHandler, moveTextAreaUnderMouseCursor, handlePasteEvent, copyHandler, paste } from 'browser/Clipboard';\nimport { C0 } from 'common/data/EscapeSequences';\nimport { WindowsOptionsReportType } from '../common/InputHandler';\nimport { Renderer } from 'browser/renderer/Renderer';\nimport { Linkifier } from 'browser/Linkifier';\nimport { SelectionService } from 'browser/services/SelectionService';\nimport * as Browser from 'common/Platform';\nimport { addDisposableDomListener } from 'browser/Lifecycle';\nimport * as Strings from 'browser/LocalizableStrings';\nimport { SoundService } from 'browser/services/SoundService';\nimport { MouseZoneManager } from 'browser/MouseZoneManager';\nimport { AccessibilityManager } from './AccessibilityManager';\nimport { ITheme, IMarker, IDisposable, ISelectionPosition, ILinkProvider } from 'xterm';\nimport { DomRenderer } from 'browser/renderer/dom/DomRenderer';\nimport { KeyboardResultType, CoreMouseEventType, CoreMouseButton, CoreMouseAction, ITerminalOptions, ScrollSource, IColorEvent, ColorIndex, ColorRequestType } from 'common/Types';\nimport { evaluateKeyboardEvent } from 'common/input/Keyboard';\nimport { EventEmitter, IEvent, forwardEvent } from 'common/EventEmitter';\nimport { DEFAULT_ATTR_DATA } from 'common/buffer/BufferLine';\nimport { ColorManager } from 'browser/ColorManager';\nimport { RenderService } from 'browser/services/RenderService';\nimport { ICharSizeService, IRenderService, IMouseService, ISelectionService, ISoundService, ICoreBrowserService, ICharacterJoinerService } from 'browser/services/Services';\nimport { CharSizeService } from 'browser/services/CharSizeService';\nimport { IBuffer } from 'common/buffer/Types';\nimport { MouseService } from 'browser/services/MouseService';\nimport { Linkifier2 } from 'browser/Linkifier2';\nimport { CoreBrowserService } from 'browser/services/CoreBrowserService';\nimport { CoreTerminal } from 'common/CoreTerminal';\nimport { color, rgba } from 'browser/Color';\nimport { CharacterJoinerService } from 'browser/services/CharacterJoinerService';\nimport { toRgbString } from 'common/input/XParseColor';\n\n// Let it work inside Node.js for automated testing purposes.\nconst document: Document = (typeof window !== 'undefined') ? window.document : null as any;\n\nexport class Terminal extends CoreTerminal implements ITerminal {\n  public textarea: HTMLTextAreaElement | undefined;\n  public element: HTMLElement | undefined;\n  public screenElement: HTMLElement | undefined;\n\n  private _document: Document | undefined;\n  private _viewportScrollArea: HTMLElement | undefined;\n  private _viewportElement: HTMLElement | undefined;\n  private _helperContainer: HTMLElement | undefined;\n  private _compositionView: HTMLElement | undefined;\n\n  // private _visualBellTimer: number;\n\n  public browser: IBrowser = Browser as any;\n\n  private _customKeyEventHandler: CustomKeyEventHandler | undefined;\n\n  // browser services\n  private _charSizeService: ICharSizeService | undefined;\n  private _mouseService: IMouseService | undefined;\n  private _renderService: IRenderService | undefined;\n  private _characterJoinerService: ICharacterJoinerService | undefined;\n  private _selectionService: ISelectionService | undefined;\n  private _soundService: ISoundService | undefined;\n\n  /**\n   * Records whether the keydown event has already been handled and triggered a data event, if so\n   * the keypress event should not trigger a data event but should still print to the textarea so\n   * screen readers will announce it.\n   */\n  private _keyDownHandled: boolean = false;\n\n  /**\n   * Records whether the keypress event has already been handled and triggered a data event, if so\n   * the input event should not trigger a data event but should still print to the textarea so\n   * screen readers will announce it.\n   */\n  private _keyPressHandled: boolean = false;\n\n  /**\n   * Records whether there has been a keydown event for a dead key without a corresponding keydown\n   * event for the composed/alternative character. If we cancel the keydown event for the dead key,\n   * no events will be emitted for the final character.\n   */\n  private _unprocessedDeadKey: boolean = false;\n\n  public linkifier: ILinkifier;\n  public linkifier2: ILinkifier2;\n  public viewport: IViewport | undefined;\n  private _compositionHelper: ICompositionHelper | undefined;\n  private _mouseZoneManager: IMouseZoneManager | undefined;\n  private _accessibilityManager: AccessibilityManager | undefined;\n  private _colorManager: ColorManager | undefined;\n  private _theme: ITheme | undefined;\n\n  private _onCursorMove = new EventEmitter<void>();\n  public get onCursorMove(): IEvent<void> { return this._onCursorMove.event; }\n  private _onKey = new EventEmitter<{ key: string, domEvent: KeyboardEvent }>();\n  public get onKey(): IEvent<{ key: string, domEvent: KeyboardEvent }> { return this._onKey.event; }\n  private _onRender = new EventEmitter<{ start: number, end: number }>();\n  public get onRender(): IEvent<{ start: number, end: number }> { return this._onRender.event; }\n  private _onSelectionChange = new EventEmitter<void>();\n  public get onSelectionChange(): IEvent<void> { return this._onSelectionChange.event; }\n  private _onTitleChange = new EventEmitter<string>();\n  public get onTitleChange(): IEvent<string> { return this._onTitleChange.event; }\n  private _onBell = new EventEmitter<void>();\n  public get onBell(): IEvent<void> { return this._onBell.event; }\n\n  private _onFocus = new EventEmitter<void>();\n  public get onFocus(): IEvent<void> { return this._onFocus.event; }\n  private _onBlur = new EventEmitter<void>();\n  public get onBlur(): IEvent<void> { return this._onBlur.event; }\n  private _onA11yCharEmitter = new EventEmitter<string>();\n  public get onA11yChar(): IEvent<string> { return this._onA11yCharEmitter.event; }\n  private _onA11yTabEmitter = new EventEmitter<number>();\n  public get onA11yTab(): IEvent<number> { return this._onA11yTabEmitter.event; }\n\n  /**\n   * Creates a new `Terminal` object.\n   *\n   * @param options An object containing a set of options, the available options are:\n   *   - `cursorBlink` (boolean): Whether the terminal cursor blinks\n   *   - `cols` (number): The number of columns of the terminal (horizontal size)\n   *   - `rows` (number): The number of rows of the terminal (vertical size)\n   *\n   * @public\n   * @class Xterm Xterm\n   * @alias module:xterm/src/xterm\n   */\n  constructor(\n    options: Partial<ITerminalOptions> = {}\n  ) {\n    super(options);\n\n    this._setup();\n\n    this.linkifier = this._instantiationService.createInstance(Linkifier);\n    this.linkifier2 = this.register(this._instantiationService.createInstance(Linkifier2));\n\n    // Setup InputHandler listeners\n    this.register(this._inputHandler.onRequestBell(() => this.bell()));\n    this.register(this._inputHandler.onRequestRefreshRows((start, end) => this.refresh(start, end)));\n    this.register(this._inputHandler.onRequestSendFocus(() => this._reportFocus()));\n    this.register(this._inputHandler.onRequestReset(() => this.reset()));\n    this.register(this._inputHandler.onRequestWindowsOptionsReport(type => this._reportWindowsOptions(type)));\n    this.register(this._inputHandler.onColor((event) => this._handleColorEvent(event)));\n    this.register(forwardEvent(this._inputHandler.onCursorMove, this._onCursorMove));\n    this.register(forwardEvent(this._inputHandler.onTitleChange, this._onTitleChange));\n    this.register(forwardEvent(this._inputHandler.onA11yChar, this._onA11yCharEmitter));\n    this.register(forwardEvent(this._inputHandler.onA11yTab, this._onA11yTabEmitter));\n\n    // Setup listeners\n    this.register(this._bufferService.onResize(e => this._afterResize(e.cols, e.rows)));\n  }\n\n  /**\n   * Handle color event from inputhandler for OSC 4|104 | 10|110 | 11|111 | 12|112.\n   * An event from OSC 4|104 may contain multiple set or report requests, and multiple\n   * or none restore requests (resetting all),\n   * while an event from OSC 10|110 | 11|111 | 12|112 always contains a single request.\n   */\n  private _handleColorEvent(event: IColorEvent): void {\n    if (!this._colorManager) return;\n    for (const req of event) {\n      let acc: 'foreground' | 'background' | 'cursor' | 'ansi' | undefined = undefined;\n      let ident = '';\n      switch (req.index) {\n        case ColorIndex.FOREGROUND: // OSC 10 | 110\n          acc = 'foreground';\n          ident = '10';\n          break;\n        case ColorIndex.BACKGROUND: // OSC 11 | 111\n          acc = 'background';\n          ident = '11';\n          break;\n        case ColorIndex.CURSOR: // OSC 12 | 112\n          acc = 'cursor';\n          ident = '12';\n          break;\n        default: // OSC 4 | 104\n          // we can skip the [0..255] range check here (already done in inputhandler)\n          acc = 'ansi';\n          ident = '4;' + req.index;\n      }\n      if (acc) {\n        switch (req.type) {\n          case ColorRequestType.REPORT:\n            const channels = color.toColorRGB(acc === 'ansi'\n              ? this._colorManager.colors.ansi[req.index]\n              : this._colorManager.colors[acc]);\n            this.coreService.triggerDataEvent(`${C0.ESC}]${ident};${toRgbString(channels)}${C0.BEL}`);\n            break;\n          case ColorRequestType.SET:\n            if (acc === 'ansi') this._colorManager.colors.ansi[req.index] = rgba.toColor(...req.color);\n            else this._colorManager.colors[acc] = rgba.toColor(...req.color);\n            break;\n          case ColorRequestType.RESTORE:\n            this._colorManager.restoreColor(req.index);\n            break;\n        }\n      }\n    }\n    this._renderService?.setColors(this._colorManager.colors);\n    this.viewport?.onThemeChange(this._colorManager.colors);\n  }\n\n  public dispose(): void {\n    if (this._isDisposed) {\n      return;\n    }\n    super.dispose();\n    this._renderService?.dispose();\n    this._customKeyEventHandler = undefined;\n    this.write = () => { };\n    this.element?.parentNode?.removeChild(this.element);\n  }\n\n  protected _setup(): void {\n    super._setup();\n\n    this._customKeyEventHandler = undefined;\n  }\n\n  /**\n   * Convenience property to active buffer.\n   */\n  public get buffer(): IBuffer {\n    return this.buffers.active;\n  }\n\n  /**\n   * Focus the terminal. Delegates focus handling to the terminal's DOM element.\n   */\n  public focus(): void {\n    if (this.textarea) {\n      this.textarea.focus({ preventScroll: true });\n    }\n  }\n\n  protected _updateOptions(key: string): void {\n    super._updateOptions(key);\n\n    // TODO: These listeners should be owned by individual components\n    switch (key) {\n      case 'fontFamily':\n      case 'fontSize':\n        // When the font changes the size of the cells may change which requires a renderer clear\n        this._renderService?.clear();\n        this._charSizeService?.measure();\n        break;\n      case 'cursorBlink':\n      case 'cursorStyle':\n        // The DOM renderer needs a row refresh to update the cursor styles\n        this.refresh(this.buffer.y, this.buffer.y);\n        break;\n      case 'customGlyphs':\n      case 'drawBoldTextInBrightColors':\n      case 'letterSpacing':\n      case 'lineHeight':\n      case 'fontWeight':\n      case 'fontWeightBold':\n      case 'minimumContrastRatio':\n        // When the font changes the size of the cells may change which requires a renderer clear\n        if (this._renderService) {\n          this._renderService.clear();\n          this._renderService.onResize(this.cols, this.rows);\n          this.refresh(0, this.rows - 1);\n        }\n        break;\n      case 'rendererType':\n        if (this._renderService) {\n          this._renderService.setRenderer(this._createRenderer());\n          this._renderService.onResize(this.cols, this.rows);\n        }\n        break;\n      case 'scrollback':\n        this.viewport?.syncScrollArea();\n        break;\n      case 'screenReaderMode':\n        if (this.optionsService.rawOptions.screenReaderMode) {\n          if (!this._accessibilityManager && this._renderService) {\n            this._accessibilityManager = new AccessibilityManager(this, this._renderService);\n          }\n        } else {\n          this._accessibilityManager?.dispose();\n          this._accessibilityManager = undefined;\n        }\n        break;\n      case 'tabStopWidth': this.buffers.setupTabStops(); break;\n      case 'theme':\n        this._setTheme(this.optionsService.rawOptions.theme);\n        break;\n    }\n  }\n\n  /**\n   * Binds the desired focus behavior on a given terminal object.\n   */\n  private _onTextAreaFocus(ev: KeyboardEvent): void {\n    if (this.coreService.decPrivateModes.sendFocus) {\n      this.coreService.triggerDataEvent(C0.ESC + '[I');\n    }\n    this.updateCursorStyle(ev);\n    this.element!.classList.add('focus');\n    this._showCursor();\n    this._onFocus.fire();\n  }\n\n  /**\n   * Blur the terminal, calling the blur function on the terminal's underlying\n   * textarea.\n   */\n  public blur(): void {\n    return this.textarea?.blur();\n  }\n\n  /**\n   * Binds the desired blur behavior on a given terminal object.\n   */\n  private _onTextAreaBlur(): void {\n    // Text can safely be removed on blur. Doing it earlier could interfere with\n    // screen readers reading it out.\n    this.textarea!.value = '';\n    this.refresh(this.buffer.y, this.buffer.y);\n    if (this.coreService.decPrivateModes.sendFocus) {\n      this.coreService.triggerDataEvent(C0.ESC + '[O');\n    }\n    this.element!.classList.remove('focus');\n    this._onBlur.fire();\n  }\n\n  private _syncTextArea(): void {\n    if (!this.textarea || !this.buffer.isCursorInViewport || this._compositionHelper!.isComposing || !this._renderService) {\n      return;\n    }\n    const cursorY = this.buffer.ybase + this.buffer.y;\n    const bufferLine = this.buffer.lines.get(cursorY);\n    if (!bufferLine) {\n      return;\n    }\n    const cursorX = Math.min(this.buffer.x, this.cols - 1);\n    const cellHeight = this._renderService.dimensions.actualCellHeight;\n    const width = bufferLine.getWidth(cursorX);\n    const cellWidth = this._renderService.dimensions.actualCellWidth * width;\n    const cursorTop = this.buffer.y * this._renderService.dimensions.actualCellHeight;\n    const cursorLeft = cursorX * this._renderService.dimensions.actualCellWidth;\n\n    // Sync the textarea to the exact position of the composition view so the IME knows where the\n    // text is.\n    this.textarea.style.left = cursorLeft + 'px';\n    this.textarea.style.top = cursorTop + 'px';\n    this.textarea.style.width = cellWidth + 'px';\n    this.textarea.style.height = cellHeight + 'px';\n    this.textarea.style.lineHeight = cellHeight + 'px';\n    this.textarea.style.zIndex = '-5';\n  }\n\n  /**\n   * Initialize default behavior\n   */\n  private _initGlobal(): void {\n    this._bindKeys();\n\n    // Bind clipboard functionality\n    this.register(addDisposableDomListener(this.element!, 'copy', (event: ClipboardEvent) => {\n      // If mouse events are active it means the selection manager is disabled and\n      // copy should be handled by the host program.\n      if (!this.hasSelection()) {\n        return;\n      }\n      copyHandler(event, this._selectionService!);\n    }));\n    const pasteHandlerWrapper = (event: ClipboardEvent): void => handlePasteEvent(event, this.textarea!, this.coreService);\n    this.register(addDisposableDomListener(this.textarea!, 'paste', pasteHandlerWrapper));\n    this.register(addDisposableDomListener(this.element!, 'paste', pasteHandlerWrapper));\n\n    // Handle right click context menus\n    if (Browser.isFirefox) {\n      // Firefox doesn't appear to fire the contextmenu event on right click\n      this.register(addDisposableDomListener(this.element!, 'mousedown', (event: MouseEvent) => {\n        if (event.button === 2) {\n          rightClickHandler(event, this.textarea!, this.screenElement!, this._selectionService!, this.options.rightClickSelectsWord);\n        }\n      }));\n    } else {\n      this.register(addDisposableDomListener(this.element!, 'contextmenu', (event: MouseEvent) => {\n        rightClickHandler(event, this.textarea!, this.screenElement!, this._selectionService!, this.options.rightClickSelectsWord);\n      }));\n    }\n\n    // Move the textarea under the cursor when middle clicking on Linux to ensure\n    // middle click to paste selection works. This only appears to work in Chrome\n    // at the time is writing.\n    if (Browser.isLinux) {\n      // Use auxclick event over mousedown the latter doesn't seem to work. Note\n      // that the regular click event doesn't fire for the middle mouse button.\n      this.register(addDisposableDomListener(this.element!, 'auxclick', (event: MouseEvent) => {\n        if (event.button === 1) {\n          moveTextAreaUnderMouseCursor(event, this.textarea!, this.screenElement!);\n        }\n      }));\n    }\n  }\n\n  /**\n   * Apply key handling to the terminal\n   */\n  private _bindKeys(): void {\n    this.register(addDisposableDomListener(this.textarea!, 'keyup', (ev: KeyboardEvent) => this._keyUp(ev), true));\n    this.register(addDisposableDomListener(this.textarea!, 'keydown', (ev: KeyboardEvent) => this._keyDown(ev), true));\n    this.register(addDisposableDomListener(this.textarea!, 'keypress', (ev: KeyboardEvent) => this._keyPress(ev), true));\n    this.register(addDisposableDomListener(this.textarea!, 'compositionstart', () => this._compositionHelper!.compositionstart()));\n    this.register(addDisposableDomListener(this.textarea!, 'compositionupdate', (e: CompositionEvent) => this._compositionHelper!.compositionupdate(e)));\n    this.register(addDisposableDomListener(this.textarea!, 'compositionend', () => this._compositionHelper!.compositionend()));\n    this.register(addDisposableDomListener(this.textarea!, 'input', (ev: InputEvent) => this._inputEvent(ev), true));\n    this.register(this.onRender(() => this._compositionHelper!.updateCompositionElements()));\n    this.register(this.onRender(e => this._queueLinkification(e.start, e.end)));\n  }\n\n  /**\n   * Opens the terminal within an element.\n   *\n   * @param parent The element to create the terminal within.\n   */\n  public open(parent: HTMLElement): void {\n    if (!parent) {\n      throw new Error('Terminal requires a parent element.');\n    }\n\n    if (!parent.isConnected) {\n      this._logService.debug('Terminal.open was called on an element that was not attached to the DOM');\n    }\n\n    this._document = parent.ownerDocument!;\n\n    // Create main element container\n    this.element = this._document.createElement('div');\n    this.element.dir = 'ltr';   // xterm.css assumes LTR\n    this.element.classList.add('terminal');\n    this.element.classList.add('xterm');\n    this.element.setAttribute('tabindex', '0');\n    parent.appendChild(this.element);\n\n    // Performance: Use a document fragment to build the terminal\n    // viewport and helper elements detached from the DOM\n    const fragment = document.createDocumentFragment();\n    this._viewportElement = document.createElement('div');\n    this._viewportElement.classList.add('xterm-viewport');\n    fragment.appendChild(this._viewportElement);\n    this._viewportScrollArea = document.createElement('div');\n    this._viewportScrollArea.classList.add('xterm-scroll-area');\n    this._viewportElement.appendChild(this._viewportScrollArea);\n\n    this.screenElement = document.createElement('div');\n    this.screenElement.classList.add('xterm-screen');\n    // Create the container that will hold helpers like the textarea for\n    // capturing DOM Events. Then produce the helpers.\n    this._helperContainer = document.createElement('div');\n    this._helperContainer.classList.add('xterm-helpers');\n    this.screenElement.appendChild(this._helperContainer);\n    fragment.appendChild(this.screenElement);\n\n    this.textarea = document.createElement('textarea');\n    this.textarea.classList.add('xterm-helper-textarea');\n    this.textarea.setAttribute('aria-label', Strings.promptLabel);\n    this.textarea.setAttribute('aria-multiline', 'false');\n    this.textarea.setAttribute('autocorrect', 'off');\n    this.textarea.setAttribute('autocapitalize', 'off');\n    this.textarea.setAttribute('spellcheck', 'false');\n    this.textarea.tabIndex = 0;\n    this.register(addDisposableDomListener(this.textarea, 'focus', (ev: KeyboardEvent) => this._onTextAreaFocus(ev)));\n    this.register(addDisposableDomListener(this.textarea, 'blur', () => this._onTextAreaBlur()));\n    this._helperContainer.appendChild(this.textarea);\n\n    const coreBrowserService = this._instantiationService.createInstance(CoreBrowserService, this.textarea);\n    this._instantiationService.setService(ICoreBrowserService, coreBrowserService);\n\n    this._charSizeService = this._instantiationService.createInstance(CharSizeService, this._document, this._helperContainer);\n    this._instantiationService.setService(ICharSizeService, this._charSizeService);\n\n    this._theme = this.options.theme || this._theme;\n    this._colorManager = new ColorManager(document, this.options.allowTransparency);\n    this.register(this.optionsService.onOptionChange(e => this._colorManager!.onOptionsChange(e)));\n    this._colorManager.setTheme(this._theme);\n\n    this._characterJoinerService = this._instantiationService.createInstance(CharacterJoinerService);\n    this._instantiationService.setService(ICharacterJoinerService, this._characterJoinerService);\n\n    const renderer = this._createRenderer();\n    this._renderService = this.register(this._instantiationService.createInstance(RenderService, renderer, this.rows, this.screenElement));\n    this._instantiationService.setService(IRenderService, this._renderService);\n    this.register(this._renderService.onRenderedBufferChange(e => this._onRender.fire(e)));\n    this.onResize(e => this._renderService!.resize(e.cols, e.rows));\n\n    this._compositionView = document.createElement('div');\n    this._compositionView.classList.add('composition-view');\n    this._compositionHelper = this._instantiationService.createInstance(CompositionHelper, this.textarea, this._compositionView);\n    this._helperContainer.appendChild(this._compositionView);\n\n    // Performance: Add viewport and helper elements from the fragment\n    this.element.appendChild(fragment);\n\n    this._soundService = this._instantiationService.createInstance(SoundService);\n    this._instantiationService.setService(ISoundService, this._soundService);\n    this._mouseService = this._instantiationService.createInstance(MouseService);\n    this._instantiationService.setService(IMouseService, this._mouseService);\n\n    this.viewport = this._instantiationService.createInstance(Viewport,\n      (amount: number) => this.scrollLines(amount, true, ScrollSource.VIEWPORT),\n      this._viewportElement,\n      this._viewportScrollArea,\n      this.element\n    );\n    this.viewport.onThemeChange(this._colorManager.colors);\n    this.register(this._inputHandler.onRequestSyncScrollBar(() => this.viewport!.syncScrollArea()));\n    this.register(this.viewport);\n\n    this.register(this.onCursorMove(() => {\n      this._renderService!.onCursorMove();\n      this._syncTextArea();\n    }));\n    this.register(this.onResize(() => this._renderService!.onResize(this.cols, this.rows)));\n    this.register(this.onBlur(() => this._renderService!.onBlur()));\n    this.register(this.onFocus(() => this._renderService!.onFocus()));\n    this.register(this._renderService.onDimensionsChange(() => this.viewport!.syncScrollArea()));\n\n    this._selectionService = this.register(this._instantiationService.createInstance(SelectionService,\n      this.element,\n      this.screenElement,\n      this.linkifier2\n    ));\n    this._instantiationService.setService(ISelectionService, this._selectionService);\n    this.register(this._selectionService.onRequestScrollLines(e => this.scrollLines(e.amount, e.suppressScrollEvent)));\n    this.register(this._selectionService.onSelectionChange(() => this._onSelectionChange.fire()));\n    this.register(this._selectionService.onRequestRedraw(e => this._renderService!.onSelectionChanged(e.start, e.end, e.columnSelectMode)));\n    this.register(this._selectionService.onLinuxMouseSelection(text => {\n      // If there's a new selection, put it into the textarea, focus and select it\n      // in order to register it as a selection on the OS. This event is fired\n      // only on Linux to enable middle click to paste selection.\n      this.textarea!.value = text;\n      this.textarea!.focus();\n      this.textarea!.select();\n    }));\n    this.register(this._onScroll.event(ev => {\n      this.viewport!.syncScrollArea();\n      this._selectionService!.refresh();\n    }));\n    this.register(addDisposableDomListener(this._viewportElement, 'scroll', () => this._selectionService!.refresh()));\n\n    this._mouseZoneManager = this._instantiationService.createInstance(MouseZoneManager, this.element, this.screenElement);\n    this.register(this._mouseZoneManager);\n    this.register(this.onScroll(() => this._mouseZoneManager!.clearAll()));\n    this.linkifier.attachToDom(this.element, this._mouseZoneManager);\n    this.linkifier2.attachToDom(this.screenElement, this._mouseService, this._renderService);\n\n    // This event listener must be registered aftre MouseZoneManager is created\n    this.register(addDisposableDomListener(this.element, 'mousedown', (e: MouseEvent) => this._selectionService!.onMouseDown(e)));\n\n    // apply mouse event classes set by escape codes before terminal was attached\n    if (this.coreMouseService.areMouseEventsActive) {\n      this._selectionService.disable();\n      this.element.classList.add('enable-mouse-events');\n    } else {\n      this._selectionService.enable();\n    }\n\n    if (this.options.screenReaderMode) {\n      // Note that this must be done *after* the renderer is created in order to\n      // ensure the correct order of the dprchange event\n      this._accessibilityManager = new AccessibilityManager(this, this._renderService);\n    }\n\n    // Measure the character size\n    this._charSizeService.measure();\n\n    // Setup loop that draws to screen\n    this.refresh(0, this.rows - 1);\n\n    // Initialize global actions that need to be taken on the document.\n    this._initGlobal();\n\n    // Listen for mouse events and translate\n    // them into terminal mouse protocols.\n    this.bindMouse();\n  }\n\n  private _createRenderer(): IRenderer {\n    switch (this.options.rendererType) {\n      case 'canvas': return this._instantiationService.createInstance(Renderer, this._colorManager!.colors, this.screenElement!, this.linkifier, this.linkifier2);\n      case 'dom': return this._instantiationService.createInstance(DomRenderer, this._colorManager!.colors, this.element!, this.screenElement!, this._viewportElement!, this.linkifier, this.linkifier2);\n      default: throw new Error(`Unrecognized rendererType \"${this.options.rendererType}\"`);\n    }\n  }\n\n  /**\n   * Sets the theme on the renderer. The renderer must have been initialized.\n   * @param theme The theme to set.\n   */\n  private _setTheme(theme: ITheme): void {\n    this._theme = theme;\n    this._colorManager?.setTheme(theme);\n    this._renderService?.setColors(this._colorManager!.colors);\n    this.viewport?.onThemeChange(this._colorManager!.colors);\n  }\n\n  /**\n   * Bind certain mouse events to the terminal.\n   * By default only 3 button + wheel up/down is ativated. For higher buttons\n   * no mouse report will be created. Typically the standard actions will be active.\n   *\n   * There are several reasons not to enable support for higher buttons/wheel:\n   * - Button 4 and 5 are typically used for history back and forward navigation,\n   *   there is no straight forward way to supress/intercept those standard actions.\n   * - Support for higher buttons does not work in some platform/browser combinations.\n   * - Left/right wheel was not tested.\n   * - Emulators vary in mouse button support, typically only 3 buttons and\n   *   wheel up/down work reliable.\n   *\n   * TODO: Move mouse event code into its own file.\n   */\n  public bindMouse(): void {\n    const self = this;\n    const el = this.element!;\n\n    // send event to CoreMouseService\n    function sendEvent(ev: MouseEvent | WheelEvent): boolean {\n      // get mouse coordinates\n      const pos = self._mouseService!.getRawByteCoords(ev, self.screenElement!, self.cols, self.rows);\n      if (!pos) {\n        return false;\n      }\n\n      let but: CoreMouseButton;\n      let action: CoreMouseAction | undefined;\n      switch ((ev as any).overrideType || ev.type) {\n        case 'mousemove':\n          action = CoreMouseAction.MOVE;\n          if (ev.buttons === undefined) {\n            // buttons is not supported on macOS, try to get a value from button instead\n            but = CoreMouseButton.NONE;\n            if (ev.button !== undefined) {\n              but = ev.button < 3 ? ev.button : CoreMouseButton.NONE;\n            }\n          } else {\n            // according to MDN buttons only reports up to button 5 (AUX2)\n            but = ev.buttons & 1 ? CoreMouseButton.LEFT :\n              ev.buttons & 4 ? CoreMouseButton.MIDDLE :\n                ev.buttons & 2 ? CoreMouseButton.RIGHT :\n                  CoreMouseButton.NONE; // fallback to NONE\n          }\n          break;\n        case 'mouseup':\n          action = CoreMouseAction.UP;\n          but = ev.button < 3 ? ev.button : CoreMouseButton.NONE;\n          break;\n        case 'mousedown':\n          action = CoreMouseAction.DOWN;\n          but = ev.button < 3 ? ev.button : CoreMouseButton.NONE;\n          break;\n        case 'wheel':\n          // only UP/DOWN wheel events are respected\n          if ((ev as WheelEvent).deltaY !== 0) {\n            action = (ev as WheelEvent).deltaY < 0 ? CoreMouseAction.UP : CoreMouseAction.DOWN;\n          }\n          but = CoreMouseButton.WHEEL;\n          break;\n        default:\n          // dont handle other event types by accident\n          return false;\n      }\n\n      // exit if we cannot determine valid button/action values\n      // do nothing for higher buttons than wheel\n      if (action === undefined || but === undefined || but > CoreMouseButton.WHEEL) {\n        return false;\n      }\n\n      return self.coreMouseService.triggerMouseEvent({\n        col: pos.x - 33, // FIXME: why -33 here?\n        row: pos.y - 33,\n        button: but,\n        action,\n        ctrl: ev.ctrlKey,\n        alt: ev.altKey,\n        shift: ev.shiftKey\n      });\n    }\n\n    /**\n     * Event listener state handling.\n     * We listen to the onProtocolChange event of CoreMouseService and put\n     * requested listeners in `requestedEvents`. With this the listeners\n     * have all bits to do the event listener juggling.\n     * Note: 'mousedown' currently is \"always on\" and not managed\n     * by onProtocolChange.\n     */\n    const requestedEvents: { [key: string]: ((ev: Event) => void) | null } = {\n      mouseup: null,\n      wheel: null,\n      mousedrag: null,\n      mousemove: null\n    };\n    const eventListeners: { [key: string]: (ev: any) => void | boolean } = {\n      mouseup: (ev: MouseEvent) => {\n        sendEvent(ev);\n        if (!ev.buttons) {\n          // if no other button is held remove global handlers\n          this._document!.removeEventListener('mouseup', requestedEvents.mouseup!);\n          if (requestedEvents.mousedrag) {\n            this._document!.removeEventListener('mousemove', requestedEvents.mousedrag);\n          }\n        }\n        return this.cancel(ev);\n      },\n      wheel: (ev: WheelEvent) => {\n        sendEvent(ev);\n        return this.cancel(ev, true);\n      },\n      mousedrag: (ev: MouseEvent) => {\n        // deal only with move while a button is held\n        if (ev.buttons) {\n          sendEvent(ev);\n        }\n      },\n      mousemove: (ev: MouseEvent) => {\n        // deal only with move without any button\n        if (!ev.buttons) {\n          sendEvent(ev);\n        }\n      }\n    };\n    this.register(this.coreMouseService.onProtocolChange(events => {\n      // apply global changes on events\n      if (events) {\n        if (this.optionsService.rawOptions.logLevel === 'debug') {\n          this._logService.debug('Binding to mouse events:', this.coreMouseService.explainEvents(events));\n        }\n        this.element!.classList.add('enable-mouse-events');\n        this._selectionService!.disable();\n      } else {\n        this._logService.debug('Unbinding from mouse events.');\n        this.element!.classList.remove('enable-mouse-events');\n        this._selectionService!.enable();\n      }\n\n      // add/remove handlers from requestedEvents\n\n      if (!(events & CoreMouseEventType.MOVE)) {\n        el.removeEventListener('mousemove', requestedEvents.mousemove!);\n        requestedEvents.mousemove = null;\n      } else if (!requestedEvents.mousemove) {\n        el.addEventListener('mousemove', eventListeners.mousemove);\n        requestedEvents.mousemove = eventListeners.mousemove;\n      }\n\n      if (!(events & CoreMouseEventType.WHEEL)) {\n        el.removeEventListener('wheel', requestedEvents.wheel!);\n        requestedEvents.wheel = null;\n      } else if (!requestedEvents.wheel) {\n        el.addEventListener('wheel', eventListeners.wheel, { passive: false });\n        requestedEvents.wheel = eventListeners.wheel;\n      }\n\n      if (!(events & CoreMouseEventType.UP)) {\n        this._document!.removeEventListener('mouseup', requestedEvents.mouseup!);\n        requestedEvents.mouseup = null;\n      } else if (!requestedEvents.mouseup) {\n        requestedEvents.mouseup = eventListeners.mouseup;\n      }\n\n      if (!(events & CoreMouseEventType.DRAG)) {\n        this._document!.removeEventListener('mousemove', requestedEvents.mousedrag!);\n        requestedEvents.mousedrag = null;\n      } else if (!requestedEvents.mousedrag) {\n        requestedEvents.mousedrag = eventListeners.mousedrag;\n      }\n    }));\n    // force initial onProtocolChange so we dont miss early mouse requests\n    this.coreMouseService.activeProtocol = this.coreMouseService.activeProtocol;\n\n    /**\n     * \"Always on\" event listeners.\n     */\n    this.register(addDisposableDomListener(el, 'mousedown', (ev: MouseEvent) => {\n      ev.preventDefault();\n      this.focus();\n\n      // Don't send the mouse button to the pty if mouse events are disabled or\n      // if the selection manager is having selection forced (ie. a modifier is\n      // held).\n      if (!this.coreMouseService.areMouseEventsActive || this._selectionService!.shouldForceSelection(ev)) {\n        return;\n      }\n\n      sendEvent(ev);\n\n      // Register additional global handlers which should keep reporting outside\n      // of the terminal element.\n      // Note: Other emulators also do this for 'mousedown' while a button\n      // is held, we currently limit 'mousedown' to the terminal only.\n      if (requestedEvents.mouseup) {\n        this._document!.addEventListener('mouseup', requestedEvents.mouseup);\n      }\n      if (requestedEvents.mousedrag) {\n        this._document!.addEventListener('mousemove', requestedEvents.mousedrag);\n      }\n\n      return this.cancel(ev);\n    }));\n\n    this.register(addDisposableDomListener(el, 'wheel', (ev: WheelEvent) => {\n      // do nothing, if app side handles wheel itself\n      if (requestedEvents.wheel) return;\n\n      if (!this.buffer.hasScrollback) {\n        // Convert wheel events into up/down events when the buffer does not have scrollback, this\n        // enables scrolling in apps hosted in the alt buffer such as vim or tmux.\n        const amount = this.viewport!.getLinesScrolled(ev);\n\n        // Do nothing if there's no vertical scroll\n        if (amount === 0) {\n          return;\n        }\n\n        // Construct and send sequences\n        const sequence = C0.ESC + (this.coreService.decPrivateModes.applicationCursorKeys ? 'O' : '[') + (ev.deltaY < 0 ? 'A' : 'B');\n        let data = '';\n        for (let i = 0; i < Math.abs(amount); i++) {\n          data += sequence;\n        }\n        this.coreService.triggerDataEvent(data, true);\n        return this.cancel(ev, true);\n      }\n\n      // normal viewport scrolling\n      // conditionally stop event, if the viewport still had rows to scroll within\n      if (this.viewport!.onWheel(ev)) {\n        return this.cancel(ev);\n      }\n    }, { passive: false }));\n\n    this.register(addDisposableDomListener(el, 'touchstart', (ev: TouchEvent) => {\n      if (this.coreMouseService.areMouseEventsActive) return;\n      this.viewport!.onTouchStart(ev);\n      return this.cancel(ev);\n    }, { passive: true }));\n\n    this.register(addDisposableDomListener(el, 'touchmove', (ev: TouchEvent) => {\n      if (this.coreMouseService.areMouseEventsActive) return;\n      if (!this.viewport!.onTouchMove(ev)) {\n        return this.cancel(ev);\n      }\n    }, { passive: false }));\n  }\n\n\n  /**\n   * Tells the renderer to refresh terminal content between two rows (inclusive) at the next\n   * opportunity.\n   * @param start The row to start from (between 0 and this.rows - 1).\n   * @param end The row to end at (between start and this.rows - 1).\n   */\n  public refresh(start: number, end: number): void {\n    this._renderService?.refreshRows(start, end);\n  }\n\n  /**\n   * Queues linkification for the specified rows.\n   * @param start The row to start from (between 0 and this.rows - 1).\n   * @param end The row to end at (between start and this.rows - 1).\n   */\n  private _queueLinkification(start: number, end: number): void {\n    this.linkifier?.linkifyRows(start, end);\n  }\n\n  /**\n   * Change the cursor style for different selection modes\n   */\n  public updateCursorStyle(ev: KeyboardEvent): void {\n    if (this._selectionService?.shouldColumnSelect(ev)) {\n      this.element!.classList.add('column-select');\n    } else {\n      this.element!.classList.remove('column-select');\n    }\n  }\n\n  /**\n   * Display the cursor element\n   */\n  private _showCursor(): void {\n    if (!this.coreService.isCursorInitialized) {\n      this.coreService.isCursorInitialized = true;\n      this.refresh(this.buffer.y, this.buffer.y);\n    }\n  }\n\n  public scrollLines(disp: number, suppressScrollEvent?: boolean, source = ScrollSource.TERMINAL): void {\n    super.scrollLines(disp, suppressScrollEvent, source);\n    this.refresh(0, this.rows - 1);\n  }\n\n  public paste(data: string): void {\n    paste(data, this.textarea!, this.coreService);\n  }\n\n  /**\n   * Attaches a custom key event handler which is run before keys are processed,\n   * giving consumers of xterm.js ultimate control as to what keys should be\n   * processed by the terminal and what keys should not.\n   * @param customKeyEventHandler The custom KeyboardEvent handler to attach.\n   * This is a function that takes a KeyboardEvent, allowing consumers to stop\n   * propagation and/or prevent the default action. The function returns whether\n   * the event should be processed by xterm.js.\n   */\n  public attachCustomKeyEventHandler(customKeyEventHandler: CustomKeyEventHandler): void {\n    this._customKeyEventHandler = customKeyEventHandler;\n  }\n\n  /**\n   * Registers a link matcher, allowing custom link patterns to be matched and\n   * handled.\n   * @param regex The regular expression to search for, specifically\n   * this searches the textContent of the rows. You will want to use \\s to match\n   * a space ' ' character for example.\n   * @param handler The callback when the link is called.\n   * @param options Options for the link matcher.\n   * @return The ID of the new matcher, this can be used to deregister.\n   */\n  public registerLinkMatcher(regex: RegExp, handler: LinkMatcherHandler, options?: ILinkMatcherOptions): number {\n    const matcherId = this.linkifier.registerLinkMatcher(regex, handler, options);\n    this.refresh(0, this.rows - 1);\n    return matcherId;\n  }\n\n  /**\n   * Deregisters a link matcher if it has been registered.\n   * @param matcherId The link matcher's ID (returned after register)\n   */\n  public deregisterLinkMatcher(matcherId: number): void {\n    if (this.linkifier.deregisterLinkMatcher(matcherId)) {\n      this.refresh(0, this.rows - 1);\n    }\n  }\n\n  public registerLinkProvider(linkProvider: ILinkProvider): IDisposable {\n    return this.linkifier2.registerLinkProvider(linkProvider);\n  }\n\n  public registerCharacterJoiner(handler: CharacterJoinerHandler): number {\n    if (!this._characterJoinerService) {\n      throw new Error('Terminal must be opened first');\n    }\n    const joinerId = this._characterJoinerService.register(handler);\n    this.refresh(0, this.rows - 1);\n    return joinerId;\n  }\n\n  public deregisterCharacterJoiner(joinerId: number): void {\n    if (!this._characterJoinerService) {\n      throw new Error('Terminal must be opened first');\n    }\n    if (this._characterJoinerService.deregister(joinerId)) {\n      this.refresh(0, this.rows - 1);\n    }\n  }\n\n  public get markers(): IMarker[] {\n    return this.buffer.markers;\n  }\n\n  public addMarker(cursorYOffset: number): IMarker | undefined {\n    // Disallow markers on the alt buffer\n    if (this.buffer !== this.buffers.normal) {\n      return;\n    }\n\n    return this.buffer.addMarker(this.buffer.ybase + this.buffer.y + cursorYOffset);\n  }\n\n  /**\n   * Gets whether the terminal has an active selection.\n   */\n  public hasSelection(): boolean {\n    return this._selectionService ? this._selectionService.hasSelection : false;\n  }\n\n  /**\n   * Selects text within the terminal.\n   * @param column The column the selection starts at..\n   * @param row The row the selection starts at.\n   * @param length The length of the selection.\n   */\n  public select(column: number, row: number, length: number): void {\n    this._selectionService!.setSelection(column, row, length);\n  }\n\n  /**\n   * Gets the terminal's current selection, this is useful for implementing copy\n   * behavior outside of xterm.js.\n   */\n  public getSelection(): string {\n    return this._selectionService ? this._selectionService.selectionText : '';\n  }\n\n  public getSelectionPosition(): ISelectionPosition | undefined {\n    if (!this._selectionService || !this._selectionService.hasSelection) {\n      return undefined;\n    }\n\n    return {\n      startColumn: this._selectionService.selectionStart![0],\n      startRow: this._selectionService.selectionStart![1],\n      endColumn: this._selectionService.selectionEnd![0],\n      endRow: this._selectionService.selectionEnd![1]\n    };\n  }\n\n  /**\n   * Clears the current terminal selection.\n   */\n  public clearSelection(): void {\n    this._selectionService?.clearSelection();\n  }\n\n  /**\n   * Selects all text within the terminal.\n   */\n  public selectAll(): void {\n    this._selectionService?.selectAll();\n  }\n\n  public selectLines(start: number, end: number): void {\n    this._selectionService?.selectLines(start, end);\n  }\n\n  /**\n   * Handle a keydown event\n   * Key Resources:\n   *   - https://developer.mozilla.org/en-US/docs/DOM/KeyboardEvent\n   * @param ev The keydown event to be handled.\n   */\n  protected _keyDown(event: KeyboardEvent): boolean | undefined {\n    this._keyDownHandled = false;\n\n    if (this._customKeyEventHandler && this._customKeyEventHandler(event) === false) {\n      return false;\n    }\n\n    if (!this._compositionHelper!.keydown(event)) {\n      if (this.buffer.ybase !== this.buffer.ydisp) {\n        this._bufferService.scrollToBottom();\n      }\n      return false;\n    }\n\n    if (event.key === 'Dead' || event.key === 'AltGraph') {\n      this._unprocessedDeadKey = true;\n    }\n\n    const result = evaluateKeyboardEvent(event, this.coreService.decPrivateModes.applicationCursorKeys, this.browser.isMac, this.options.macOptionIsMeta);\n\n    this.updateCursorStyle(event);\n\n    if (result.type === KeyboardResultType.PAGE_DOWN || result.type === KeyboardResultType.PAGE_UP) {\n      const scrollCount = this.rows - 1;\n      this.scrollLines(result.type === KeyboardResultType.PAGE_UP ? -scrollCount : scrollCount);\n      return this.cancel(event, true);\n    }\n\n    if (result.type === KeyboardResultType.SELECT_ALL) {\n      this.selectAll();\n    }\n\n    if (this._isThirdLevelShift(this.browser, event)) {\n      return true;\n    }\n\n    if (result.cancel) {\n      // The event is canceled at the end already, is this necessary?\n      this.cancel(event, true);\n    }\n\n    if (!result.key) {\n      return true;\n    }\n\n    if (this._unprocessedDeadKey) {\n      this._unprocessedDeadKey = false;\n      return true;\n    }\n\n    // If ctrl+c or enter is being sent, clear out the textarea. This is done so that screen readers\n    // will announce deleted characters. This will not work 100% of the time but it should cover\n    // most scenarios.\n    if (result.key === C0.ETX || result.key === C0.CR) {\n      this.textarea!.value = '';\n    }\n\n    this._onKey.fire({ key: result.key, domEvent: event });\n    this._showCursor();\n    this.coreService.triggerDataEvent(result.key, true);\n\n    // Cancel events when not in screen reader mode so events don't get bubbled up and handled by\n    // other listeners. When screen reader mode is enabled, this could cause issues if the event\n    // is handled at a higher level, this is a compromise in order to echo keys to the screen\n    // reader.\n    if (!this.optionsService.rawOptions.screenReaderMode) {\n      return this.cancel(event, true);\n    }\n\n    this._keyDownHandled = true;\n  }\n\n  private _isThirdLevelShift(browser: IBrowser, ev: KeyboardEvent): boolean {\n    const thirdLevelKey =\n      (browser.isMac && !this.options.macOptionIsMeta && ev.altKey && !ev.ctrlKey && !ev.metaKey) ||\n      (browser.isWindows && ev.altKey && ev.ctrlKey && !ev.metaKey) ||\n      (browser.isWindows && ev.getModifierState('AltGraph'));\n\n    if (ev.type === 'keypress') {\n      return thirdLevelKey;\n    }\n\n    // Don't invoke for arrows, pageDown, home, backspace, etc. (on non-keypress events)\n    return thirdLevelKey && (!ev.keyCode || ev.keyCode > 47);\n  }\n\n  protected _keyUp(ev: KeyboardEvent): void {\n    if (this._customKeyEventHandler && this._customKeyEventHandler(ev) === false) {\n      return;\n    }\n\n    if (!wasModifierKeyOnlyEvent(ev)) {\n      this.focus();\n    }\n\n    this.updateCursorStyle(ev);\n    this._keyPressHandled = false;\n  }\n\n  /**\n   * Handle a keypress event.\n   * Key Resources:\n   *   - https://developer.mozilla.org/en-US/docs/DOM/KeyboardEvent\n   * @param ev The keypress event to be handled.\n   */\n  protected _keyPress(ev: KeyboardEvent): boolean {\n    let key;\n\n    this._keyPressHandled = false;\n\n    if (this._keyDownHandled) {\n      return false;\n    }\n\n    if (this._customKeyEventHandler && this._customKeyEventHandler(ev) === false) {\n      return false;\n    }\n\n    this.cancel(ev);\n\n    if (ev.charCode) {\n      key = ev.charCode;\n    } else if (ev.which === null || ev.which === undefined) {\n      key = ev.keyCode;\n    } else if (ev.which !== 0 && ev.charCode !== 0) {\n      key = ev.which;\n    } else {\n      return false;\n    }\n\n    if (!key || (\n      (ev.altKey || ev.ctrlKey || ev.metaKey) && !this._isThirdLevelShift(this.browser, ev)\n    )) {\n      return false;\n    }\n\n    key = String.fromCharCode(key);\n\n    this._onKey.fire({ key, domEvent: ev });\n    this._showCursor();\n    this.coreService.triggerDataEvent(key, true);\n\n    this._keyPressHandled = true;\n\n    // The key was handled so clear the dead key state, otherwise certain keystrokes like arrow\n    // keys could be ignored\n    this._unprocessedDeadKey = false;\n\n    return true;\n  }\n\n  /**\n   * Handle an input event.\n   * Key Resources:\n   *   - https://developer.mozilla.org/en-US/docs/Web/API/InputEvent\n   * @param ev The input event to be handled.\n   */\n  protected _inputEvent(ev: InputEvent): boolean {\n    // Only support emoji IMEs when screen reader mode is disabled as the event must bubble up to\n    // support reading out character input which can doubling up input characters\n    if (ev.data && ev.inputType === 'insertText' && !ev.composed && !this.optionsService.rawOptions.screenReaderMode) {\n      if (this._keyPressHandled) {\n        return false;\n      }\n\n      // The key was handled so clear the dead key state, otherwise certain keystrokes like arrow\n      // keys could be ignored\n      this._unprocessedDeadKey = false;\n\n      const text = ev.data;\n      this.coreService.triggerDataEvent(text, true);\n\n      this.cancel(ev);\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Ring the bell.\n   * Note: We could do sweet things with webaudio here\n   */\n  public bell(): void {\n    if (this._soundBell()) {\n      this._soundService?.playBellSound();\n    }\n\n    this._onBell.fire();\n\n    // if (this._visualBell()) {\n    //   this.element.classList.add('visual-bell-active');\n    //   clearTimeout(this._visualBellTimer);\n    //   this._visualBellTimer = window.setTimeout(() => {\n    //     this.element.classList.remove('visual-bell-active');\n    //   }, 200);\n    // }\n  }\n\n  /**\n   * Resizes the terminal.\n   *\n   * @param x The number of columns to resize to.\n   * @param y The number of rows to resize to.\n   */\n  public resize(x: number, y: number): void {\n    if (x === this.cols && y === this.rows) {\n      // Check if we still need to measure the char size (fixes #785).\n      if (this._charSizeService && !this._charSizeService.hasValidSize) {\n        this._charSizeService.measure();\n      }\n      return;\n    }\n\n    super.resize(x, y);\n  }\n\n  private _afterResize(x: number, y: number): void {\n    this._charSizeService?.measure();\n\n    // Sync the scroll area to make sure scroll events don't fire and scroll the viewport to an\n    // invalid location\n    this.viewport?.syncScrollArea(true);\n  }\n\n  /**\n   * Clear the entire buffer, making the prompt line the new first line.\n   */\n  public clear(): void {\n    if (this.buffer.ybase === 0 && this.buffer.y === 0) {\n      // Don't clear if it's already clear\n      return;\n    }\n    this.buffer.lines.set(0, this.buffer.lines.get(this.buffer.ybase + this.buffer.y)!);\n    this.buffer.lines.length = 1;\n    this.buffer.ydisp = 0;\n    this.buffer.ybase = 0;\n    this.buffer.y = 0;\n    for (let i = 1; i < this.rows; i++) {\n      this.buffer.lines.push(this.buffer.getBlankLine(DEFAULT_ATTR_DATA));\n    }\n    this.refresh(0, this.rows - 1);\n    this._onScroll.fire({ position: this.buffer.ydisp, source: ScrollSource.TERMINAL });\n  }\n\n  /**\n   * Reset terminal.\n   * Note: Calling this directly from JS is synchronous but does not clear\n   * input buffers and does not reset the parser, thus the terminal will\n   * continue to apply pending input data.\n   * If you need in band reset (synchronous with input data) consider\n   * using DECSTR (soft reset, CSI ! p) or RIS instead (hard reset, ESC c).\n   */\n  public reset(): void {\n    /**\n     * Since _setup handles a full terminal creation, we have to carry forward\n     * a few things that should not reset.\n     */\n    this.options.rows = this.rows;\n    this.options.cols = this.cols;\n    const customKeyEventHandler = this._customKeyEventHandler;\n\n    this._setup();\n    super.reset();\n    this._selectionService?.reset();\n\n    // reattach\n    this._customKeyEventHandler = customKeyEventHandler;\n\n    // do a full screen refresh\n    this.refresh(0, this.rows - 1);\n    this.viewport?.syncScrollArea();\n  }\n\n  public clearTextureAtlas(): void {\n    this._renderService?.clearTextureAtlas();\n  }\n\n  private _reportFocus(): void {\n    if (this.element?.classList.contains('focus')) {\n      this.coreService.triggerDataEvent(C0.ESC + '[I');\n    } else {\n      this.coreService.triggerDataEvent(C0.ESC + '[O');\n    }\n  }\n\n  private _reportWindowsOptions(type: WindowsOptionsReportType): void {\n    if (!this._renderService) {\n      return;\n    }\n\n    switch (type) {\n      case WindowsOptionsReportType.GET_WIN_SIZE_PIXELS:\n        const canvasWidth = this._renderService.dimensions.scaledCanvasWidth.toFixed(0);\n        const canvasHeight = this._renderService.dimensions.scaledCanvasHeight.toFixed(0);\n        this.coreService.triggerDataEvent(`${C0.ESC}[4;${canvasHeight};${canvasWidth}t`);\n        break;\n      case WindowsOptionsReportType.GET_CELL_SIZE_PIXELS:\n        const cellWidth = this._renderService.dimensions.scaledCellWidth.toFixed(0);\n        const cellHeight = this._renderService.dimensions.scaledCellHeight.toFixed(0);\n        this.coreService.triggerDataEvent(`${C0.ESC}[6;${cellHeight};${cellWidth}t`);\n        break;\n    }\n  }\n\n  // TODO: Remove cancel function and cancelEvents option\n  public cancel(ev: Event, force?: boolean): boolean | undefined {\n    if (!this.options.cancelEvents && !force) {\n      return;\n    }\n    ev.preventDefault();\n    ev.stopPropagation();\n    return false;\n  }\n\n  private _visualBell(): boolean {\n    return false;\n    // return this.options.bellStyle === 'visual' ||\n    //     this.options.bellStyle === 'both';\n  }\n\n  private _soundBell(): boolean {\n    return this.options.bellStyle === 'sound';\n    // return this.options.bellStyle === 'sound' ||\n    //     this.options.bellStyle === 'both';\n  }\n}\n\n/**\n * Helpers\n */\n\nfunction wasModifierKeyOnlyEvent(ev: KeyboardEvent): boolean {\n  return ev.keyCode === 16 || // Shift\n    ev.keyCode === 17 || // Ctrl\n    ev.keyCode === 18; // Alt\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nconst RENDER_DEBOUNCE_THRESHOLD_MS = 1000; // 1 Second\n\nimport { IRenderDebouncer } from 'browser/Types';\n\n/**\n * Debounces calls to update screen readers to update at most once configurable interval of time.\n */\nexport class TimeBasedDebouncer implements IRenderDebouncer {\n  private _rowStart: number | undefined;\n  private _rowEnd: number | undefined;\n  private _rowCount: number | undefined;\n\n  // The last moment that the Terminal was refreshed at\n  private _lastRefreshMs = 0;\n  // Whether a trailing refresh should be triggered due to a refresh request that was throttled\n  private _additionalRefreshRequested = false;\n\n  private _refreshTimeoutID: number | undefined;\n\n  constructor(\n    private _renderCallback: (start: number, end: number) => void,\n    private readonly _debounceThresholdMS = RENDER_DEBOUNCE_THRESHOLD_MS\n  ) {\n  }\n\n  public dispose(): void {\n    if (this._refreshTimeoutID) {\n      clearTimeout(this._refreshTimeoutID);\n    }\n  }\n\n  public refresh(rowStart: number | undefined, rowEnd: number | undefined, rowCount: number): void {\n    this._rowCount = rowCount;\n    // Get the min/max row start/end for the arg values\n    rowStart = rowStart !== undefined ? rowStart : 0;\n    rowEnd = rowEnd !== undefined ? rowEnd : this._rowCount - 1;\n    // Set the properties to the updated values\n    this._rowStart = this._rowStart !== undefined ? Math.min(this._rowStart, rowStart) : rowStart;\n    this._rowEnd = this._rowEnd !== undefined ? Math.max(this._rowEnd, rowEnd) : rowEnd;\n\n    // Only refresh if the time since last refresh is above a threshold, otherwise wait for\n    // enough time to pass before refreshing again.\n    const refreshRequestTime: number = Date.now();\n    if (refreshRequestTime - this._lastRefreshMs >= this._debounceThresholdMS) {\n      // Enough time has lapsed since the last refresh; refresh immediately\n      this._lastRefreshMs = refreshRequestTime;\n      this._innerRefresh();\n    } else if (!this._additionalRefreshRequested) {\n      // This is the first additional request throttled; set up trailing refresh\n      const elapsed = refreshRequestTime - this._lastRefreshMs;\n      const waitPeriodBeforeTrailingRefresh = this._debounceThresholdMS - elapsed;\n      this._additionalRefreshRequested = true;\n\n      this._refreshTimeoutID = window.setTimeout(() => {\n        this._lastRefreshMs = Date.now();\n        this._innerRefresh();\n        this._additionalRefreshRequested = false;\n        this._refreshTimeoutID = undefined; // No longer need to clear the timeout\n      }, waitPeriodBeforeTrailingRefresh);\n    }\n  }\n\n  private _innerRefresh(): void {\n    // Make sure values are set\n    if (this._rowStart === undefined || this._rowEnd === undefined || this._rowCount === undefined) {\n      return;\n    }\n\n    // Clamp values\n    const start = Math.max(this._rowStart, 0);\n    const end = Math.min(this._rowEnd, this._rowCount - 1);\n\n    // Reset debouncer (this happens before render callback as the render could trigger it again)\n    this._rowStart = undefined;\n    this._rowEnd = undefined;\n\n    // Run render callback\n    this._renderCallback(start, end);\n  }\n}\n\n", "/**\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { Disposable } from 'common/Lifecycle';\nimport { addDisposableDomListener } from 'browser/Lifecycle';\nimport { IColorSet, IViewport } from 'browser/Types';\nimport { ICharSizeService, IRenderService } from 'browser/services/Services';\nimport { IBufferService, IOptionsService } from 'common/services/Services';\nimport { IBuffer } from 'common/buffer/Types';\nimport { IRenderDimensions } from 'browser/renderer/Types';\n\nconst FALLBACK_SCROLL_BAR_WIDTH = 15;\n\n/**\n * Represents the viewport of a terminal, the visible area within the larger buffer of output.\n * Logic for the virtual scroll bar is included in this object.\n */\nexport class Viewport extends Disposable implements IViewport {\n  public scrollBarWidth: number = 0;\n  private _currentRowHeight: number = 0;\n  private _currentScaledCellHeight: number = 0;\n  private _lastRecordedBufferLength: number = 0;\n  private _lastRecordedViewportHeight: number = 0;\n  private _lastRecordedBufferHeight: number = 0;\n  private _lastTouchY: number = 0;\n  private _lastScrollTop: number = 0;\n  private _lastHadScrollBar: boolean = false;\n  private _activeBuffer: IBuffer;\n  private _renderDimensions: IRenderDimensions;\n\n  // Stores a partial line amount when scrolling, this is used to keep track of how much of a line\n  // is scrolled so we can \"scroll\" over partial lines and feel natural on touchpads. This is a\n  // quick fix and could have a more robust solution in place that reset the value when needed.\n  private _wheelPartialScroll: number = 0;\n\n  private _refreshAnimationFrame: number | null = null;\n  private _ignoreNextScrollEvent: boolean = false;\n\n  constructor(\n    private readonly _scrollLines: (amount: number) => void,\n    private readonly _viewportElement: HTMLElement,\n    private readonly _scrollArea: HTMLElement,\n    private readonly _element: HTMLElement,\n    @IBufferService private readonly _bufferService: IBufferService,\n    @IOptionsService private readonly _optionsService: IOptionsService,\n    @ICharSizeService private readonly _charSizeService: ICharSizeService,\n    @IRenderService private readonly _renderService: IRenderService\n  ) {\n    super();\n\n    // Measure the width of the scrollbar. If it is 0 we can assume it's an OSX overlay scrollbar.\n    // Unfortunately the overlay scrollbar would be hidden underneath the screen element in that case,\n    // therefore we account for a standard amount to make it visible\n    this.scrollBarWidth = (this._viewportElement.offsetWidth - this._scrollArea.offsetWidth) || FALLBACK_SCROLL_BAR_WIDTH;\n    this._lastHadScrollBar = true;\n    this.register(addDisposableDomListener(this._viewportElement, 'scroll', this._onScroll.bind(this)));\n\n    // Track properties used in performance critical code manually to avoid using slow getters\n    this._activeBuffer = this._bufferService.buffer;\n    this.register(this._bufferService.buffers.onBufferActivate(e => this._activeBuffer = e.activeBuffer));\n    this._renderDimensions = this._renderService.dimensions;\n    this.register(this._renderService.onDimensionsChange(e => this._renderDimensions = e));\n\n    // Perform this async to ensure the ICharSizeService is ready.\n    setTimeout(() => this.syncScrollArea(), 0);\n  }\n\n  public onThemeChange(colors: IColorSet): void {\n    this._viewportElement.style.backgroundColor = colors.background.css;\n  }\n\n  /**\n   * Refreshes row height, setting line-height, viewport height and scroll area height if\n   * necessary.\n   */\n  private _refresh(immediate: boolean): void {\n    if (immediate) {\n      this._innerRefresh();\n      if (this._refreshAnimationFrame !== null) {\n        cancelAnimationFrame(this._refreshAnimationFrame);\n      }\n      return;\n    }\n    if (this._refreshAnimationFrame === null) {\n      this._refreshAnimationFrame = requestAnimationFrame(() => this._innerRefresh());\n    }\n  }\n\n  private _innerRefresh(): void {\n    if (this._charSizeService.height > 0) {\n      this._currentRowHeight = this._renderService.dimensions.scaledCellHeight / window.devicePixelRatio;\n      this._currentScaledCellHeight = this._renderService.dimensions.scaledCellHeight;\n      this._lastRecordedViewportHeight = this._viewportElement.offsetHeight;\n      const newBufferHeight = Math.round(this._currentRowHeight * this._lastRecordedBufferLength) + (this._lastRecordedViewportHeight - this._renderService.dimensions.canvasHeight);\n      if (this._lastRecordedBufferHeight !== newBufferHeight) {\n        this._lastRecordedBufferHeight = newBufferHeight;\n        this._scrollArea.style.height = this._lastRecordedBufferHeight + 'px';\n      }\n    }\n\n    // Sync scrollTop\n    const scrollTop = this._bufferService.buffer.ydisp * this._currentRowHeight;\n    if (this._viewportElement.scrollTop !== scrollTop) {\n      // Ignore the next scroll event which will be triggered by setting the scrollTop as we do not\n      // want this event to scroll the terminal\n      this._ignoreNextScrollEvent = true;\n      this._viewportElement.scrollTop = scrollTop;\n    }\n\n    // Update scroll bar width\n    if (this._optionsService.rawOptions.scrollback === 0) {\n      this.scrollBarWidth = 0;\n    } else {\n      this.scrollBarWidth = (this._viewportElement.offsetWidth - this._scrollArea.offsetWidth) || FALLBACK_SCROLL_BAR_WIDTH;\n    }\n    this._lastHadScrollBar = this.scrollBarWidth > 0;\n\n    const elementStyle = window.getComputedStyle(this._element);\n    const elementPadding = parseInt(elementStyle.paddingLeft) + parseInt(elementStyle.paddingRight);\n    this._viewportElement.style.width = (this._renderService.dimensions.actualCellWidth * (this._bufferService.cols) + this.scrollBarWidth + (this._lastHadScrollBar ? elementPadding : 0)).toString() + 'px';\n    this._refreshAnimationFrame = null;\n  }\n\n  /**\n   * Updates dimensions and synchronizes the scroll area if necessary.\n   */\n  public syncScrollArea(immediate: boolean = false): void {\n    // If buffer height changed\n    if (this._lastRecordedBufferLength !== this._bufferService.buffer.lines.length) {\n      this._lastRecordedBufferLength = this._bufferService.buffer.lines.length;\n      this._refresh(immediate);\n      return;\n    }\n\n    // If viewport height changed\n    if (this._lastRecordedViewportHeight !== this._renderService.dimensions.canvasHeight) {\n      this._refresh(immediate);\n      return;\n    }\n\n    // If the buffer position doesn't match last scroll top\n    if (this._lastScrollTop !== this._activeBuffer.ydisp * this._currentRowHeight) {\n      this._refresh(immediate);\n      return;\n    }\n\n    // If row height changed\n    if (this._renderDimensions.scaledCellHeight !== this._currentScaledCellHeight) {\n      this._refresh(immediate);\n      return;\n    }\n\n    // If the scroll bar visibility changed\n    if (this._lastHadScrollBar !== (this._optionsService.rawOptions.scrollback > 0)) {\n      this._refresh(immediate);\n    }\n  }\n\n  /**\n   * Handles scroll events on the viewport, calculating the new viewport and requesting the\n   * terminal to scroll to it.\n   * @param ev The scroll event.\n   */\n  private _onScroll(ev: Event): void {\n    // Record current scroll top position\n    this._lastScrollTop = this._viewportElement.scrollTop;\n\n    // Don't attempt to scroll if the element is not visible, otherwise scrollTop will be corrupt\n    // which causes the terminal to scroll the buffer to the top\n    if (!this._viewportElement.offsetParent) {\n      return;\n    }\n\n    // Ignore the event if it was flagged to ignore (when the source of the event is from Viewport)\n    if (this._ignoreNextScrollEvent) {\n      this._ignoreNextScrollEvent = false;\n      // Still trigger the scroll so lines get refreshed\n      this._scrollLines(0);\n      return;\n    }\n\n    const newRow = Math.round(this._lastScrollTop / this._currentRowHeight);\n    const diff = newRow - this._bufferService.buffer.ydisp;\n    this._scrollLines(diff);\n  }\n\n  /**\n   * Handles bubbling of scroll event in case the viewport has reached top or bottom\n   * @param ev The scroll event.\n   * @param amount The amount scrolled\n   */\n  private _bubbleScroll(ev: Event, amount: number): boolean {\n    const scrollPosFromTop = this._viewportElement.scrollTop + this._lastRecordedViewportHeight;\n    if ((amount < 0 && this._viewportElement.scrollTop !== 0) ||\n      (amount > 0 && scrollPosFromTop < this._lastRecordedBufferHeight)) {\n      if (ev.cancelable) {\n        ev.preventDefault();\n      }\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * Handles mouse wheel events by adjusting the viewport's scrollTop and delegating the actual\n   * scrolling to `onScroll`, this event needs to be attached manually by the consumer of\n   * `Viewport`.\n   * @param ev The mouse wheel event.\n   */\n  public onWheel(ev: WheelEvent): boolean {\n    const amount = this._getPixelsScrolled(ev);\n    if (amount === 0) {\n      return false;\n    }\n    this._viewportElement.scrollTop += amount;\n    return this._bubbleScroll(ev, amount);\n  }\n\n  private _getPixelsScrolled(ev: WheelEvent): number {\n    // Do nothing if it's not a vertical scroll event\n    if (ev.deltaY === 0 || ev.shiftKey) {\n      return 0;\n    }\n\n    // Fallback to WheelEvent.DOM_DELTA_PIXEL\n    let amount = this._applyScrollModifier(ev.deltaY, ev);\n    if (ev.deltaMode === WheelEvent.DOM_DELTA_LINE) {\n      amount *= this._currentRowHeight;\n    } else if (ev.deltaMode === WheelEvent.DOM_DELTA_PAGE) {\n      amount *= this._currentRowHeight * this._bufferService.rows;\n    }\n    return amount;\n  }\n\n  /**\n   * Gets the number of pixels scrolled by the mouse event taking into account what type of delta\n   * is being used.\n   * @param ev The mouse wheel event.\n   */\n  public getLinesScrolled(ev: WheelEvent): number {\n    // Do nothing if it's not a vertical scroll event\n    if (ev.deltaY === 0 || ev.shiftKey) {\n      return 0;\n    }\n\n    // Fallback to WheelEvent.DOM_DELTA_LINE\n    let amount = this._applyScrollModifier(ev.deltaY, ev);\n    if (ev.deltaMode === WheelEvent.DOM_DELTA_PIXEL) {\n      amount /= this._currentRowHeight + 0.0; // Prevent integer division\n      this._wheelPartialScroll += amount;\n      amount = Math.floor(Math.abs(this._wheelPartialScroll)) * (this._wheelPartialScroll > 0 ? 1 : -1);\n      this._wheelPartialScroll %= 1;\n    } else if (ev.deltaMode === WheelEvent.DOM_DELTA_PAGE) {\n      amount *= this._bufferService.rows;\n    }\n    return amount;\n  }\n\n  private _applyScrollModifier(amount: number, ev: WheelEvent): number {\n    const modifier = this._optionsService.rawOptions.fastScrollModifier;\n    // Multiply the scroll speed when the modifier is down\n    if ((modifier === 'alt' && ev.altKey) ||\n      (modifier === 'ctrl' && ev.ctrlKey) ||\n      (modifier === 'shift' && ev.shiftKey)) {\n      return amount * this._optionsService.rawOptions.fastScrollSensitivity * this._optionsService.rawOptions.scrollSensitivity;\n    }\n\n    return amount * this._optionsService.rawOptions.scrollSensitivity;\n  }\n\n  /**\n   * Handles the touchstart event, recording the touch occurred.\n   * @param ev The touch event.\n   */\n  public onTouchStart(ev: TouchEvent): void {\n    this._lastTouchY = ev.touches[0].pageY;\n  }\n\n  /**\n   * Handles the touchmove event, scrolling the viewport if the position shifted.\n   * @param ev The touch event.\n   */\n  public onTouchMove(ev: TouchEvent): boolean {\n    const deltaY = this._lastTouchY - ev.touches[0].pageY;\n    this._lastTouchY = ev.touches[0].pageY;\n    if (deltaY === 0) {\n      return false;\n    }\n    this._viewportElement.scrollTop += deltaY;\n    return this._bubbleScroll(ev, deltaY);\n  }\n}\n", "/**\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IRenderService } from 'browser/services/Services';\nimport { IBufferService, ICoreService, IOptionsService } from 'common/services/Services';\n\ninterface IPosition {\n  start: number;\n  end: number;\n}\n\n/**\n * Encapsulates the logic for handling compositionstart, compositionupdate and compositionend\n * events, displaying the in-progress composition to the UI and forwarding the final composition\n * to the handler.\n */\nexport class CompositionHelper {\n  /**\n   * Whether input composition is currently happening, eg. via a mobile keyboard, speech input or\n   * IME. This variable determines whether the compositionText should be displayed on the UI.\n   */\n  private _isComposing: boolean;\n  public get isComposing(): boolean { return this._isComposing; }\n\n  /**\n   * The position within the input textarea's value of the current composition.\n   */\n  private _compositionPosition: IPosition;\n\n  /**\n   * Whether a composition is in the process of being sent, setting this to false will cancel any\n   * in-progress composition.\n   */\n  private _isSendingComposition: boolean;\n\n  /**\n   * Data already sent due to keydown event.\n   */\n  private _dataAlreadySent: string;\n\n  constructor(\n    private readonly _textarea: HTMLTextAreaElement,\n    private readonly _compositionView: HTMLElement,\n    @IBufferService private readonly _bufferService: IBufferService,\n    @IOptionsService private readonly _optionsService: IOptionsService,\n    @ICoreService private readonly _coreService: ICoreService,\n    @IRenderService private readonly _renderService: IRenderService\n  ) {\n    this._isComposing = false;\n    this._isSendingComposition = false;\n    this._compositionPosition = { start: 0, end: 0 };\n    this._dataAlreadySent = '';\n  }\n\n  /**\n   * Handles the compositionstart event, activating the composition view.\n   */\n  public compositionstart(): void {\n    this._isComposing = true;\n    this._compositionPosition.start = this._textarea.value.length;\n    this._compositionView.textContent = '';\n    this._dataAlreadySent = '';\n    this._compositionView.classList.add('active');\n  }\n\n  /**\n   * Handles the compositionupdate event, updating the composition view.\n   * @param ev The event.\n   */\n  public compositionupdate(ev: Pick<CompositionEvent, 'data'>): void {\n    this._compositionView.textContent = ev.data;\n    this.updateCompositionElements();\n    setTimeout(() => {\n      this._compositionPosition.end = this._textarea.value.length;\n    }, 0);\n  }\n\n  /**\n   * Handles the compositionend event, hiding the composition view and sending the composition to\n   * the handler.\n   */\n  public compositionend(): void {\n    this._finalizeComposition(true);\n  }\n\n  /**\n   * Handles the keydown event, routing any necessary events to the CompositionHelper functions.\n   * @param ev The keydown event.\n   * @return Whether the Terminal should continue processing the keydown event.\n   */\n  public keydown(ev: KeyboardEvent): boolean {\n    if (this._isComposing || this._isSendingComposition) {\n      if (ev.keyCode === 229) {\n        // Continue composing if the keyCode is the \"composition character\"\n        return false;\n      }\n      if (ev.keyCode === 16 || ev.keyCode === 17 || ev.keyCode === 18) {\n        // Continue composing if the keyCode is a modifier key\n        return false;\n      }\n      // Finish composition immediately. This is mainly here for the case where enter is\n      // pressed and the handler needs to be triggered before the command is executed.\n      this._finalizeComposition(false);\n    }\n\n    if (ev.keyCode === 229) {\n      // If the \"composition character\" is used but gets to this point it means a non-composition\n      // character (eg. numbers and punctuation) was pressed when the IME was active.\n      this._handleAnyTextareaChanges();\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Finalizes the composition, resuming regular input actions. This is called when a composition\n   * is ending.\n   * @param waitForPropagation Whether to wait for events to propagate before sending\n   *   the input. This should be false if a non-composition keystroke is entered before the\n   *   compositionend event is triggered, such as enter, so that the composition is sent before\n   *   the command is executed.\n   */\n  private _finalizeComposition(waitForPropagation: boolean): void {\n    this._compositionView.classList.remove('active');\n    this._isComposing = false;\n\n    if (!waitForPropagation) {\n      // Cancel any delayed composition send requests and send the input immediately.\n      this._isSendingComposition = false;\n      const input = this._textarea.value.substring(this._compositionPosition.start, this._compositionPosition.end);\n      this._coreService.triggerDataEvent(input, true);\n    } else {\n      // Make a deep copy of the composition position here as a new compositionstart event may\n      // fire before the setTimeout executes.\n      const currentCompositionPosition = {\n        start: this._compositionPosition.start,\n        end: this._compositionPosition.end\n      };\n\n      // Since composition* events happen before the changes take place in the textarea on most\n      // browsers, use a setTimeout with 0ms time to allow the native compositionend event to\n      // complete. This ensures the correct character is retrieved.\n      // This solution was used because:\n      // - The compositionend event's data property is unreliable, at least on Chromium\n      // - The last compositionupdate event's data property does not always accurately describe\n      //   the character, a counter example being Korean where an ending consonsant can move to\n      //   the following character if the following input is a vowel.\n      this._isSendingComposition = true;\n      setTimeout(() => {\n        // Ensure that the input has not already been sent\n        if (this._isSendingComposition) {\n          this._isSendingComposition = false;\n          let input;\n          // Add length of data already sent due to keydown event,\n          // otherwise input characters can be duplicated. (Issue #3191)\n          currentCompositionPosition.start += this._dataAlreadySent.length;\n          if (this._isComposing) {\n            // Use the end position to get the string if a new composition has started.\n            input = this._textarea.value.substring(currentCompositionPosition.start, currentCompositionPosition.end);\n          } else {\n            // Don't use the end position here in order to pick up any characters after the\n            // composition has finished, for example when typing a non-composition character\n            // (eg. 2) after a composition character.\n            input = this._textarea.value.substring(currentCompositionPosition.start);\n          }\n          if (input.length > 0) {\n            this._coreService.triggerDataEvent(input, true);\n          }\n        }\n      }, 0);\n    }\n  }\n\n  /**\n   * Apply any changes made to the textarea after the current event chain is allowed to complete.\n   * This should be called when not currently composing but a keydown event with the \"composition\n   * character\" (229) is triggered, in order to allow non-composition text to be entered when an\n   * IME is active.\n   */\n  private _handleAnyTextareaChanges(): void {\n    const oldValue = this._textarea.value;\n    setTimeout(() => {\n      // Ignore if a composition has started since the timeout\n      if (!this._isComposing) {\n        const newValue = this._textarea.value;\n        const diff = newValue.replace(oldValue, '');\n        if (diff.length > 0) {\n          this._dataAlreadySent = diff;\n          this._coreService.triggerDataEvent(diff, true);\n        }\n      }\n    }, 0);\n  }\n\n  /**\n   * Positions the composition view on top of the cursor and the textarea just below it (so the\n   * IME helper dialog is positioned correctly).\n   * @param dontRecurse Whether to use setTimeout to recursively trigger another update, this is\n   *   necessary as the IME events across browsers are not consistently triggered.\n   */\n  public updateCompositionElements(dontRecurse?: boolean): void {\n    if (!this._isComposing) {\n      return;\n    }\n\n    if (this._bufferService.buffer.isCursorInViewport) {\n      const cursorX = Math.min(this._bufferService.buffer.x, this._bufferService.cols - 1);\n\n      const cellHeight = this._renderService.dimensions.actualCellHeight;\n      const cursorTop = this._bufferService.buffer.y * this._renderService.dimensions.actualCellHeight;\n      const cursorLeft = cursorX * this._renderService.dimensions.actualCellWidth;\n\n      this._compositionView.style.left = cursorLeft + 'px';\n      this._compositionView.style.top = cursorTop + 'px';\n      this._compositionView.style.height = cellHeight + 'px';\n      this._compositionView.style.lineHeight = cellHeight + 'px';\n      this._compositionView.style.fontFamily = this._optionsService.rawOptions.fontFamily;\n      this._compositionView.style.fontSize = this._optionsService.rawOptions.fontSize + 'px';\n      // Sync the textarea to the exact position of the composition view so the IME knows where the\n      // text is.\n      const compositionViewBounds = this._compositionView.getBoundingClientRect();\n      this._textarea.style.left = cursorLeft + 'px';\n      this._textarea.style.top = cursorTop + 'px';\n      // Ensure the text area is at least 1x1, otherwise certain IMEs may break\n      this._textarea.style.width = Math.max(compositionViewBounds.width, 1) + 'px';\n      this._textarea.style.height = Math.max(compositionViewBounds.height, 1) + 'px';\n      this._textarea.style.lineHeight = compositionViewBounds.height + 'px';\n    }\n\n    if (!dontRecurse) {\n      setTimeout(() => this.updateCompositionElements(true), 0);\n    }\n  }\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nexport function getCoordsRelativeToElement(event: {clientX: number, clientY: number}, element: HTMLElement): [number, number] {\n  const rect = element.getBoundingClientRect();\n  return [event.clientX - rect.left, event.clientY - rect.top];\n}\n\n/**\n * Gets coordinates within the terminal for a particular mouse event. The result\n * is returned as an array in the form [x, y] instead of an object as it's a\n * little faster and this function is used in some low level code.\n * @param event The mouse event.\n * @param element The terminal's container element.\n * @param colCount The number of columns in the terminal.\n * @param rowCount The number of rows n the terminal.\n * @param isSelection Whether the request is for the selection or not. This will\n * apply an offset to the x value such that the left half of the cell will\n * select that cell and the right half will select the next cell.\n */\nexport function getCoords(event: {clientX: number, clientY: number}, element: HTMLElement, colCount: number, rowCount: number, hasValidCharSize: boolean, actualCellWidth: number, actualCellHeight: number, isSelection?: boolean): [number, number] | undefined {\n  // Coordinates cannot be measured if there are no valid\n  if (!hasValidCharSize) {\n    return undefined;\n  }\n\n  const coords = getCoordsRelativeToElement(event, element);\n  if (!coords) {\n    return undefined;\n  }\n\n  coords[0] = Math.ceil((coords[0] + (isSelection ? actualCellWidth / 2 : 0)) / actualCellWidth);\n  coords[1] = Math.ceil(coords[1] / actualCellHeight);\n\n  // Ensure coordinates are within the terminal viewport. Note that selections\n  // need an addition point of precision to cover the end point (as characters\n  // cover half of one char and half of the next).\n  coords[0] = Math.min(Math.max(coords[0], 1), colCount + (isSelection ? 1 : 0));\n  coords[1] = Math.min(Math.max(coords[1], 1), rowCount);\n\n  return coords;\n}\n\n/**\n * Gets coordinates within the terminal for a particular mouse event, wrapping\n * them to the bounds of the terminal and adding 32 to both the x and y values\n * as expected by xterm.\n */\nexport function getRawByteCoords(coords: [number, number] | undefined): { x: number, y: number } | undefined {\n  if (!coords) {\n    return undefined;\n  }\n\n  // xterm sends raw bytes and starts at 32 (SP) for each.\n  return { x: coords[0] + 32, y: coords[1] + 32 };\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { C0 } from 'common/data/EscapeSequences';\nimport { IBufferService } from 'common/services/Services';\n\nconst enum Direction {\n  UP = 'A',\n  DOWN = 'B',\n  RIGHT = 'C',\n  LEFT = 'D'\n}\n\n/**\n * Concatenates all the arrow sequences together.\n * Resets the starting row to an unwrapped row, moves to the requested row,\n * then moves to requested col.\n */\nexport function moveToCellSequence(targetX: number, targetY: number, bufferService: IBufferService, applicationCursor: boolean): string {\n  const startX = bufferService.buffer.x;\n  const startY = bufferService.buffer.y;\n\n  // The alt buffer should try to navigate between rows\n  if (!bufferService.buffer.hasScrollback) {\n    return resetStartingRow(startX, startY, targetX, targetY, bufferService, applicationCursor) +\n      moveToRequestedRow(startY, targetY, bufferService, applicationCursor) +\n      moveToRequestedCol(startX, startY, targetX, targetY, bufferService, applicationCursor);\n  }\n\n  // Only move horizontally for the normal buffer\n  let direction;\n  if (startY === targetY) {\n    direction = startX > targetX ? Direction.LEFT : Direction.RIGHT;\n    return repeat(Math.abs(startX - targetX), sequence(direction, applicationCursor));\n  }\n  direction = startY > targetY ? Direction.LEFT : Direction.RIGHT;\n  const rowDifference = Math.abs(startY - targetY);\n  const cellsToMove = colsFromRowEnd(startY > targetY ? targetX : startX, bufferService) +\n    (rowDifference - 1) * bufferService.cols + 1 /* wrap around 1 row */ +\n    colsFromRowBeginning(startY > targetY ? startX : targetX, bufferService);\n  return repeat(cellsToMove, sequence(direction, applicationCursor));\n}\n\n/**\n * Find the number of cols from a row beginning to a col.\n */\nfunction colsFromRowBeginning(currX: number, bufferService: IBufferService): number {\n  return currX - 1;\n}\n\n/**\n * Find the number of cols from a col to row end.\n */\nfunction colsFromRowEnd(currX: number, bufferService: IBufferService): number {\n  return bufferService.cols - currX;\n}\n\n/**\n * If the initial position of the cursor is on a row that is wrapped, move the\n * cursor up to the first row that is not wrapped to have accurate vertical\n * positioning.\n */\nfunction resetStartingRow(startX: number, startY: number, targetX: number, targetY: number, bufferService: IBufferService, applicationCursor: boolean): string {\n  if (moveToRequestedRow(startY, targetY, bufferService, applicationCursor).length === 0) {\n    return '';\n  }\n  return repeat(bufferLine(\n    startX, startY, startX,\n    startY - wrappedRowsForRow(bufferService, startY), false, bufferService\n  ).length, sequence(Direction.LEFT, applicationCursor));\n}\n\n/**\n * Using the reset starting and ending row, move to the requested row,\n * ignoring wrapped rows\n */\nfunction moveToRequestedRow(startY: number, targetY: number, bufferService: IBufferService, applicationCursor: boolean): string {\n  const startRow = startY - wrappedRowsForRow(bufferService, startY);\n  const endRow = targetY - wrappedRowsForRow(bufferService, targetY);\n\n  const rowsToMove = Math.abs(startRow - endRow) - wrappedRowsCount(startY, targetY, bufferService);\n\n  return repeat(rowsToMove, sequence(verticalDirection(startY, targetY), applicationCursor));\n}\n\n/**\n * Move to the requested col on the ending row\n */\nfunction moveToRequestedCol(startX: number, startY: number, targetX: number, targetY: number, bufferService: IBufferService, applicationCursor: boolean): string {\n  let startRow;\n  if (moveToRequestedRow(startY, targetY, bufferService, applicationCursor).length > 0) {\n    startRow = targetY - wrappedRowsForRow(bufferService, targetY);\n  } else {\n    startRow = startY;\n  }\n\n  const endRow = targetY;\n  const direction = horizontalDirection(startX, startY, targetX, targetY, bufferService, applicationCursor);\n\n  return repeat(bufferLine(\n    startX, startRow, targetX, endRow,\n    direction === Direction.RIGHT, bufferService\n  ).length, sequence(direction, applicationCursor));\n}\n\n/**\n * Utility functions\n */\n\n/**\n * Calculates the number of wrapped rows between the unwrapped starting and\n * ending rows. These rows need to ignored since the cursor skips over them.\n */\nfunction wrappedRowsCount(startY: number, targetY: number, bufferService: IBufferService): number {\n  let wrappedRows = 0;\n  const startRow = startY - wrappedRowsForRow(bufferService, startY);\n  const endRow = targetY - wrappedRowsForRow(bufferService, targetY);\n\n  for (let i = 0; i < Math.abs(startRow - endRow); i++) {\n    const direction = verticalDirection(startY, targetY) === Direction.UP ? -1 : 1;\n    const line = bufferService.buffer.lines.get(startRow + (direction * i));\n    if (line?.isWrapped) {\n      wrappedRows++;\n    }\n  }\n\n  return wrappedRows;\n}\n\n/**\n * Calculates the number of wrapped rows that make up a given row.\n * @param currentRow The row to determine how many wrapped rows make it up\n */\nfunction wrappedRowsForRow(bufferService: IBufferService, currentRow: number): number {\n  let rowCount = 0;\n  let line = bufferService.buffer.lines.get(currentRow);\n  let lineWraps = line?.isWrapped;\n\n  while (lineWraps && currentRow >= 0 && currentRow < bufferService.rows) {\n    rowCount++;\n    line = bufferService.buffer.lines.get(--currentRow);\n    lineWraps = line?.isWrapped;\n  }\n\n  return rowCount;\n}\n\n/**\n * Direction determiners\n */\n\n/**\n * Determines if the right or left arrow is needed\n */\nfunction horizontalDirection(startX: number, startY: number, targetX: number, targetY: number, bufferService: IBufferService, applicationCursor: boolean): Direction {\n  let startRow;\n  if (moveToRequestedRow(targetX, targetY, bufferService, applicationCursor).length > 0) {\n    startRow = targetY - wrappedRowsForRow(bufferService, targetY);\n  } else {\n    startRow = startY;\n  }\n\n  if ((startX < targetX &&\n    startRow <= targetY) || // down/right or same y/right\n    (startX >= targetX &&\n    startRow < targetY)) {  // down/left or same y/left\n    return Direction.RIGHT;\n  }\n  return Direction.LEFT;\n}\n\n/**\n * Determines if the up or down arrow is needed\n */\nfunction verticalDirection(startY: number, targetY: number): Direction {\n  return startY > targetY ? Direction.UP : Direction.DOWN;\n}\n\n/**\n * Constructs the string of chars in the buffer from a starting row and col\n * to an ending row and col\n * @param startCol The starting column position\n * @param startRow The starting row position\n * @param endCol The ending column position\n * @param endRow The ending row position\n * @param forward Direction to move\n */\nfunction bufferLine(\n  startCol: number,\n  startRow: number,\n  endCol: number,\n  endRow: number,\n  forward: boolean,\n  bufferService: IBufferService\n): string {\n  let currentCol = startCol;\n  let currentRow = startRow;\n  let bufferStr = '';\n\n  while (currentCol !== endCol || currentRow !== endRow) {\n    currentCol += forward ? 1 : -1;\n\n    if (forward && currentCol > bufferService.cols - 1) {\n      bufferStr += bufferService.buffer.translateBufferLineToString(\n        currentRow, false, startCol, currentCol\n      );\n      currentCol = 0;\n      startCol = 0;\n      currentRow++;\n    } else if (!forward && currentCol < 0) {\n      bufferStr += bufferService.buffer.translateBufferLineToString(\n        currentRow, false, 0, startCol + 1\n      );\n      currentCol = bufferService.cols - 1;\n      startCol = currentCol;\n      currentRow--;\n    }\n  }\n\n  return bufferStr + bufferService.buffer.translateBufferLineToString(\n    currentRow, false, startCol, currentCol\n  );\n}\n\n/**\n * Constructs the escape sequence for clicking an arrow\n * @param direction The direction to move\n */\nfunction sequence(direction: Direction, applicationCursor: boolean): string {\n  const mod =  applicationCursor ? 'O' : '[';\n  return C0.ESC + mod + direction;\n}\n\n/**\n * Returns a string repeated a given number of times\n * Polyfill from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat\n * @param count The number of times to repeat the string\n * @param string The string that is to be repeated\n */\nfunction repeat(count: number, str: string): string {\n  count = Math.floor(count);\n  let rpt = '';\n  for (let i = 0; i < count; i++) {\n    rpt += str;\n  }\n  return rpt;\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { Terminal as ITerminalApi, IMarker, IDisposable, ILinkMatcherOptions, ITheme, ILocalizableStrings, ITerminalAddon, ISelectionPosition, IBufferNamespace as IBufferNamespaceApi, IParser, ILinkProvider, IUnicodeHandling, FontWeight, IModes } from 'xterm';\nimport { ITerminal } from 'browser/Types';\nimport { Terminal as TerminalCore } from 'browser/Terminal';\nimport * as Strings from 'browser/LocalizableStrings';\nimport { IEvent } from 'common/EventEmitter';\nimport { ParserApi } from 'common/public/ParserApi';\nimport { UnicodeApi } from 'common/public/UnicodeApi';\nimport { AddonManager } from 'common/public/AddonManager';\nimport { BufferNamespaceApi } from 'common/public/BufferNamespaceApi';\nimport { ITerminalOptions } from 'common/Types';\n\n/**\n * The set of options that only have an effect when set in the Terminal constructor.\n */\nconst CONSTRUCTOR_ONLY_OPTIONS = ['cols', 'rows'];\n\nexport class Terminal implements ITerminalApi {\n  private _core: ITerminal;\n  private _addonManager: AddonManager;\n  private _parser: IParser | undefined;\n  private _buffer: BufferNamespaceApi | undefined;\n  private _publicOptions: ITerminalOptions;\n\n  constructor(options?: ITerminalOptions) {\n    this._core = new TerminalCore(options);\n    this._addonManager = new AddonManager();\n\n    this._publicOptions = { ... this._core.options };\n    const getter = (propName: string): any => {\n      return this._core.options[propName];\n    };\n    const setter = (propName: string, value: any): void => {\n      this._checkReadonlyOptions(propName);\n      this._core.options[propName] = value;\n    };\n\n    for (const propName in this._core.options) {\n      const desc = {\n        get: getter.bind(this, propName),\n        set: setter.bind(this, propName)\n      };\n      Object.defineProperty(this._publicOptions, propName, desc);\n    }\n  }\n\n  private _checkReadonlyOptions(propName: string): void {\n    // Throw an error if any constructor only option is modified\n    // from terminal.options\n    // Modifications from anywhere else are allowed\n    if (CONSTRUCTOR_ONLY_OPTIONS.includes(propName)) {\n      throw new Error(`Option \"${propName}\" can only be set in the constructor`);\n    }\n  }\n\n  private _checkProposedApi(): void {\n    if (!this._core.optionsService.rawOptions.allowProposedApi) {\n      throw new Error('You must set the allowProposedApi option to true to use proposed API');\n    }\n  }\n\n  public get onBell(): IEvent<void> { return this._core.onBell; }\n  public get onBinary(): IEvent<string> { return this._core.onBinary; }\n  public get onCursorMove(): IEvent<void> { return this._core.onCursorMove; }\n  public get onData(): IEvent<string> { return this._core.onData; }\n  public get onKey(): IEvent<{ key: string, domEvent: KeyboardEvent }> { return this._core.onKey; }\n  public get onLineFeed(): IEvent<void> { return this._core.onLineFeed; }\n  public get onRender(): IEvent<{ start: number, end: number }> { return this._core.onRender; }\n  public get onResize(): IEvent<{ cols: number, rows: number }> { return this._core.onResize; }\n  public get onScroll(): IEvent<number> { return this._core.onScroll; }\n  public get onSelectionChange(): IEvent<void> { return this._core.onSelectionChange; }\n  public get onTitleChange(): IEvent<string> { return this._core.onTitleChange; }\n\n  public get element(): HTMLElement | undefined { return this._core.element; }\n  public get parser(): IParser {\n    this._checkProposedApi();\n    if (!this._parser) {\n      this._parser = new ParserApi(this._core);\n    }\n    return this._parser;\n  }\n  public get unicode(): IUnicodeHandling {\n    this._checkProposedApi();\n    return new UnicodeApi(this._core);\n  }\n  public get textarea(): HTMLTextAreaElement | undefined { return this._core.textarea; }\n  public get rows(): number { return this._core.rows; }\n  public get cols(): number { return this._core.cols; }\n  public get buffer(): IBufferNamespaceApi {\n    this._checkProposedApi();\n    if (!this._buffer) {\n      this._buffer = new BufferNamespaceApi(this._core);\n    }\n    return this._buffer;\n  }\n  public get markers(): ReadonlyArray<IMarker> {\n    this._checkProposedApi();\n    return this._core.markers;\n  }\n  public get modes(): IModes {\n    const m = this._core.coreService.decPrivateModes;\n    let mouseTrackingMode: 'none' | 'x10' | 'vt200' | 'drag' | 'any' = 'none';\n    switch (this._core.coreMouseService.activeProtocol) {\n      case 'X10': mouseTrackingMode = 'x10'; break;\n      case 'VT200': mouseTrackingMode = 'vt200'; break;\n      case 'DRAG': mouseTrackingMode = 'drag'; break;\n      case 'ANY': mouseTrackingMode = 'any'; break;\n    }\n    return {\n      applicationCursorKeysMode: m.applicationCursorKeys,\n      applicationKeypadMode: m.applicationKeypad,\n      bracketedPasteMode: m.bracketedPasteMode,\n      insertMode: this._core.coreService.modes.insertMode,\n      mouseTrackingMode: mouseTrackingMode,\n      originMode: m.origin,\n      reverseWraparoundMode: m.reverseWraparound,\n      sendFocusMode: m.sendFocus,\n      wraparoundMode: m.wraparound\n    };\n  }\n  public get options(): ITerminalOptions {\n    return this._publicOptions;\n  }\n  public set options(options: ITerminalOptions) {\n    for (const propName in options) {\n      this._publicOptions[propName] = options[propName];\n    }\n  }\n  public blur(): void {\n    this._core.blur();\n  }\n  public focus(): void {\n    this._core.focus();\n  }\n  public resize(columns: number, rows: number): void {\n    this._verifyIntegers(columns, rows);\n    this._core.resize(columns, rows);\n  }\n  public open(parent: HTMLElement): void {\n    this._core.open(parent);\n  }\n  public attachCustomKeyEventHandler(customKeyEventHandler: (event: KeyboardEvent) => boolean): void {\n    this._core.attachCustomKeyEventHandler(customKeyEventHandler);\n  }\n  public registerLinkMatcher(regex: RegExp, handler: (event: MouseEvent, uri: string) => void, options?: ILinkMatcherOptions): number {\n    this._checkProposedApi();\n    return this._core.registerLinkMatcher(regex, handler, options);\n  }\n  public deregisterLinkMatcher(matcherId: number): void {\n    this._checkProposedApi();\n    this._core.deregisterLinkMatcher(matcherId);\n  }\n  public registerLinkProvider(linkProvider: ILinkProvider): IDisposable {\n    this._checkProposedApi();\n    return this._core.registerLinkProvider(linkProvider);\n  }\n  public registerCharacterJoiner(handler: (text: string) => [number, number][]): number {\n    this._checkProposedApi();\n    return this._core.registerCharacterJoiner(handler);\n  }\n  public deregisterCharacterJoiner(joinerId: number): void {\n    this._checkProposedApi();\n    this._core.deregisterCharacterJoiner(joinerId);\n  }\n  public registerMarker(cursorYOffset: number): IMarker | undefined {\n    this._checkProposedApi();\n    this._verifyIntegers(cursorYOffset);\n    return this._core.addMarker(cursorYOffset);\n  }\n  public addMarker(cursorYOffset: number): IMarker | undefined {\n    return this.registerMarker(cursorYOffset);\n  }\n  public hasSelection(): boolean {\n    return this._core.hasSelection();\n  }\n  public select(column: number, row: number, length: number): void {\n    this._verifyIntegers(column, row, length);\n    this._core.select(column, row, length);\n  }\n  public getSelection(): string {\n    return this._core.getSelection();\n  }\n  public getSelectionPosition(): ISelectionPosition | undefined {\n    return this._core.getSelectionPosition();\n  }\n  public clearSelection(): void {\n    this._core.clearSelection();\n  }\n  public selectAll(): void {\n    this._core.selectAll();\n  }\n  public selectLines(start: number, end: number): void {\n    this._verifyIntegers(start, end);\n    this._core.selectLines(start, end);\n  }\n  public dispose(): void {\n    this._addonManager.dispose();\n    this._core.dispose();\n  }\n  public scrollLines(amount: number): void {\n    this._verifyIntegers(amount);\n    this._core.scrollLines(amount);\n  }\n  public scrollPages(pageCount: number): void {\n    this._verifyIntegers(pageCount);\n    this._core.scrollPages(pageCount);\n  }\n  public scrollToTop(): void {\n    this._core.scrollToTop();\n  }\n  public scrollToBottom(): void {\n    this._core.scrollToBottom();\n  }\n  public scrollToLine(line: number): void {\n    this._verifyIntegers(line);\n    this._core.scrollToLine(line);\n  }\n  public clear(): void {\n    this._core.clear();\n  }\n  public write(data: string | Uint8Array, callback?: () => void): void {\n    this._core.write(data, callback);\n  }\n  public writeUtf8(data: Uint8Array, callback?: () => void): void {\n    this._core.write(data, callback);\n  }\n  public writeln(data: string | Uint8Array, callback?: () => void): void {\n    this._core.write(data);\n    this._core.write('\\r\\n', callback);\n  }\n  public paste(data: string): void {\n    this._core.paste(data);\n  }\n  public getOption(key: 'bellSound' | 'bellStyle' | 'cursorStyle' | 'fontFamily' | 'logLevel' | 'rendererType' | 'termName' | 'wordSeparator'): string;\n  public getOption(key: 'allowTransparency' | 'altClickMovesCursor' | 'cancelEvents' | 'convertEol' | 'cursorBlink' | 'disableStdin' | 'macOptionIsMeta' | 'rightClickSelectsWord' | 'popOnBell' | 'visualBell'): boolean;\n  public getOption(key: 'cols' | 'fontSize' | 'letterSpacing' | 'lineHeight' | 'rows' | 'tabStopWidth' | 'scrollback'): number;\n  public getOption(key: 'fontWeight' | 'fontWeightBold'): FontWeight;\n  public getOption(key: string): any;\n  public getOption(key: any): any {\n    return this._core.optionsService.getOption(key);\n  }\n  public setOption(key: 'bellSound' | 'fontFamily' | 'termName' | 'wordSeparator', value: string): void;\n  public setOption(key: 'fontWeight' | 'fontWeightBold', value: 'normal' | 'bold' | '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | number): void;\n  public setOption(key: 'logLevel', value: 'debug' | 'info' | 'warn' | 'error' | 'off'): void;\n  public setOption(key: 'bellStyle', value: 'none' | 'visual' | 'sound' | 'both'): void;\n  public setOption(key: 'cursorStyle', value: 'block' | 'underline' | 'bar'): void;\n  public setOption(key: 'allowTransparency' | 'altClickMovesCursor' | 'cancelEvents' | 'convertEol' | 'cursorBlink' | 'disableStdin' | 'macOptionIsMeta' | 'rightClickSelectsWord' | 'popOnBell' | 'visualBell', value: boolean): void;\n  public setOption(key: 'fontSize' | 'letterSpacing' | 'lineHeight' | 'tabStopWidth' | 'scrollback', value: number): void;\n  public setOption(key: 'theme', value: ITheme): void;\n  public setOption(key: 'cols' | 'rows', value: number): void;\n  public setOption(key: string, value: any): void;\n  public setOption(key: any, value: any): void {\n    this._checkReadonlyOptions(key);\n    this._core.optionsService.setOption(key, value);\n  }\n  public refresh(start: number, end: number): void {\n    this._verifyIntegers(start, end);\n    this._core.refresh(start, end);\n  }\n  public reset(): void {\n    this._core.reset();\n  }\n  public clearTextureAtlas(): void {\n    this._core.clearTextureAtlas();\n  }\n  public loadAddon(addon: ITerminalAddon): void {\n    return this._addonManager.loadAddon(this, addon);\n  }\n  public static get strings(): ILocalizableStrings {\n    return Strings;\n  }\n\n  private _verifyIntegers(...values: number[]): void {\n    for (const value of values) {\n      if (value === Infinity || isNaN(value) || value % 1 !== 0) {\n        throw new Error('This API only accepts integers');\n      }\n    }\n  }\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IRenderDimensions, IRenderLayer } from 'browser/renderer/Types';\nimport { ICellData } from 'common/Types';\nimport { DEFAULT_COLOR, WHITESPACE_CELL_CHAR, WHITESPACE_CELL_CODE, Attributes } from 'common/buffer/Constants';\nimport { IGlyphIdentifier } from 'browser/renderer/atlas/Types';\nimport { DIM_OPACITY, INVERTED_DEFAULT_COLOR, TEXT_BASELINE } from 'browser/renderer/atlas/Constants';\nimport { BaseCharAtlas } from 'browser/renderer/atlas/BaseCharAtlas';\nimport { acquireCharAtlas } from 'browser/renderer/atlas/CharAtlasCache';\nimport { AttributeData } from 'common/buffer/AttributeData';\nimport { IColorSet, IColor } from 'browser/Types';\nimport { CellData } from 'common/buffer/CellData';\nimport { IBufferService, IOptionsService } from 'common/services/Services';\nimport { throwIfFalsy } from 'browser/renderer/RendererUtils';\nimport { channels, color, rgba } from 'browser/Color';\nimport { removeElementFromParent } from 'browser/Dom';\nimport { tryDrawCustomChar } from 'browser/renderer/CustomGlyphs';\n\nexport abstract class BaseRenderLayer implements IRenderLayer {\n  private _canvas: HTMLCanvasElement;\n  protected _ctx!: CanvasRenderingContext2D;\n  private _scaledCharWidth: number = 0;\n  private _scaledCharHeight: number = 0;\n  private _scaledCellWidth: number = 0;\n  private _scaledCellHeight: number = 0;\n  private _scaledCharLeft: number = 0;\n  private _scaledCharTop: number = 0;\n\n  protected _charAtlas: BaseCharAtlas | undefined;\n\n  /**\n   * An object that's reused when drawing glyphs in order to reduce GC.\n   */\n  private _currentGlyphIdentifier: IGlyphIdentifier = {\n    chars: '',\n    code: 0,\n    bg: 0,\n    fg: 0,\n    bold: false,\n    dim: false,\n    italic: false\n  };\n\n  constructor(\n    private _container: HTMLElement,\n    id: string,\n    zIndex: number,\n    private _alpha: boolean,\n    protected _colors: IColorSet,\n    private _rendererId: number,\n    protected readonly _bufferService: IBufferService,\n    protected readonly _optionsService: IOptionsService\n  ) {\n    this._canvas = document.createElement('canvas');\n    this._canvas.classList.add(`xterm-${id}-layer`);\n    this._canvas.style.zIndex = zIndex.toString();\n    this._initCanvas();\n    this._container.appendChild(this._canvas);\n  }\n\n  public dispose(): void {\n    removeElementFromParent(this._canvas);\n    this._charAtlas?.dispose();\n  }\n\n  private _initCanvas(): void {\n    this._ctx = throwIfFalsy(this._canvas.getContext('2d', { alpha: this._alpha }));\n    // Draw the background if this is an opaque layer\n    if (!this._alpha) {\n      this._clearAll();\n    }\n  }\n\n  public onOptionsChanged(): void {}\n  public onBlur(): void {}\n  public onFocus(): void {}\n  public onCursorMove(): void {}\n  public onGridChanged(startRow: number, endRow: number): void {}\n  public onSelectionChanged(start: [number, number] | undefined, end: [number, number] | undefined, columnSelectMode: boolean = false): void {}\n\n  public setColors(colorSet: IColorSet): void {\n    this._refreshCharAtlas(colorSet);\n  }\n\n  protected _setTransparency(alpha: boolean): void {\n    // Do nothing when alpha doesn't change\n    if (alpha === this._alpha) {\n      return;\n    }\n\n    // Create new canvas and replace old one\n    const oldCanvas = this._canvas;\n    this._alpha = alpha;\n    // Cloning preserves properties\n    this._canvas = this._canvas.cloneNode() as HTMLCanvasElement;\n    this._initCanvas();\n    this._container.replaceChild(this._canvas, oldCanvas);\n\n    // Regenerate char atlas and force a full redraw\n    this._refreshCharAtlas(this._colors);\n    this.onGridChanged(0, this._bufferService.rows - 1);\n  }\n\n  /**\n   * Refreshes the char atlas, aquiring a new one if necessary.\n   * @param colorSet The color set to use for the char atlas.\n   */\n  private _refreshCharAtlas(colorSet: IColorSet): void {\n    if (this._scaledCharWidth <= 0 && this._scaledCharHeight <= 0) {\n      return;\n    }\n    this._charAtlas = acquireCharAtlas(this._optionsService.rawOptions, this._rendererId, colorSet, this._scaledCharWidth, this._scaledCharHeight);\n    this._charAtlas.warmUp();\n  }\n\n  public resize(dim: IRenderDimensions): void {\n    this._scaledCellWidth = dim.scaledCellWidth;\n    this._scaledCellHeight = dim.scaledCellHeight;\n    this._scaledCharWidth = dim.scaledCharWidth;\n    this._scaledCharHeight = dim.scaledCharHeight;\n    this._scaledCharLeft = dim.scaledCharLeft;\n    this._scaledCharTop = dim.scaledCharTop;\n    this._canvas.width = dim.scaledCanvasWidth;\n    this._canvas.height = dim.scaledCanvasHeight;\n    this._canvas.style.width = `${dim.canvasWidth}px`;\n    this._canvas.style.height = `${dim.canvasHeight}px`;\n\n    // Draw the background if this is an opaque layer\n    if (!this._alpha) {\n      this._clearAll();\n    }\n\n    this._refreshCharAtlas(this._colors);\n  }\n\n  public abstract reset(): void;\n\n  public clearTextureAtlas(): void {\n    this._charAtlas?.clear();\n  }\n\n  /**\n   * Fills 1+ cells completely. This uses the existing fillStyle on the context.\n   * @param x The column to start at.\n   * @param y The row to start at\n   * @param width The number of columns to fill.\n   * @param height The number of rows to fill.\n   */\n  protected _fillCells(x: number, y: number, width: number, height: number): void {\n    this._ctx.fillRect(\n      x * this._scaledCellWidth,\n      y * this._scaledCellHeight,\n      width * this._scaledCellWidth,\n      height * this._scaledCellHeight);\n  }\n\n  /**\n     * Fills a 1px line (2px on HDPI) at the middle of the cell. This uses the\n     * existing fillStyle on the context.\n     * @param x The column to fill.\n     * @param y The row to fill.\n     */\n  protected _fillMiddleLineAtCells(x: number, y: number, width: number = 1): void {\n    const cellOffset = Math.ceil(this._scaledCellHeight * 0.5);\n    this._ctx.fillRect(\n      x * this._scaledCellWidth,\n      (y + 1) * this._scaledCellHeight - cellOffset - window.devicePixelRatio,\n      width * this._scaledCellWidth,\n      window.devicePixelRatio);\n  }\n\n  /**\n   * Fills a 1px line (2px on HDPI) at the bottom of the cell. This uses the\n   * existing fillStyle on the context.\n   * @param x The column to fill.\n   * @param y The row to fill.\n   */\n  protected _fillBottomLineAtCells(x: number, y: number, width: number = 1): void {\n    this._ctx.fillRect(\n      x * this._scaledCellWidth,\n      (y + 1) * this._scaledCellHeight - window.devicePixelRatio - 1 /* Ensure it's drawn within the cell */,\n      width * this._scaledCellWidth,\n      window.devicePixelRatio);\n  }\n\n  /**\n   * Fills a 1px line (2px on HDPI) at the left of the cell. This uses the\n   * existing fillStyle on the context.\n   * @param x The column to fill.\n   * @param y The row to fill.\n   */\n  protected _fillLeftLineAtCell(x: number, y: number, width: number): void {\n    this._ctx.fillRect(\n      x * this._scaledCellWidth,\n      y * this._scaledCellHeight,\n      window.devicePixelRatio * width,\n      this._scaledCellHeight);\n  }\n\n  /**\n   * Strokes a 1px rectangle (2px on HDPI) around a cell. This uses the existing\n   * strokeStyle on the context.\n   * @param x The column to fill.\n   * @param y The row to fill.\n   */\n  protected _strokeRectAtCell(x: number, y: number, width: number, height: number): void {\n    this._ctx.lineWidth = window.devicePixelRatio;\n    this._ctx.strokeRect(\n      x * this._scaledCellWidth + window.devicePixelRatio / 2,\n      y * this._scaledCellHeight + (window.devicePixelRatio / 2),\n      width * this._scaledCellWidth - window.devicePixelRatio,\n      (height * this._scaledCellHeight) - window.devicePixelRatio);\n  }\n\n  /**\n   * Clears the entire canvas.\n   */\n  protected _clearAll(): void {\n    if (this._alpha) {\n      this._ctx.clearRect(0, 0, this._canvas.width, this._canvas.height);\n    } else {\n      this._ctx.fillStyle = this._colors.background.css;\n      this._ctx.fillRect(0, 0, this._canvas.width, this._canvas.height);\n    }\n  }\n\n  /**\n   * Clears 1+ cells completely.\n   * @param x The column to start at.\n   * @param y The row to start at.\n   * @param width The number of columns to clear.\n   * @param height The number of rows to clear.\n   */\n  protected _clearCells(x: number, y: number, width: number, height: number): void {\n    if (this._alpha) {\n      this._ctx.clearRect(\n        x * this._scaledCellWidth,\n        y * this._scaledCellHeight,\n        width * this._scaledCellWidth,\n        height * this._scaledCellHeight);\n    } else {\n      this._ctx.fillStyle = this._colors.background.css;\n      this._ctx.fillRect(\n        x * this._scaledCellWidth,\n        y * this._scaledCellHeight,\n        width * this._scaledCellWidth,\n        height * this._scaledCellHeight);\n    }\n  }\n\n  /**\n   * Draws a truecolor character at the cell. The character will be clipped to\n   * ensure that it fits with the cell, including the cell to the right if it's\n   * a wide character. This uses the existing fillStyle on the context.\n   * @param cell The cell data for the character to draw.\n   * @param x The column to draw at.\n   * @param y The row to draw at.\n   * @param color The color of the character.\n   */\n  protected _fillCharTrueColor(cell: CellData, x: number, y: number): void {\n    this._ctx.font = this._getFont(false, false);\n    this._ctx.textBaseline = TEXT_BASELINE;\n    this._clipRow(y);\n\n    // Draw custom characters if applicable\n    let drawSuccess = false;\n    if (this._optionsService.rawOptions.customGlyphs !== false) {\n      drawSuccess = tryDrawCustomChar(this._ctx, cell.getChars(), x * this._scaledCellWidth, y * this._scaledCellHeight, this._scaledCellWidth, this._scaledCellHeight);\n    }\n\n    // Draw the character\n    if (!drawSuccess) {\n      this._ctx.fillText(\n        cell.getChars(),\n        x * this._scaledCellWidth + this._scaledCharLeft,\n        y * this._scaledCellHeight + this._scaledCharTop + this._scaledCharHeight);\n    }\n  }\n\n  /**\n   * Draws one or more characters at a cell. If possible this will draw using\n   * the character atlas to reduce draw time.\n   * @param chars The character or characters.\n   * @param code The character code.\n   * @param width The width of the characters.\n   * @param x The column to draw at.\n   * @param y The row to draw at.\n   * @param fg The foreground color, in the format stored within the attributes.\n   * @param bg The background color, in the format stored within the attributes.\n   * This is used to validate whether a cached image can be used.\n   * @param bold Whether the text is bold.\n   */\n  protected _drawChars(cell: ICellData, x: number, y: number): void {\n    const contrastColor = this._getContrastColor(cell);\n\n    // skip cache right away if we draw in RGB\n    // Note: to avoid bad runtime JoinedCellData will be skipped\n    //       in the cache handler itself (atlasDidDraw == false) and\n    //       fall through to uncached later down below\n    if (contrastColor || cell.isFgRGB() || cell.isBgRGB()) {\n      this._drawUncachedChars(cell, x, y, contrastColor);\n      return;\n    }\n\n    let fg;\n    let bg;\n    if (cell.isInverse()) {\n      fg = (cell.isBgDefault()) ? INVERTED_DEFAULT_COLOR : cell.getBgColor();\n      bg = (cell.isFgDefault()) ? INVERTED_DEFAULT_COLOR : cell.getFgColor();\n    } else {\n      bg = (cell.isBgDefault()) ? DEFAULT_COLOR : cell.getBgColor();\n      fg = (cell.isFgDefault()) ? DEFAULT_COLOR : cell.getFgColor();\n    }\n\n    const drawInBrightColor = this._optionsService.rawOptions.drawBoldTextInBrightColors && cell.isBold() && fg < 8;\n\n    fg += drawInBrightColor ? 8 : 0;\n    this._currentGlyphIdentifier.chars = cell.getChars() || WHITESPACE_CELL_CHAR;\n    this._currentGlyphIdentifier.code = cell.getCode() || WHITESPACE_CELL_CODE;\n    this._currentGlyphIdentifier.bg = bg;\n    this._currentGlyphIdentifier.fg = fg;\n    this._currentGlyphIdentifier.bold = !!cell.isBold();\n    this._currentGlyphIdentifier.dim = !!cell.isDim();\n    this._currentGlyphIdentifier.italic = !!cell.isItalic();\n    const atlasDidDraw = this._charAtlas?.draw(this._ctx, this._currentGlyphIdentifier, x * this._scaledCellWidth + this._scaledCharLeft, y * this._scaledCellHeight + this._scaledCharTop);\n\n    if (!atlasDidDraw) {\n      this._drawUncachedChars(cell, x, y);\n    }\n  }\n\n  /**\n   * Draws one or more characters at one or more cells. The character(s) will be\n   * clipped to ensure that they fit with the cell(s), including the cell to the\n   * right if the last character is a wide character.\n   * @param chars The character.\n   * @param width The width of the character.\n   * @param fg The foreground color, in the format stored within the attributes.\n   * @param x The column to draw at.\n   * @param y The row to draw at.\n   */\n  private _drawUncachedChars(cell: ICellData, x: number, y: number, fgOverride?: IColor): void {\n    this._ctx.save();\n    this._ctx.font = this._getFont(!!cell.isBold(), !!cell.isItalic());\n    this._ctx.textBaseline = TEXT_BASELINE;\n\n    if (cell.isInverse()) {\n      if (fgOverride) {\n        this._ctx.fillStyle = fgOverride.css;\n      } else if (cell.isBgDefault()) {\n        this._ctx.fillStyle = color.opaque(this._colors.background).css;\n      } else if (cell.isBgRGB()) {\n        this._ctx.fillStyle = `rgb(${AttributeData.toColorRGB(cell.getBgColor()).join(',')})`;\n      } else {\n        let bg = cell.getBgColor();\n        if (this._optionsService.rawOptions.drawBoldTextInBrightColors && cell.isBold() && bg < 8) {\n          bg += 8;\n        }\n        this._ctx.fillStyle = this._colors.ansi[bg].css;\n      }\n    } else {\n      if (fgOverride) {\n        this._ctx.fillStyle = fgOverride.css;\n      } else if (cell.isFgDefault()) {\n        this._ctx.fillStyle = this._colors.foreground.css;\n      } else if (cell.isFgRGB()) {\n        this._ctx.fillStyle = `rgb(${AttributeData.toColorRGB(cell.getFgColor()).join(',')})`;\n      } else {\n        let fg = cell.getFgColor();\n        if (this._optionsService.rawOptions.drawBoldTextInBrightColors && cell.isBold() && fg < 8) {\n          fg += 8;\n        }\n        this._ctx.fillStyle = this._colors.ansi[fg].css;\n      }\n    }\n\n    this._clipRow(y);\n\n    // Apply alpha to dim the character\n    if (cell.isDim()) {\n      this._ctx.globalAlpha = DIM_OPACITY;\n    }\n\n    // Draw custom characters if applicable\n    let drawSuccess = false;\n    if (this._optionsService.rawOptions.customGlyphs !== false) {\n      drawSuccess = tryDrawCustomChar(this._ctx, cell.getChars(), x * this._scaledCellWidth, y * this._scaledCellHeight, this._scaledCellWidth, this._scaledCellHeight);\n    }\n\n    // Draw the character\n    if (!drawSuccess) {\n      this._ctx.fillText(\n        cell.getChars(),\n        x * this._scaledCellWidth + this._scaledCharLeft,\n        y * this._scaledCellHeight + this._scaledCharTop + this._scaledCharHeight);\n    }\n\n    this._ctx.restore();\n  }\n\n\n  /**\n   * Clips a row to ensure no pixels will be drawn outside the cells in the row.\n   * @param y The row to clip.\n   */\n  private _clipRow(y: number): void {\n    this._ctx.beginPath();\n    this._ctx.rect(\n      0,\n      y * this._scaledCellHeight,\n      this._bufferService.cols * this._scaledCellWidth,\n      this._scaledCellHeight);\n    this._ctx.clip();\n  }\n\n  /**\n   * Gets the current font.\n   * @param isBold If we should use the bold fontWeight.\n   */\n  protected _getFont(isBold: boolean, isItalic: boolean): string {\n    const fontWeight = isBold ? this._optionsService.rawOptions.fontWeightBold : this._optionsService.rawOptions.fontWeight;\n    const fontStyle = isItalic ? 'italic' : '';\n\n    return `${fontStyle} ${fontWeight} ${this._optionsService.rawOptions.fontSize * window.devicePixelRatio}px ${this._optionsService.rawOptions.fontFamily}`;\n  }\n\n  private _getContrastColor(cell: CellData): IColor | undefined {\n    if (this._optionsService.rawOptions.minimumContrastRatio === 1) {\n      return undefined;\n    }\n\n    // Try get from cache first\n    const adjustedColor = this._colors.contrastCache.getColor(cell.bg, cell.fg);\n    if (adjustedColor !== undefined) {\n      return adjustedColor || undefined;\n    }\n\n    let fgColor = cell.getFgColor();\n    let fgColorMode = cell.getFgColorMode();\n    let bgColor = cell.getBgColor();\n    let bgColorMode = cell.getBgColorMode();\n    const isInverse = !!cell.isInverse();\n    const isBold = !!cell.isInverse();\n    if (isInverse) {\n      const temp = fgColor;\n      fgColor = bgColor;\n      bgColor = temp;\n      const temp2 = fgColorMode;\n      fgColorMode = bgColorMode;\n      bgColorMode = temp2;\n    }\n\n    const bgRgba = this._resolveBackgroundRgba(bgColorMode, bgColor, isInverse);\n    const fgRgba = this._resolveForegroundRgba(fgColorMode, fgColor, isInverse, isBold);\n    const result = rgba.ensureContrastRatio(bgRgba, fgRgba, this._optionsService.rawOptions.minimumContrastRatio);\n\n    if (!result) {\n      this._colors.contrastCache.setColor(cell.bg, cell.fg, null);\n      return undefined;\n    }\n\n    const color: IColor = {\n      css: channels.toCss(\n        (result >> 24) & 0xFF,\n        (result >> 16) & 0xFF,\n        (result >> 8) & 0xFF\n      ),\n      rgba: result\n    };\n    this._colors.contrastCache.setColor(cell.bg, cell.fg, color);\n\n    return color;\n  }\n\n  private _resolveBackgroundRgba(bgColorMode: number, bgColor: number, inverse: boolean): number {\n    switch (bgColorMode) {\n      case Attributes.CM_P16:\n      case Attributes.CM_P256:\n        return this._colors.ansi[bgColor].rgba;\n      case Attributes.CM_RGB:\n        return bgColor << 8;\n      case Attributes.CM_DEFAULT:\n      default:\n        if (inverse) {\n          return this._colors.foreground.rgba;\n        }\n        return this._colors.background.rgba;\n    }\n  }\n\n  private _resolveForegroundRgba(fgColorMode: number, fgColor: number, inverse: boolean, bold: boolean): number {\n    switch (fgColorMode) {\n      case Attributes.CM_P16:\n      case Attributes.CM_P256:\n        if (this._optionsService.rawOptions.drawBoldTextInBrightColors && bold && fgColor < 8) {\n          fgColor += 8;\n        }\n        return this._colors.ansi[fgColor].rgba;\n      case Attributes.CM_RGB:\n        return fgColor << 8;\n      case Attributes.CM_DEFAULT:\n      default:\n        if (inverse) {\n          return this._colors.background.rgba;\n        }\n        return this._colors.foreground.rgba;\n    }\n  }\n}\n\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IRenderDimensions, IRequestRedrawEvent } from 'browser/renderer/Types';\nimport { BaseRenderLayer } from 'browser/renderer/BaseRenderLayer';\nimport { ICellData } from 'common/Types';\nimport { CellData } from 'common/buffer/CellData';\nimport { IColorSet } from 'browser/Types';\nimport { IBufferService, IOptionsService, ICoreService } from 'common/services/Services';\nimport { IEventEmitter } from 'common/EventEmitter';\nimport { ICoreBrowserService } from 'browser/services/Services';\n\ninterface ICursorState {\n  x: number;\n  y: number;\n  isFocused: boolean;\n  style: string;\n  width: number;\n}\n\n/**\n * The time between cursor blinks.\n */\nconst BLINK_INTERVAL = 600;\n\nexport class CursorRenderLayer extends BaseRenderLayer {\n  private _state: ICursorState;\n  private _cursorRenderers: {[key: string]: (x: number, y: number, cell: ICellData) => void};\n  private _cursorBlinkStateManager: CursorBlinkStateManager | undefined;\n  private _cell: ICellData = new CellData();\n\n  constructor(\n    container: HTMLElement,\n    zIndex: number,\n    colors: IColorSet,\n    rendererId: number,\n    private _onRequestRedraw: IEventEmitter<IRequestRedrawEvent>,\n    @IBufferService bufferService: IBufferService,\n    @IOptionsService optionsService: IOptionsService,\n    @ICoreService private readonly _coreService: ICoreService,\n    @ICoreBrowserService private readonly _coreBrowserService: ICoreBrowserService\n  ) {\n    super(container, 'cursor', zIndex, true, colors, rendererId, bufferService, optionsService);\n    this._state = {\n      x: 0,\n      y: 0,\n      isFocused: false,\n      style: '',\n      width: 0\n    };\n    this._cursorRenderers = {\n      'bar': this._renderBarCursor.bind(this),\n      'block': this._renderBlockCursor.bind(this),\n      'underline': this._renderUnderlineCursor.bind(this)\n    };\n  }\n\n  public dispose(): void {\n    if (this._cursorBlinkStateManager) {\n      this._cursorBlinkStateManager.dispose();\n      this._cursorBlinkStateManager = undefined;\n    }\n    super.dispose();\n  }\n\n  public resize(dim: IRenderDimensions): void {\n    super.resize(dim);\n    // Resizing the canvas discards the contents of the canvas so clear state\n    this._state = {\n      x: 0,\n      y: 0,\n      isFocused: false,\n      style: '',\n      width: 0\n    };\n  }\n\n  public reset(): void {\n    this._clearCursor();\n    this._cursorBlinkStateManager?.restartBlinkAnimation();\n    this.onOptionsChanged();\n  }\n\n  public onBlur(): void {\n    this._cursorBlinkStateManager?.pause();\n    this._onRequestRedraw.fire({ start: this._bufferService.buffer.y, end: this._bufferService.buffer.y });\n  }\n\n  public onFocus(): void {\n    this._cursorBlinkStateManager?.resume();\n    this._onRequestRedraw.fire({ start: this._bufferService.buffer.y, end: this._bufferService.buffer.y });\n  }\n\n  public onOptionsChanged(): void {\n    if (this._optionsService.rawOptions.cursorBlink) {\n      if (!this._cursorBlinkStateManager) {\n        this._cursorBlinkStateManager = new CursorBlinkStateManager(this._coreBrowserService.isFocused, () => {\n          this._render(true);\n        });\n      }\n    } else {\n      this._cursorBlinkStateManager?.dispose();\n      this._cursorBlinkStateManager = undefined;\n    }\n    // Request a refresh from the terminal as management of rendering is being\n    // moved back to the terminal\n    this._onRequestRedraw.fire({ start: this._bufferService.buffer.y, end: this._bufferService.buffer.y });\n  }\n\n  public onCursorMove(): void {\n    this._cursorBlinkStateManager?.restartBlinkAnimation();\n  }\n\n  public onGridChanged(startRow: number, endRow: number): void {\n    if (!this._cursorBlinkStateManager || this._cursorBlinkStateManager.isPaused) {\n      this._render(false);\n    } else {\n      this._cursorBlinkStateManager.restartBlinkAnimation();\n    }\n  }\n\n  private _render(triggeredByAnimationFrame: boolean): void {\n    // Don't draw the cursor if it's hidden\n    if (!this._coreService.isCursorInitialized || this._coreService.isCursorHidden) {\n      this._clearCursor();\n      return;\n    }\n\n    const cursorY = this._bufferService.buffer.ybase + this._bufferService.buffer.y;\n    const viewportRelativeCursorY = cursorY - this._bufferService.buffer.ydisp;\n\n    // Don't draw the cursor if it's off-screen\n    if (viewportRelativeCursorY < 0 || viewportRelativeCursorY >= this._bufferService.rows) {\n      this._clearCursor();\n      return;\n    }\n\n    // in case cursor.x == cols adjust visual cursor to cols - 1\n    const cursorX = Math.min(this._bufferService.buffer.x, this._bufferService.cols - 1);\n    this._bufferService.buffer.lines.get(cursorY)!.loadCell(cursorX, this._cell);\n    if (this._cell.content === undefined) {\n      return;\n    }\n\n    if (!this._coreBrowserService.isFocused) {\n      this._clearCursor();\n      this._ctx.save();\n      this._ctx.fillStyle = this._colors.cursor.css;\n      const cursorStyle = this._optionsService.rawOptions.cursorStyle;\n      if (cursorStyle && cursorStyle !== 'block') {\n        this._cursorRenderers[cursorStyle](cursorX, viewportRelativeCursorY, this._cell);\n      } else {\n        this._renderBlurCursor(cursorX, viewportRelativeCursorY, this._cell);\n      }\n      this._ctx.restore();\n      this._state.x = cursorX;\n      this._state.y = viewportRelativeCursorY;\n      this._state.isFocused = false;\n      this._state.style = cursorStyle;\n      this._state.width = this._cell.getWidth();\n      return;\n    }\n\n    // Don't draw the cursor if it's blinking\n    if (this._cursorBlinkStateManager && !this._cursorBlinkStateManager.isCursorVisible) {\n      this._clearCursor();\n      return;\n    }\n\n    if (this._state) {\n      // The cursor is already in the correct spot, don't redraw\n      if (this._state.x === cursorX &&\n          this._state.y === viewportRelativeCursorY &&\n          this._state.isFocused === this._coreBrowserService.isFocused &&\n          this._state.style === this._optionsService.rawOptions.cursorStyle &&\n          this._state.width === this._cell.getWidth()) {\n        return;\n      }\n      this._clearCursor();\n    }\n\n    this._ctx.save();\n    this._cursorRenderers[this._optionsService.rawOptions.cursorStyle || 'block'](cursorX, viewportRelativeCursorY, this._cell);\n    this._ctx.restore();\n\n    this._state.x = cursorX;\n    this._state.y = viewportRelativeCursorY;\n    this._state.isFocused = false;\n    this._state.style = this._optionsService.rawOptions.cursorStyle;\n    this._state.width = this._cell.getWidth();\n  }\n\n  private _clearCursor(): void {\n    if (this._state) {\n      // Avoid potential rounding errors when device pixel ratio is less than 1\n      if (window.devicePixelRatio < 1) {\n        this._clearAll();\n      } else {\n        this._clearCells(this._state.x, this._state.y, this._state.width, 1);\n      }\n      this._state = {\n        x: 0,\n        y: 0,\n        isFocused: false,\n        style: '',\n        width: 0\n      };\n    }\n  }\n\n  private _renderBarCursor(x: number, y: number, cell: ICellData): void {\n    this._ctx.save();\n    this._ctx.fillStyle = this._colors.cursor.css;\n    this._fillLeftLineAtCell(x, y, this._optionsService.rawOptions.cursorWidth);\n    this._ctx.restore();\n  }\n\n  private _renderBlockCursor(x: number, y: number, cell: ICellData): void {\n    this._ctx.save();\n    this._ctx.fillStyle = this._colors.cursor.css;\n    this._fillCells(x, y, cell.getWidth(), 1);\n    this._ctx.fillStyle = this._colors.cursorAccent.css;\n    this._fillCharTrueColor(cell, x, y);\n    this._ctx.restore();\n  }\n\n  private _renderUnderlineCursor(x: number, y: number, cell: ICellData): void {\n    this._ctx.save();\n    this._ctx.fillStyle = this._colors.cursor.css;\n    this._fillBottomLineAtCells(x, y);\n    this._ctx.restore();\n  }\n\n  private _renderBlurCursor(x: number, y: number, cell: ICellData): void {\n    this._ctx.save();\n    this._ctx.strokeStyle = this._colors.cursor.css;\n    this._strokeRectAtCell(x, y, cell.getWidth(), 1);\n    this._ctx.restore();\n  }\n}\n\nclass CursorBlinkStateManager {\n  public isCursorVisible: boolean;\n\n  private _animationFrame: number | undefined;\n  private _blinkStartTimeout: number | undefined;\n  private _blinkInterval: number | undefined;\n\n  /**\n   * The time at which the animation frame was restarted, this is used on the\n   * next render to restart the timers so they don't need to restart the timers\n   * multiple times over a short period.\n   */\n  private _animationTimeRestarted: number | undefined;\n\n  constructor(\n    isFocused: boolean,\n    private _renderCallback: () => void\n  ) {\n    this.isCursorVisible = true;\n    if (isFocused) {\n      this._restartInterval();\n    }\n  }\n\n  public get isPaused(): boolean { return !(this._blinkStartTimeout || this._blinkInterval); }\n\n  public dispose(): void {\n    if (this._blinkInterval) {\n      window.clearInterval(this._blinkInterval);\n      this._blinkInterval = undefined;\n    }\n    if (this._blinkStartTimeout) {\n      window.clearTimeout(this._blinkStartTimeout);\n      this._blinkStartTimeout = undefined;\n    }\n    if (this._animationFrame) {\n      window.cancelAnimationFrame(this._animationFrame);\n      this._animationFrame = undefined;\n    }\n  }\n\n  public restartBlinkAnimation(): void {\n    if (this.isPaused) {\n      return;\n    }\n    // Save a timestamp so that the restart can be done on the next interval\n    this._animationTimeRestarted = Date.now();\n    // Force a cursor render to ensure it's visible and in the correct position\n    this.isCursorVisible = true;\n    if (!this._animationFrame) {\n      this._animationFrame = window.requestAnimationFrame(() => {\n        this._renderCallback();\n        this._animationFrame = undefined;\n      });\n    }\n  }\n\n  private _restartInterval(timeToStart: number = BLINK_INTERVAL): void {\n    // Clear any existing interval\n    if (this._blinkInterval) {\n      window.clearInterval(this._blinkInterval);\n      this._blinkInterval = undefined;\n    }\n\n    // Setup the initial timeout which will hide the cursor, this is done before\n    // the regular interval is setup in order to support restarting the blink\n    // animation in a lightweight way (without thrashing clearInterval and\n    // setInterval).\n    this._blinkStartTimeout = window.setTimeout(() => {\n      // Check if another animation restart was requested while this was being\n      // started\n      if (this._animationTimeRestarted) {\n        const time = BLINK_INTERVAL - (Date.now() - this._animationTimeRestarted);\n        this._animationTimeRestarted = undefined;\n        if (time > 0) {\n          this._restartInterval(time);\n          return;\n        }\n      }\n\n      // Hide the cursor\n      this.isCursorVisible = false;\n      this._animationFrame = window.requestAnimationFrame(() => {\n        this._renderCallback();\n        this._animationFrame = undefined;\n      });\n\n      // Setup the blink interval\n      this._blinkInterval = window.setInterval(() => {\n        // Adjust the animation time if it was restarted\n        if (this._animationTimeRestarted) {\n          // calc time diff\n          // Make restart interval do a setTimeout initially?\n          const time = BLINK_INTERVAL - (Date.now() - this._animationTimeRestarted);\n          this._animationTimeRestarted = undefined;\n          this._restartInterval(time);\n          return;\n        }\n\n        // Invert visibility and render\n        this.isCursorVisible = !this.isCursorVisible;\n        this._animationFrame = window.requestAnimationFrame(() => {\n          this._renderCallback();\n          this._animationFrame = undefined;\n        });\n      }, BLINK_INTERVAL);\n    }, timeToStart);\n  }\n\n  public pause(): void {\n    this.isCursorVisible = true;\n    if (this._blinkInterval) {\n      window.clearInterval(this._blinkInterval);\n      this._blinkInterval = undefined;\n    }\n    if (this._blinkStartTimeout) {\n      window.clearTimeout(this._blinkStartTimeout);\n      this._blinkStartTimeout = undefined;\n    }\n    if (this._animationFrame) {\n      window.cancelAnimationFrame(this._animationFrame);\n      this._animationFrame = undefined;\n    }\n  }\n\n  public resume(): void {\n    // Clear out any existing timers just in case\n    this.pause();\n\n    this._animationTimeRestarted = undefined;\n    this._restartInterval();\n    this.restartBlinkAnimation();\n  }\n}\n", "/**\n * Copyright (c) 2021 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { throwIfFalsy } from 'browser/renderer/RendererUtils';\n\ninterface IBlockVector {\n  x: number;\n  y: number;\n  w: number;\n  h: number;\n}\n\nexport const blockElementDefinitions: { [index: string]: IBlockVector[] | undefined } = {\n  // Block elements (0x2580-0x2590)\n  '\u2580': [{ x: 0, y: 0, w: 8, h: 4 }], // UPPER HALF BLOCK\n  '\u2581': [{ x: 0, y: 7, w: 8, h: 1 }], // LOWER ONE EIGHTH BLOCK\n  '\u2582': [{ x: 0, y: 6, w: 8, h: 2 }], // LOWER ONE QUARTER BLOCK\n  '\u2583': [{ x: 0, y: 5, w: 8, h: 3 }], // LOWER THREE EIGHTHS BLOCK\n  '\u2584': [{ x: 0, y: 4, w: 8, h: 4 }], // LOWER HALF BLOCK\n  '\u2585': [{ x: 0, y: 3, w: 8, h: 5 }], // LOWER FIVE EIGHTHS BLOCK\n  '\u2586': [{ x: 0, y: 2, w: 8, h: 6 }], // LOWER THREE QUARTERS BLOCK\n  '\u2587': [{ x: 0, y: 1, w: 8, h: 7 }], // LOWER SEVEN EIGHTHS BLOCK\n  '\u2588': [{ x: 0, y: 0, w: 8, h: 8 }], // FULL BLOCK\n  '\u2589': [{ x: 0, y: 0, w: 7, h: 8 }], // LEFT SEVEN EIGHTHS BLOCK\n  '\u258A': [{ x: 0, y: 0, w: 6, h: 8 }], // LEFT THREE QUARTERS BLOCK\n  '\u258B': [{ x: 0, y: 0, w: 5, h: 8 }], // LEFT FIVE EIGHTHS BLOCK\n  '\u258C': [{ x: 0, y: 0, w: 4, h: 8 }], // LEFT HALF BLOCK\n  '\u258D': [{ x: 0, y: 0, w: 3, h: 8 }], // LEFT THREE EIGHTHS BLOCK\n  '\u258E': [{ x: 0, y: 0, w: 2, h: 8 }], // LEFT ONE QUARTER BLOCK\n  '\u258F': [{ x: 0, y: 0, w: 1, h: 8 }], // LEFT ONE EIGHTH BLOCK\n  '\u2590': [{ x: 4, y: 0, w: 4, h: 8 }], // RIGHT HALF BLOCK\n\n  // Block elements (0x2594-0x2595)\n  '\u2594': [{ x: 0, y: 0, w: 9, h: 1 }], // UPPER ONE EIGHTH BLOCK\n  '\u2595': [{ x: 7, y: 0, w: 1, h: 8 }], // RIGHT ONE EIGHTH BLOCK\n\n  // Terminal graphic characters (0x2596-0x259F)\n  '\u2596': [{ x: 0, y: 4, w: 4, h: 4 }],                             // QUADRANT LOWER LEFT\n  '\u2597': [{ x: 4, y: 4, w: 4, h: 4 }],                             // QUADRANT LOWER RIGHT\n  '\u2598': [{ x: 0, y: 0, w: 4, h: 4 }],                             // QUADRANT UPPER LEFT\n  '\u2599': [{ x: 0, y: 0, w: 4, h: 8 }, { x: 0, y: 4, w: 8, h: 4 }], // QUADRANT UPPER LEFT AND LOWER LEFT AND LOWER RIGHT\n  '\u259A': [{ x: 0, y: 0, w: 4, h: 4 }, { x: 4, y: 4, w: 4, h: 4 }], // QUADRANT UPPER LEFT AND LOWER RIGHT\n  '\u259B': [{ x: 0, y: 0, w: 4, h: 8 }, { x: 0, y: 0, w: 4, h: 8 }], // QUADRANT UPPER LEFT AND UPPER RIGHT AND LOWER LEFT\n  '\u259C': [{ x: 0, y: 0, w: 8, h: 4 }, { x: 4, y: 0, w: 4, h: 8 }], // QUADRANT UPPER LEFT AND UPPER RIGHT AND LOWER RIGHT\n  '\u259D': [{ x: 4, y: 0, w: 4, h: 4 }],                             // QUADRANT UPPER RIGHT\n  '\u259E': [{ x: 4, y: 0, w: 4, h: 4 }, { x: 0, y: 4, w: 4, h: 4 }], // QUADRANT UPPER RIGHT AND LOWER LEFT\n  '\u259F': [{ x: 4, y: 0, w: 4, h: 8 }, { x: 0, y: 4, w: 8, h: 4 }], // QUADRANT UPPER RIGHT AND LOWER LEFT AND LOWER RIGHT\n\n  // VERTICAL ONE EIGHTH BLOCK-2 through VERTICAL ONE EIGHTH BLOCK-7\n  '\\u{1FB70}': [{ x: 1, y: 0, w: 1, h: 8 }],\n  '\\u{1FB71}': [{ x: 2, y: 0, w: 1, h: 8 }],\n  '\\u{1FB72}': [{ x: 3, y: 0, w: 1, h: 8 }],\n  '\\u{1FB73}': [{ x: 4, y: 0, w: 1, h: 8 }],\n  '\\u{1FB74}': [{ x: 5, y: 0, w: 1, h: 8 }],\n  '\\u{1FB75}': [{ x: 6, y: 0, w: 1, h: 8 }],\n\n  // HORIZONTAL ONE EIGHTH BLOCK-2 through HORIZONTAL ONE EIGHTH BLOCK-7\n  '\\u{1FB76}': [{ x: 0, y: 1, w: 8, h: 1 }],\n  '\\u{1FB77}': [{ x: 0, y: 2, w: 8, h: 1 }],\n  '\\u{1FB78}': [{ x: 0, y: 3, w: 8, h: 1 }],\n  '\\u{1FB79}': [{ x: 0, y: 4, w: 8, h: 1 }],\n  '\\u{1FB7A}': [{ x: 0, y: 5, w: 8, h: 1 }],\n  '\\u{1FB7B}': [{ x: 0, y: 6, w: 8, h: 1 }],\n\n  // LEFT AND LOWER ONE EIGHTH BLOCK\n  '\\u{1FB7C}': [{ x: 0, y: 0, w: 1, h: 8 }, { x: 0, y: 7, w: 8, h: 1 }],\n  // LEFT AND UPPER ONE EIGHTH BLOCK\n  '\\u{1FB7D}': [{ x: 0, y: 0, w: 1, h: 8 }, { x: 0, y: 0, w: 8, h: 1 }],\n  // RIGHT AND UPPER ONE EIGHTH BLOCK\n  '\\u{1FB7E}': [{ x: 7, y: 0, w: 1, h: 8 }, { x: 0, y: 0, w: 8, h: 1 }],\n  // RIGHT AND LOWER ONE EIGHTH BLOCK\n  '\\u{1FB7F}': [{ x: 7, y: 0, w: 1, h: 8 }, { x: 0, y: 7, w: 8, h: 1 }],\n  // UPPER AND LOWER ONE EIGHTH BLOCK\n  '\\u{1FB80}': [{ x: 0, y: 0, w: 8, h: 1 }, { x: 0, y: 7, w: 8, h: 1 }],\n  // HORIZONTAL ONE EIGHTH BLOCK-1358\n  '\\u{1FB81}': [{ x: 0, y: 0, w: 8, h: 1 }, { x: 0, y: 2, w: 8, h: 1 }, { x: 0, y: 4, w: 8, h: 1 }, { x: 0, y: 7, w: 8, h: 1 }],\n\n  // UPPER ONE QUARTER BLOCK\n  '\\u{1FB82}': [{ x: 0, y: 0, w: 8, h: 2 }],\n  // UPPER THREE EIGHTHS BLOCK\n  '\\u{1FB83}': [{ x: 0, y: 0, w: 8, h: 3 }],\n  // UPPER FIVE EIGHTHS BLOCK\n  '\\u{1FB84}': [{ x: 0, y: 0, w: 8, h: 5 }],\n  // UPPER THREE QUARTERS BLOCK\n  '\\u{1FB85}': [{ x: 0, y: 0, w: 8, h: 6 }],\n  // UPPER SEVEN EIGHTHS BLOCK\n  '\\u{1FB86}': [{ x: 0, y: 0, w: 8, h: 7 }],\n\n  // RIGHT ONE QUARTER BLOCK\n  '\\u{1FB87}': [{ x: 6, y: 0, w: 2, h: 8 }],\n  // RIGHT THREE EIGHTHS B0OCK\n  '\\u{1FB88}': [{ x: 5, y: 0, w: 3, h: 8 }],\n  // RIGHT FIVE EIGHTHS BL0CK\n  '\\u{1FB89}': [{ x: 3, y: 0, w: 5, h: 8 }],\n  // RIGHT THREE QUARTERS 0LOCK\n  '\\u{1FB8A}': [{ x: 2, y: 0, w: 6, h: 8 }],\n  // RIGHT SEVEN EIGHTHS B0OCK\n  '\\u{1FB8B}': [{ x: 1, y: 0, w: 7, h: 8 }],\n\n  // CHECKER BOARD FILL\n  '\\u{1FB95}': [\n    { x: 0, y: 0, w: 2, h: 2 }, { x: 4, y: 0, w: 2, h: 2 },\n    { x: 2, y: 2, w: 2, h: 2 }, { x: 6, y: 2, w: 2, h: 2 },\n    { x: 0, y: 4, w: 2, h: 2 }, { x: 4, y: 4, w: 2, h: 2 },\n    { x: 2, y: 6, w: 2, h: 2 }, { x: 6, y: 6, w: 2, h: 2 }\n  ],\n  // INVERSE CHECKER BOARD FILL\n  '\\u{1FB96}': [\n    { x: 2, y: 0, w: 2, h: 2 }, { x: 6, y: 0, w: 2, h: 2 },\n    { x: 0, y: 2, w: 2, h: 2 }, { x: 4, y: 2, w: 2, h: 2 },\n    { x: 2, y: 4, w: 2, h: 2 }, { x: 6, y: 4, w: 2, h: 2 },\n    { x: 0, y: 6, w: 2, h: 2 }, { x: 4, y: 6, w: 2, h: 2 }\n  ],\n  // HEAVY HORIZONTAL FILL (upper middle and lower one quarter block)\n  '\\u{1FB97}': [{ x: 0, y: 2, w: 8, h: 2 }, { x: 0, y: 6, w: 8, h: 2 }]\n};\n\ntype PatternDefinition = number[][];\n\n/**\n * Defines the repeating pattern used by special characters, the pattern is made up of a 2d array of\n * pixel values to be filled (1) or not filled (0).\n */\nconst patternCharacterDefinitions: { [key: string]: PatternDefinition | undefined } = {\n  // Shade characters (0x2591-0x2593)\n  '\u2591': [ // LIGHT SHADE (25%)\n    [1, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 1, 0],\n    [0, 0, 0, 0]\n  ],\n  '\u2592': [ // MEDIUM SHADE (50%)\n    [1, 0],\n    [0, 0],\n    [0, 1],\n    [0, 0]\n  ],\n  '\u2593': [ // DARK SHADE (75%)\n    [0, 1],\n    [1, 1],\n    [1, 0],\n    [1, 1]\n  ]\n};\n\nconst enum Shapes {\n  /** \u2502 */ TOP_TO_BOTTOM = 'M.5,0 L.5,1',\n  /** \u2500 */ LEFT_TO_RIGHT = 'M0,.5 L1,.5',\n\n  /** \u2514 */ TOP_TO_RIGHT = 'M.5,0 L.5,.5 L1,.5',\n  /** \u2518 */ TOP_TO_LEFT = 'M.5,0 L.5,.5 L0,.5',\n  /** \u2510 */ LEFT_TO_BOTTOM = 'M0,.5 L.5,.5 L.5,1',\n  /** \u250C */ RIGHT_TO_BOTTOM = 'M0.5,1 L.5,.5 L1,.5',\n\n  /** \u2575 */ MIDDLE_TO_TOP = 'M.5,.5 L.5,0',\n  /** \u2574 */ MIDDLE_TO_LEFT = 'M.5,.5 L0,.5',\n  /** \u2576 */ MIDDLE_TO_RIGHT = 'M.5,.5 L1,.5',\n  /** \u2577 */ MIDDLE_TO_BOTTOM = 'M.5,.5 L.5,1',\n\n  /** \u2534 */ T_TOP = 'M0,.5 L1,.5 M.5,.5 L.5,0',\n  /** \u2524 */ T_LEFT = 'M.5,0 L.5,1 M.5,.5 L0,.5',\n  /** \u251C */ T_RIGHT = 'M.5,0 L.5,1 M.5,.5 L1,.5',\n  /** \u252C */ T_BOTTOM = 'M0,.5 L1,.5 M.5,.5 L.5,1',\n\n  /** \u253C */ CROSS = 'M0,.5 L1,.5 M.5,0 L.5,1',\n\n  /** \u254C */ TWO_DASHES_HORIZONTAL = 'M.1,.5 L.4,.5 M.6,.5 L.9,.5', // .2 empty, .3 filled\n  /** \u2504 */ THREE_DASHES_HORIZONTAL = 'M.0667,.5 L.2667,.5 M.4,.5 L.6,.5 M.7333,.5 L.9333,.5', // .1333 empty, .2 filled\n  /** \u2509 */ FOUR_DASHES_HORIZONTAL = 'M.05,.5 L.2,.5 M.3,.5 L.45,.5 M.55,.5 L.7,.5 M.8,.5 L.95,.5', // .1 empty, .15 filled\n  /** \u254E */ TWO_DASHES_VERTICAL = 'M.5,.1 L.5,.4 M.5,.6 L.5,.9',\n  /** \u2506 */ THREE_DASHES_VERTICAL = 'M.5,.0667 L.5,.2667 M.5,.4 L.5,.6 M.5,.7333 L.5,.9333',\n  /** \u250A */ FOUR_DASHES_VERTICAL = 'M.5,.05 L.5,.2 M.5,.3 L.5,.45 L.5,.55 M.5,.7 L.5,.95',\n}\n\nconst enum Style {\n  NORMAL = 1,\n  BOLD = 3\n}\n\n/**\n * This contains the definitions of all box drawing characters in the format of SVG paths (ie. the\n * svg d attribute).\n */\nexport const boxDrawingDefinitions: { [character: string]: { [fontWeight: number]: string | ((xp: number, yp: number) => string) } | undefined } = {\n  // Uniform normal and bold\n  '\u2500': { [Style.NORMAL]: Shapes.LEFT_TO_RIGHT },\n  '\u2501': { [Style.BOLD]:   Shapes.LEFT_TO_RIGHT },\n  '\u2502': { [Style.NORMAL]: Shapes.TOP_TO_BOTTOM },\n  '\u2503': { [Style.BOLD]:   Shapes.TOP_TO_BOTTOM },\n  '\u250C': { [Style.NORMAL]: Shapes.RIGHT_TO_BOTTOM },\n  '\u250F': { [Style.BOLD]:   Shapes.RIGHT_TO_BOTTOM },\n  '\u2510': { [Style.NORMAL]: Shapes.LEFT_TO_BOTTOM },\n  '\u2513': { [Style.BOLD]:   Shapes.LEFT_TO_BOTTOM },\n  '\u2514': { [Style.NORMAL]: Shapes.TOP_TO_RIGHT },\n  '\u2517': { [Style.BOLD]:   Shapes.TOP_TO_RIGHT },\n  '\u2518': { [Style.NORMAL]: Shapes.TOP_TO_LEFT },\n  '\u251B': { [Style.BOLD]:   Shapes.TOP_TO_LEFT },\n  '\u251C': { [Style.NORMAL]: Shapes.T_RIGHT },\n  '\u2523': { [Style.BOLD]:   Shapes.T_RIGHT },\n  '\u2524': { [Style.NORMAL]: Shapes.T_LEFT },\n  '\u252B': { [Style.BOLD]:   Shapes.T_LEFT },\n  '\u252C': { [Style.NORMAL]: Shapes.T_BOTTOM },\n  '\u2533': { [Style.BOLD]:   Shapes.T_BOTTOM },\n  '\u2534': { [Style.NORMAL]: Shapes.T_TOP },\n  '\u253B': { [Style.BOLD]:   Shapes.T_TOP },\n  '\u253C': { [Style.NORMAL]: Shapes.CROSS },\n  '\u254B': { [Style.BOLD]:   Shapes.CROSS },\n  '\u2574': { [Style.NORMAL]: Shapes.MIDDLE_TO_LEFT },\n  '\u2578': { [Style.BOLD]:   Shapes.MIDDLE_TO_LEFT },\n  '\u2575': { [Style.NORMAL]: Shapes.MIDDLE_TO_TOP },\n  '\u2579': { [Style.BOLD]:   Shapes.MIDDLE_TO_TOP },\n  '\u2576': { [Style.NORMAL]: Shapes.MIDDLE_TO_RIGHT },\n  '\u257A': { [Style.BOLD]:   Shapes.MIDDLE_TO_RIGHT },\n  '\u2577': { [Style.NORMAL]: Shapes.MIDDLE_TO_BOTTOM },\n  '\u257B': { [Style.BOLD]:   Shapes.MIDDLE_TO_BOTTOM },\n\n  // Double border\n  '\u2550': { [Style.NORMAL]: (xp, yp) => `M0,${.5 - yp} L1,${.5 - yp} M0,${.5 + yp} L1,${.5 + yp}` },\n  '\u2551': { [Style.NORMAL]: (xp, yp) => `M${.5 - xp},0 L${.5 - xp},1 M${.5 + xp},0 L${.5 + xp},1` },\n  '\u2552': { [Style.NORMAL]: (xp, yp) => `M.5,1 L.5,${.5 - yp} L1,${.5 - yp} M.5,${.5 + yp} L1,${.5 + yp}` },\n  '\u2553': { [Style.NORMAL]: (xp, yp) => `M${.5 - xp},1 L${.5 - xp},.5 L1,.5 M${.5 + xp},.5 L${.5 + xp},1` },\n  '\u2554': { [Style.NORMAL]: (xp, yp) => `M1,${.5 - yp} L${.5 - xp},${.5 - yp} L${.5 - xp},1 M1,${.5 + yp} L${.5 + xp},${.5 + yp} L${.5 + xp},1` },\n  '\u2555': { [Style.NORMAL]: (xp, yp) => `M0,${.5 - yp} L.5,${.5 - yp} L.5,1 M0,${.5 + yp} L.5,${.5 + yp}` },\n  '\u2556': { [Style.NORMAL]: (xp, yp) => `M${.5 + xp},1 L${.5 + xp},.5 L0,.5 M${.5 - xp},.5 L${.5 - xp},1` },\n  '\u2557': { [Style.NORMAL]: (xp, yp) => `M0,${.5 + yp} L${.5 - xp},${.5 + yp} L${.5 - xp},1 M0,${.5 - yp} L${.5 + xp},${.5 - yp} L${.5 + xp},1` },\n  '\u2558': { [Style.NORMAL]: (xp, yp) => `M.5,0 L.5,${.5 + yp} L1,${.5 + yp} M.5,${.5 - yp} L1,${.5 - yp}` },\n  '\u2559': { [Style.NORMAL]: (xp, yp) => `M1,.5 L${.5 - xp},.5 L${.5 - xp},0 M${.5 + xp},.5 L${.5 + xp},0` },\n  '\u255A': { [Style.NORMAL]: (xp, yp) => `M1,${.5 - yp} L${.5 + xp},${.5 - yp} L${.5 + xp},0 M1,${.5 + yp} L${.5 - xp},${.5 + yp} L${.5 - xp},0` },\n  '\u255B': { [Style.NORMAL]: (xp, yp) => `M0,${.5 + yp} L.5,${.5 + yp} L.5,0 M0,${.5 - yp} L.5,${.5 - yp}` },\n  '\u255C': { [Style.NORMAL]: (xp, yp) => `M0,.5 L${.5 + xp},.5 L${.5 + xp},0 M${.5 - xp},.5 L${.5 - xp},0` },\n  '\u255D': { [Style.NORMAL]: (xp, yp) => `M0,${.5 - yp} L${.5 - xp},${.5 - yp} L${.5 - xp},0 M0,${.5 + yp} L${.5 + xp},${.5 + yp} L${.5 + xp},0` },\n  '\u255E': { [Style.NORMAL]: (xp, yp) => `${Shapes.TOP_TO_BOTTOM} M.5,${.5 - yp} L1,${.5 - yp} M.5,${.5 + yp} L1,${.5 + yp}` },\n  '\u255F': { [Style.NORMAL]: (xp, yp) => `M${.5 - xp},0 L${.5 - xp},1 M${.5 + xp},0 L${.5 + xp},1 M${.5 + xp},.5 L1,.5` },\n  '\u2560': { [Style.NORMAL]: (xp, yp) => `M${.5 - xp},0 L${.5 - xp},1 M1,${.5 + yp} L${.5 + xp},${.5 + yp} L${.5 + xp},1 M1,${.5 - yp} L${.5 + xp},${.5 - yp} L${.5 + xp},0` },\n  '\u2561': { [Style.NORMAL]: (xp, yp) => `${Shapes.TOP_TO_BOTTOM} M0,${.5 - yp} L.5,${.5 - yp} M0,${.5 + yp} L.5,${.5 + yp}` },\n  '\u2562': { [Style.NORMAL]: (xp, yp) => `M0,.5 L${.5 - xp},.5 M${.5 - xp},0 L${.5 - xp},1 M${.5 + xp},0 L${.5 + xp},1` },\n  '\u2563': { [Style.NORMAL]: (xp, yp) => `M${.5 + xp},0 L${.5 + xp},1 M0,${.5 + yp} L${.5 - xp},${.5 + yp} L${.5 - xp},1 M0,${.5 - yp} L${.5 - xp},${.5 - yp} L${.5 - xp},0` },\n  '\u2564': { [Style.NORMAL]: (xp, yp) => `M0,${.5 - yp} L1,${.5 - yp} M0,${.5 + yp} L1,${.5 + yp} M.5,${.5 + yp} L.5,1` },\n  '\u2565': { [Style.NORMAL]: (xp, yp) => `${Shapes.LEFT_TO_RIGHT} M${.5 - xp},.5 L${.5 - xp},1 M${.5 + xp},.5 L${.5 + xp},1` },\n  '\u2566': { [Style.NORMAL]: (xp, yp) => `M0,${.5 - yp} L1,${.5 - yp} M0,${.5 + yp} L${.5 - xp},${.5 + yp} L${.5 - xp},1 M1,${.5 + yp} L${.5 + xp},${.5 + yp} L${.5 + xp},1` },\n  '\u2567': { [Style.NORMAL]: (xp, yp) => `M.5,0 L.5,${.5 - yp} M0,${.5 - yp} L1,${.5 - yp} M0,${.5 + yp} L1,${.5 + yp}` },\n  '\u2568': { [Style.NORMAL]: (xp, yp) => `${Shapes.LEFT_TO_RIGHT} M${.5 - xp},.5 L${.5 - xp},0 M${.5 + xp},.5 L${.5 + xp},0` },\n  '\u2569': { [Style.NORMAL]: (xp, yp) => `M0,${.5 + yp} L1,${.5 + yp} M0,${.5 - yp} L${.5 - xp},${.5 - yp} L${.5 - xp},0 M1,${.5 - yp} L${.5 + xp},${.5 - yp} L${.5 + xp},0` },\n  '\u256A': { [Style.NORMAL]: (xp, yp) => `${Shapes.TOP_TO_BOTTOM} M0,${.5 - yp} L1,${.5 - yp} M0,${.5 + yp} L1,${.5 + yp}` },\n  '\u256B': { [Style.NORMAL]: (xp, yp) => `${Shapes.LEFT_TO_RIGHT} M${.5 - xp},0 L${.5 - xp},1 M${.5 + xp},0 L${.5 + xp},1` },\n  '\u256C': { [Style.NORMAL]: (xp, yp) => `M0,${.5 + yp} L${.5 - xp},${.5 + yp} L${.5 - xp},1 M1,${.5 + yp} L${.5 + xp},${.5 + yp} L${.5 + xp},1 M0,${.5 - yp} L${.5 - xp},${.5 - yp} L${.5 - xp},0 M1,${.5 - yp} L${.5 + xp},${.5 - yp} L${.5 + xp},0` },\n\n  // Diagonal\n  '\u2571': { [Style.NORMAL]: 'M1,0 L0,1' },\n  '\u2572': { [Style.NORMAL]: 'M0,0 L1,1' },\n  '\u2573': { [Style.NORMAL]: 'M1,0 L0,1 M0,0 L1,1' },\n\n  // Mixed weight\n  '\u257C': { [Style.NORMAL]: Shapes.MIDDLE_TO_LEFT,                                [Style.BOLD]: Shapes.MIDDLE_TO_RIGHT },\n  '\u257D': { [Style.NORMAL]: Shapes.MIDDLE_TO_TOP,                                 [Style.BOLD]: Shapes.MIDDLE_TO_BOTTOM },\n  '\u257E': { [Style.NORMAL]: Shapes.MIDDLE_TO_RIGHT,                               [Style.BOLD]: Shapes.MIDDLE_TO_LEFT },\n  '\u257F': { [Style.NORMAL]: Shapes.MIDDLE_TO_BOTTOM,                              [Style.BOLD]: Shapes.MIDDLE_TO_TOP },\n  '\u250D': { [Style.NORMAL]: Shapes.MIDDLE_TO_BOTTOM,                              [Style.BOLD]: Shapes.MIDDLE_TO_RIGHT },\n  '\u250E': { [Style.NORMAL]: Shapes.MIDDLE_TO_RIGHT,                               [Style.BOLD]: Shapes.MIDDLE_TO_BOTTOM },\n  '\u2511': { [Style.NORMAL]: Shapes.MIDDLE_TO_BOTTOM,                              [Style.BOLD]: Shapes.MIDDLE_TO_LEFT },\n  '\u2512': { [Style.NORMAL]: Shapes.MIDDLE_TO_LEFT,                                [Style.BOLD]: Shapes.MIDDLE_TO_BOTTOM },\n  '\u2515': { [Style.NORMAL]: Shapes.MIDDLE_TO_TOP,                                 [Style.BOLD]: Shapes.MIDDLE_TO_RIGHT },\n  '\u2516': { [Style.NORMAL]: Shapes.MIDDLE_TO_RIGHT,                               [Style.BOLD]: Shapes.MIDDLE_TO_TOP },\n  '\u2519': { [Style.NORMAL]: Shapes.MIDDLE_TO_TOP,                                 [Style.BOLD]: Shapes.MIDDLE_TO_LEFT },\n  '\u251A': { [Style.NORMAL]: Shapes.MIDDLE_TO_LEFT,                                [Style.BOLD]: Shapes.MIDDLE_TO_TOP },\n  '\u251D': { [Style.NORMAL]: Shapes.TOP_TO_BOTTOM,                                 [Style.BOLD]: Shapes.MIDDLE_TO_RIGHT },\n  '\u251E': { [Style.NORMAL]: Shapes.RIGHT_TO_BOTTOM,                               [Style.BOLD]: Shapes.MIDDLE_TO_TOP },\n  '\u251F': { [Style.NORMAL]: Shapes.TOP_TO_RIGHT,                                  [Style.BOLD]: Shapes.MIDDLE_TO_BOTTOM },\n  '\u2520': { [Style.NORMAL]: Shapes.MIDDLE_TO_RIGHT,                               [Style.BOLD]: Shapes.TOP_TO_BOTTOM },\n  '\u2521': { [Style.NORMAL]: Shapes.MIDDLE_TO_BOTTOM,                              [Style.BOLD]: Shapes.TOP_TO_RIGHT },\n  '\u2522': { [Style.NORMAL]: Shapes.MIDDLE_TO_TOP,                                 [Style.BOLD]: Shapes.RIGHT_TO_BOTTOM },\n  '\u2525': { [Style.NORMAL]: Shapes.TOP_TO_BOTTOM,                                 [Style.BOLD]: Shapes.MIDDLE_TO_LEFT },\n  '\u2526': { [Style.NORMAL]: Shapes.LEFT_TO_BOTTOM,                                [Style.BOLD]: Shapes.MIDDLE_TO_TOP },\n  '\u2527': { [Style.NORMAL]: Shapes.TOP_TO_LEFT,                                   [Style.BOLD]: Shapes.MIDDLE_TO_BOTTOM },\n  '\u2528': { [Style.NORMAL]: Shapes.MIDDLE_TO_LEFT,                                [Style.BOLD]: Shapes.TOP_TO_BOTTOM },\n  '\u2529': { [Style.NORMAL]: Shapes.MIDDLE_TO_BOTTOM,                              [Style.BOLD]: Shapes.TOP_TO_LEFT },\n  '\u252A': { [Style.NORMAL]: Shapes.MIDDLE_TO_TOP,                                 [Style.BOLD]: Shapes.LEFT_TO_BOTTOM },\n  '\u252D': { [Style.NORMAL]: Shapes.RIGHT_TO_BOTTOM,                               [Style.BOLD]: Shapes.MIDDLE_TO_LEFT },\n  '\u252E': { [Style.NORMAL]: Shapes.LEFT_TO_BOTTOM,                                [Style.BOLD]: Shapes.MIDDLE_TO_RIGHT },\n  '\u252F': { [Style.NORMAL]: Shapes.MIDDLE_TO_BOTTOM,                              [Style.BOLD]: Shapes.LEFT_TO_RIGHT },\n  '\u2530': { [Style.NORMAL]: Shapes.LEFT_TO_RIGHT,                                 [Style.BOLD]: Shapes.MIDDLE_TO_BOTTOM },\n  '\u2531': { [Style.NORMAL]: Shapes.MIDDLE_TO_RIGHT,                               [Style.BOLD]: Shapes.LEFT_TO_BOTTOM },\n  '\u2532': { [Style.NORMAL]: Shapes.MIDDLE_TO_LEFT,                                [Style.BOLD]: Shapes.RIGHT_TO_BOTTOM },\n  '\u2535': { [Style.NORMAL]: Shapes.TOP_TO_RIGHT,                                  [Style.BOLD]: Shapes.MIDDLE_TO_LEFT },\n  '\u2536': { [Style.NORMAL]: Shapes.TOP_TO_LEFT,                                   [Style.BOLD]: Shapes.MIDDLE_TO_RIGHT },\n  '\u2537': { [Style.NORMAL]: Shapes.MIDDLE_TO_TOP,                                 [Style.BOLD]: Shapes.LEFT_TO_RIGHT },\n  '\u2538': { [Style.NORMAL]: Shapes.LEFT_TO_RIGHT,                                 [Style.BOLD]: Shapes.MIDDLE_TO_TOP },\n  '\u2539': { [Style.NORMAL]: Shapes.MIDDLE_TO_RIGHT,                               [Style.BOLD]: Shapes.TOP_TO_LEFT },\n  '\u253A': { [Style.NORMAL]: Shapes.MIDDLE_TO_LEFT,                                [Style.BOLD]: Shapes.TOP_TO_RIGHT },\n  '\u253D': { [Style.NORMAL]: `${Shapes.TOP_TO_BOTTOM} ${Shapes.MIDDLE_TO_RIGHT}`,  [Style.BOLD]: Shapes.MIDDLE_TO_LEFT },\n  '\u253E': { [Style.NORMAL]: `${Shapes.TOP_TO_BOTTOM} ${Shapes.MIDDLE_TO_LEFT}`,   [Style.BOLD]: Shapes.MIDDLE_TO_RIGHT },\n  '\u253F': { [Style.NORMAL]: Shapes.TOP_TO_BOTTOM,                                 [Style.BOLD]: Shapes.LEFT_TO_RIGHT },\n  '\u2540': { [Style.NORMAL]: `${Shapes.LEFT_TO_RIGHT} ${Shapes.MIDDLE_TO_BOTTOM}`, [Style.BOLD]: Shapes.MIDDLE_TO_TOP },\n  '\u2541': { [Style.NORMAL]: `${Shapes.MIDDLE_TO_TOP} ${Shapes.LEFT_TO_RIGHT}`,    [Style.BOLD]: Shapes.MIDDLE_TO_BOTTOM },\n  '\u2542': { [Style.NORMAL]: Shapes.LEFT_TO_RIGHT,                                 [Style.BOLD]: Shapes.TOP_TO_BOTTOM },\n  '\u2543': { [Style.NORMAL]: Shapes.RIGHT_TO_BOTTOM,                               [Style.BOLD]: Shapes.TOP_TO_LEFT },\n  '\u2544': { [Style.NORMAL]: Shapes.LEFT_TO_BOTTOM,                                [Style.BOLD]: Shapes.TOP_TO_RIGHT },\n  '\u2545': { [Style.NORMAL]: Shapes.TOP_TO_RIGHT,                                  [Style.BOLD]: Shapes.LEFT_TO_BOTTOM },\n  '\u2546': { [Style.NORMAL]: Shapes.TOP_TO_LEFT,                                   [Style.BOLD]: Shapes.RIGHT_TO_BOTTOM },\n  '\u2547': { [Style.NORMAL]: Shapes.MIDDLE_TO_BOTTOM,                              [Style.BOLD]: `${Shapes.MIDDLE_TO_TOP} ${Shapes.LEFT_TO_RIGHT}` },\n  '\u2548': { [Style.NORMAL]: Shapes.MIDDLE_TO_TOP,                                 [Style.BOLD]: `${Shapes.LEFT_TO_RIGHT} ${Shapes.MIDDLE_TO_BOTTOM}` },\n  '\u2549': { [Style.NORMAL]: Shapes.MIDDLE_TO_RIGHT,                               [Style.BOLD]: `${Shapes.TOP_TO_BOTTOM} ${Shapes.MIDDLE_TO_LEFT}` },\n  '\u254A': { [Style.NORMAL]: Shapes.MIDDLE_TO_LEFT,                                [Style.BOLD]: `${Shapes.TOP_TO_BOTTOM} ${Shapes.MIDDLE_TO_RIGHT}` },\n\n  // Dashed\n  '\u254C': { [Style.NORMAL]: Shapes.TWO_DASHES_HORIZONTAL },\n  '\u254D': { [Style.BOLD]:   Shapes.TWO_DASHES_HORIZONTAL },\n  '\u2504': { [Style.NORMAL]: Shapes.THREE_DASHES_HORIZONTAL },\n  '\u2505': { [Style.BOLD]:   Shapes.THREE_DASHES_HORIZONTAL },\n  '\u2508': { [Style.NORMAL]: Shapes.FOUR_DASHES_HORIZONTAL },\n  '\u2509': { [Style.BOLD]:   Shapes.FOUR_DASHES_HORIZONTAL },\n  '\u254E': { [Style.NORMAL]: Shapes.TWO_DASHES_VERTICAL },\n  '\u254F': { [Style.BOLD]:   Shapes.TWO_DASHES_VERTICAL },\n  '\u2506': { [Style.NORMAL]: Shapes.THREE_DASHES_VERTICAL  },\n  '\u2507': { [Style.BOLD]:   Shapes.THREE_DASHES_VERTICAL },\n  '\u250A': { [Style.NORMAL]: Shapes.FOUR_DASHES_VERTICAL },\n  '\u250B': { [Style.BOLD]:   Shapes.FOUR_DASHES_VERTICAL },\n\n  // Curved\n  '\u256D': { [Style.NORMAL]: 'C.5,1,.5,.5,1,.5' },\n  '\u256E': { [Style.NORMAL]: 'C.5,1,.5,.5,0,.5' },\n  '\u256F': { [Style.NORMAL]: 'C.5,0,.5,.5,0,.5' },\n  '\u2570': { [Style.NORMAL]: 'C.5,0,.5,.5,1,.5' }\n};\n\n/**\n * Try drawing a custom block element or box drawing character, returning whether it was\n * successfully drawn.\n */\nexport function tryDrawCustomChar(\n  ctx: CanvasRenderingContext2D,\n  c: string,\n  xOffset: number,\n  yOffset: number,\n  scaledCellWidth: number,\n  scaledCellHeight: number\n): boolean {\n  const blockElementDefinition = blockElementDefinitions[c];\n  if (blockElementDefinition) {\n    drawBlockElementChar(ctx, blockElementDefinition, xOffset, yOffset, scaledCellWidth, scaledCellHeight);\n    return true;\n  }\n\n  const patternDefinition = patternCharacterDefinitions[c];\n  if (patternDefinition) {\n    drawPatternChar(ctx, patternDefinition, xOffset, yOffset, scaledCellWidth, scaledCellHeight);\n    return true;\n  }\n\n  const boxDrawingDefinition = boxDrawingDefinitions[c];\n  if (boxDrawingDefinition) {\n    drawBoxDrawingChar(ctx, boxDrawingDefinition, xOffset, yOffset, scaledCellWidth, scaledCellHeight);\n    return true;\n  }\n\n  return false;\n}\n\nfunction drawBlockElementChar(\n  ctx: CanvasRenderingContext2D,\n  charDefinition: IBlockVector[],\n  xOffset: number,\n  yOffset: number,\n  scaledCellWidth: number,\n  scaledCellHeight: number\n): void {\n  for (let i = 0; i < charDefinition.length; i++) {\n    const box = charDefinition[i];\n    const xEighth = scaledCellWidth / 8;\n    const yEighth = scaledCellHeight / 8;\n    ctx.fillRect(\n      xOffset + box.x * xEighth,\n      yOffset + box.y * yEighth,\n      box.w * xEighth,\n      box.h * yEighth\n    );\n  }\n}\n\nconst cachedPatterns: Map<PatternDefinition, Map</* fillStyle */string, CanvasPattern>> = new Map();\n\nfunction drawPatternChar(\n  ctx: CanvasRenderingContext2D,\n  charDefinition: number[][],\n  xOffset: number,\n  yOffset: number,\n  scaledCellWidth: number,\n  scaledCellHeight: number\n): void {\n  let patternSet = cachedPatterns.get(charDefinition);\n  if (!patternSet) {\n    patternSet = new Map();\n    cachedPatterns.set(charDefinition, patternSet);\n  }\n  const fillStyle = ctx.fillStyle;\n  if (typeof fillStyle !== 'string') {\n    throw new Error(`Unexpected fillStyle type \"${fillStyle}\"`);\n  }\n  let pattern = patternSet.get(fillStyle);\n  if (!pattern) {\n    const width = charDefinition[0].length;\n    const height = charDefinition.length;\n    const tmpCanvas = document.createElement('canvas');\n    tmpCanvas.width = width;\n    tmpCanvas.height = height;\n    const tmpCtx = throwIfFalsy(tmpCanvas.getContext('2d'));\n    const imageData = new ImageData(width, height);\n\n    // Extract rgba from fillStyle\n    let r: number;\n    let g: number;\n    let b: number;\n    let a: number;\n    if (fillStyle.startsWith('#')) {\n      r = parseInt(fillStyle.substr(1, 2), 16);\n      g = parseInt(fillStyle.substr(3, 2), 16);\n      b = parseInt(fillStyle.substr(5, 2), 16);\n      a = fillStyle.length > 7 && parseInt(fillStyle.substr(7, 2), 16) || 1;\n    } else if (fillStyle.startsWith('rgba')) {\n      ([r, g, b, a] = fillStyle.substring(5, fillStyle.length - 1).split(',').map(e => parseFloat(e)));\n    } else {\n      throw new Error(`Unexpected fillStyle color format \"${fillStyle}\" when drawing pattern glyph`);\n    }\n\n    for (let y = 0; y < height; y++) {\n      for (let x = 0; x < width; x++) {\n        imageData.data[(y * width + x) * 4    ] = r;\n        imageData.data[(y * width + x) * 4 + 1] = g;\n        imageData.data[(y * width + x) * 4 + 2] = b;\n        imageData.data[(y * width + x) * 4 + 3] = charDefinition[y][x] * (a * 255);\n      }\n    }\n    tmpCtx.putImageData(imageData, 0, 0);\n    pattern = throwIfFalsy(ctx.createPattern(tmpCanvas, null));\n    patternSet.set(fillStyle, pattern);\n  }\n  ctx.fillStyle = pattern;\n  ctx.fillRect(xOffset, yOffset, scaledCellWidth, scaledCellHeight);\n}\n\n/**\n * Draws the following box drawing characters by mapping a subset of SVG d attribute instructions to\n * canvas draw calls.\n *\n * Box styles:       \u250E\u2530\u2512\u250D\u252F\u2511\u2553\u2565\u2556\u2552\u2564\u2555 \u250F\u2533\u2513\u250C\u2532\u2513\u250C\u252C\u2510\u250F\u2531\u2510\n * \u250C\u2500\u252C\u2500\u2510 \u250F\u2501\u2533\u2501\u2513 \u2554\u2550\u2566\u2550\u2557 \u2520\u2542\u2528\u251D\u253F\u2525\u255F\u256B\u2562\u255E\u256A\u2561 \u2521\u2547\u2529\u251C\u254A\u252B\u2522\u2548\u252A\u2523\u2549\u2524\n * \u2502 \u2502 \u2502 \u2503 \u2503 \u2503 \u2551 \u2551 \u2551 \u2516\u2538\u251A\u2515\u2537\u2519\u2559\u2568\u255C\u2558\u2567\u255B \u2514\u2534\u2518\u2514\u253A\u251B\u2517\u253B\u251B\u2517\u2539\u2518\n * \u251C\u2500\u253C\u2500\u2524 \u2523\u2501\u254B\u2501\u252B \u2560\u2550\u256C\u2550\u2563 \u250F\u2531\u2510\u250C\u2532\u2513\u250C\u252C\u2510\u250C\u252C\u2510 \u250F\u2533\u2513\u250C\u252E\u2513\u250C\u252C\u2510\u250F\u252D\u2510\n * \u2502 \u2502 \u2502 \u2503 \u2503 \u2503 \u2551 \u2551 \u2551 \u2521\u2543\u2524\u251C\u2544\u2529\u251C\u2546\u252A\u2522\u2545\u2524 \u251E\u2540\u2526\u251C\u253E\u252B\u251F\u2541\u2527\u2523\u253D\u2524\n * \u2514\u2500\u2534\u2500\u2518 \u2517\u2501\u253B\u2501\u251B \u255A\u2550\u2569\u2550\u255D \u2514\u2534\u2518\u2514\u2534\u2518\u2514\u253A\u251B\u2517\u2539\u2518 \u2514\u2534\u2518\u2514\u2536\u251B\u2517\u253B\u251B\u2517\u2535\u2518\n *\n * Other:\n * \u256D\u2500\u256E \u2572 \u2571 \u2577\u257B\u254E\u254F\u2506\u2507\u250A\u250B \u257A\u257E\u2574 \u254C\u254C\u254C \u2504\u2504\u2504 \u2508\u2508\u2508\n * \u2502 \u2502  \u2573  \u257D\u257F\u254E\u254F\u2506\u2507\u250A\u250B \u2576\u257C\u2578 \u254D\u254D\u254D \u2505\u2505\u2505 \u2509\u2509\u2509\n * \u2570\u2500\u256F \u2571 \u2572 \u2579\u2575\u254E\u254F\u2506\u2507\u250A\u250B\n *\n * All box drawing characters:\n * \u2500 \u2501 \u2502 \u2503 \u2504 \u2505 \u2506 \u2507 \u2508 \u2509 \u250A \u250B \u250C \u250D \u250E \u250F\n * \u2510 \u2511 \u2512 \u2513 \u2514 \u2515 \u2516 \u2517 \u2518 \u2519 \u251A \u251B \u251C \u251D \u251E \u251F\n * \u2520 \u2521 \u2522 \u2523 \u2524 \u2525 \u2526 \u2527 \u2528 \u2529 \u252A \u252B \u252C \u252D \u252E \u252F\n * \u2530 \u2531 \u2532 \u2533 \u2534 \u2535 \u2536 \u2537 \u2538 \u2539 \u253A \u253B \u253C \u253D \u253E \u253F\n * \u2540 \u2541 \u2542 \u2543 \u2544 \u2545 \u2546 \u2547 \u2548 \u2549 \u254A \u254B \u254C \u254D \u254E \u254F\n * \u2550 \u2551 \u2552 \u2553 \u2554 \u2555 \u2556 \u2557 \u2558 \u2559 \u255A \u255B \u255C \u255D \u255E \u255F\n * \u2560 \u2561 \u2562 \u2563 \u2564 \u2565 \u2566 \u2567 \u2568 \u2569 \u256A \u256B \u256C \u256D \u256E \u256F\n * \u2570 \u2571 \u2572 \u2573 \u2574 \u2575 \u2576 \u2577 \u2578 \u2579 \u257A \u257B \u257C \u257D \u257E \u257F\n *\n * ---\n *\n * Box drawing alignment tests:                                          \u2588\n *                                                                       \u2589\n *   \u2554\u2550\u2550\u2566\u2550\u2550\u2557  \u250C\u2500\u2500\u252C\u2500\u2500\u2510  \u256D\u2500\u2500\u252C\u2500\u2500\u256E  \u256D\u2500\u2500\u252C\u2500\u2500\u256E  \u250F\u2501\u2501\u2533\u2501\u2501\u2513  \u250E\u2512\u250F\u2511   \u2577  \u257B \u250F\u252F\u2513 \u250C\u2530\u2510    \u258A \u2571\u2572\u2571\u2572\u2573\u2573\u2573\n *   \u2551\u250C\u2500\u2568\u2500\u2510\u2551  \u2502\u2554\u2550\u2567\u2550\u2557\u2502  \u2502\u2552\u2550\u256A\u2550\u2555\u2502  \u2502\u2553\u2500\u2541\u2500\u2556\u2502  \u2503\u250C\u2500\u2542\u2500\u2510\u2503  \u2517\u2543\u2544\u2519  \u2576\u253C\u2574\u257A\u254B\u2578\u2520\u253C\u2528 \u251D\u254B\u2525    \u258B \u2572\u2571\u2572\u2571\u2573\u2573\u2573\n *   \u2551\u2502\u2572 \u2571\u2502\u2551  \u2502\u2551   \u2551\u2502  \u2502\u2502 \u2502 \u2502\u2502  \u2502\u2551 \u2503 \u2551\u2502  \u2503\u2502 \u257F \u2502\u2503  \u250D\u2545\u2546\u2513   \u2575  \u2579 \u2517\u2537\u251B \u2514\u2538\u2518    \u258C \u2571\u2572\u2571\u2572\u2573\u2573\u2573\n *   \u2560\u2561 \u2573 \u255E\u2563  \u251C\u2562   \u255F\u2524  \u251C\u253C\u2500\u253C\u2500\u253C\u2524  \u251C\u256B\u2500\u2542\u2500\u256B\u2524  \u2523\u253F\u257E\u253C\u257C\u253F\u252B  \u2515\u251B\u2516\u251A     \u250C\u2504\u2504\u2510 \u254E \u250F\u2505\u2505\u2513 \u250B \u258D \u2572\u2571\u2572\u2571\u2573\u2573\u2573\n *   \u2551\u2502\u2571 \u2572\u2502\u2551  \u2502\u2551   \u2551\u2502  \u2502\u2502 \u2502 \u2502\u2502  \u2502\u2551 \u2503 \u2551\u2502  \u2503\u2502 \u257D \u2502\u2503  \u2591\u2591\u2592\u2592\u2593\u2593\u2588\u2588 \u250A  \u2506 \u254E \u254F  \u2507 \u250B \u258E\n *   \u2551\u2514\u2500\u2565\u2500\u2518\u2551  \u2502\u255A\u2550\u2564\u2550\u255D\u2502  \u2502\u2558\u2550\u256A\u2550\u255B\u2502  \u2502\u2559\u2500\u2540\u2500\u255C\u2502  \u2503\u2514\u2500\u2542\u2500\u2518\u2503  \u2591\u2591\u2592\u2592\u2593\u2593\u2588\u2588 \u250A  \u2506 \u254E \u254F  \u2507 \u250B \u258F\n *   \u255A\u2550\u2550\u2569\u2550\u2550\u255D  \u2514\u2500\u2500\u2534\u2500\u2500\u2518  \u2570\u2500\u2500\u2534\u2500\u2500\u256F  \u2570\u2500\u2500\u2534\u2500\u2500\u256F  \u2517\u2501\u2501\u253B\u2501\u2501\u251B           \u2514\u254C\u254C\u2518 \u254E \u2517\u254D\u254D\u251B \u250B  \u2581\u2582\u2583\u2584\u2585\u2586\u2587\u2588\n *\n * Source: https://www.w3.org/2001/06/utf-8-test/UTF-8-demo.html\n */\nfunction drawBoxDrawingChar(\n  ctx: CanvasRenderingContext2D,\n  charDefinition: { [fontWeight: number]: string | ((xp: number, yp: number) => string) },\n  xOffset: number,\n  yOffset: number,\n  scaledCellWidth: number,\n  scaledCellHeight: number\n): void {\n  ctx.strokeStyle = ctx.fillStyle;\n  for (const [fontWeight, instructions] of Object.entries(charDefinition)) {\n    ctx.beginPath();\n    ctx.lineWidth = window.devicePixelRatio * Number.parseInt(fontWeight);\n    let actualInstructions: string;\n    if (typeof instructions === 'function') {\n      const xp = .15;\n      const yp = .15 / scaledCellHeight * scaledCellWidth;\n      actualInstructions = instructions(xp, yp);\n    } else {\n      actualInstructions = instructions;\n    }\n    for (const instruction of actualInstructions.split(' ')) {\n      const type = instruction[0];\n      const f = svgToCanvasInstructionMap[type];\n      if (!f) {\n        console.error(`Could not find drawing instructions for \"${type}\"`);\n        continue;\n      }\n      const args: string[] = instruction.substring(1).split(',');\n      if (!args[0] || !args[1]) {\n        continue;\n      }\n      f(ctx, translateArgs(args, scaledCellWidth, scaledCellHeight, xOffset, yOffset));\n    }\n    ctx.stroke();\n    ctx.closePath();\n  }\n}\n\nfunction clamp(value: number, max: number, min: number = 0): number {\n  return Math.max(Math.min(value, max), min);\n}\n\nconst svgToCanvasInstructionMap: { [index: string]: any } = {\n  'C': (ctx: CanvasRenderingContext2D, args: number[]) => ctx.bezierCurveTo(args[0], args[1], args[2], args[3], args[4], args[5]),\n  'L': (ctx: CanvasRenderingContext2D, args: number[]) => ctx.lineTo(args[0], args[1]),\n  'M': (ctx: CanvasRenderingContext2D, args: number[]) => ctx.moveTo(args[0], args[1])\n};\n\nfunction translateArgs(args: string[], cellWidth: number, cellHeight: number, xOffset: number, yOffset: number): number[] {\n  const result = args.map(e => parseFloat(e) || parseInt(e));\n\n  if (result.length < 2) {\n    throw new Error('Too few arguments for instruction');\n  }\n\n  for (let x = 0; x < result.length; x += 2) {\n    // Translate from 0-1 to 0-cellWidth\n    result[x] *= cellWidth;\n    // Ensure coordinate doesn't escape cell bounds and round to the nearest 0.5 to ensure a crisp\n    // line at 100% devicePixelRatio\n    if (result[x] !== 0) {\n      result[x] = clamp(Math.round(result[x] + 0.5) - 0.5, cellWidth, 0);\n    }\n    // Apply the cell's offset (ie. x*cellWidth)\n    result[x] += xOffset;\n  }\n\n  for (let y = 1; y < result.length; y += 2) {\n    // Translate from 0-1 to 0-cellHeight\n    result[y] *= cellHeight;\n    // Ensure coordinate doesn't escape cell bounds and round to the nearest 0.5 to ensure a crisp\n    // line at 100% devicePixelRatio\n    if (result[y] !== 0) {\n      result[y] = clamp(Math.round(result[y] + 0.5) - 0.5, cellHeight, 0);\n    }\n    // Apply the cell's offset (ie. x*cellHeight)\n    result[y] += yOffset;\n  }\n\n  return result;\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nexport class GridCache<T> {\n  public cache: (T | undefined)[][];\n\n  public constructor() {\n    this.cache = [];\n  }\n\n  public resize(width: number, height: number): void {\n    for (let x = 0; x < width; x++) {\n      if (this.cache.length <= x) {\n        this.cache.push([]);\n      }\n      for (let y = this.cache[x].length; y < height; y++) {\n        this.cache[x].push(undefined);\n      }\n      this.cache[x].length = height;\n    }\n    this.cache.length = width;\n  }\n\n  public clear(): void {\n    for (let x = 0; x < this.cache.length; x++) {\n      for (let y = 0; y < this.cache[x].length; y++) {\n        this.cache[x][y] = undefined;\n      }\n    }\n  }\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IRenderDimensions } from 'browser/renderer/Types';\nimport { BaseRenderLayer } from './BaseRenderLayer';\nimport { INVERTED_DEFAULT_COLOR } from 'browser/renderer/atlas/Constants';\nimport { is256Color } from 'browser/renderer/atlas/CharAtlasUtils';\nimport { IColorSet, ILinkifierEvent, ILinkifier, ILinkifier2 } from 'browser/Types';\nimport { IBufferService, IOptionsService } from 'common/services/Services';\n\nexport class LinkRenderLayer extends BaseRenderLayer {\n  private _state: ILinkifierEvent | undefined;\n\n  constructor(\n    container: HTMLElement,\n    zIndex: number,\n    colors: IColorSet,\n    rendererId: number,\n    linkifier: ILinkifier,\n    linkifier2: ILinkifier2,\n    @IBufferService bufferService: IBufferService,\n    @IOptionsService optionsService: IOptionsService\n  ) {\n    super(container, 'link', zIndex, true, colors, rendererId, bufferService, optionsService);\n    linkifier.onShowLinkUnderline(e => this._onShowLinkUnderline(e));\n    linkifier.onHideLinkUnderline(e => this._onHideLinkUnderline(e));\n\n    linkifier2.onShowLinkUnderline(e => this._onShowLinkUnderline(e));\n    linkifier2.onHideLinkUnderline(e => this._onHideLinkUnderline(e));\n  }\n\n  public resize(dim: IRenderDimensions): void {\n    super.resize(dim);\n    // Resizing the canvas discards the contents of the canvas so clear state\n    this._state = undefined;\n  }\n\n  public reset(): void {\n    this._clearCurrentLink();\n  }\n\n  private _clearCurrentLink(): void {\n    if (this._state) {\n      this._clearCells(this._state.x1, this._state.y1, this._state.cols - this._state.x1, 1);\n      const middleRowCount = this._state.y2 - this._state.y1 - 1;\n      if (middleRowCount > 0) {\n        this._clearCells(0, this._state.y1 + 1, this._state.cols, middleRowCount);\n      }\n      this._clearCells(0, this._state.y2, this._state.x2, 1);\n      this._state = undefined;\n    }\n  }\n\n  private _onShowLinkUnderline(e: ILinkifierEvent): void {\n    if (e.fg === INVERTED_DEFAULT_COLOR) {\n      this._ctx.fillStyle = this._colors.background.css;\n    } else if (e.fg && is256Color(e.fg)) {\n      // 256 color support\n      this._ctx.fillStyle = this._colors.ansi[e.fg].css;\n    } else {\n      this._ctx.fillStyle = this._colors.foreground.css;\n    }\n\n    if (e.y1 === e.y2) {\n      // Single line link\n      this._fillBottomLineAtCells(e.x1, e.y1, e.x2 - e.x1);\n    } else {\n      // Multi-line link\n      this._fillBottomLineAtCells(e.x1, e.y1, e.cols - e.x1);\n      for (let y = e.y1 + 1; y < e.y2; y++) {\n        this._fillBottomLineAtCells(0, y, e.cols);\n      }\n      this._fillBottomLineAtCells(0, e.y2, e.x2);\n    }\n    this._state = e;\n  }\n\n  private _onHideLinkUnderline(e: ILinkifierEvent): void {\n    this._clearCurrentLink();\n  }\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { TextRenderLayer } from 'browser/renderer/TextRenderLayer';\nimport { SelectionRenderLayer } from 'browser/renderer/SelectionRenderLayer';\nimport { CursorRenderLayer } from 'browser/renderer/CursorRenderLayer';\nimport { IRenderLayer, IRenderer, IRenderDimensions, IRequestRedrawEvent } from 'browser/renderer/Types';\nimport { LinkRenderLayer } from 'browser/renderer/LinkRenderLayer';\nimport { Disposable } from 'common/Lifecycle';\nimport { IColorSet, ILinkifier, ILinkifier2 } from 'browser/Types';\nimport { ICharSizeService, ICoreBrowserService } from 'browser/services/Services';\nimport { IBufferService, IOptionsService, ICoreService, IInstantiationService } from 'common/services/Services';\nimport { removeTerminalFromCache } from 'browser/renderer/atlas/CharAtlasCache';\nimport { EventEmitter, IEvent } from 'common/EventEmitter';\n\nlet nextRendererId = 1;\n\nexport class Renderer extends Disposable implements IRenderer {\n  private _id = nextRendererId++;\n\n  private _renderLayers: IRenderLayer[];\n  private _devicePixelRatio: number;\n\n  public dimensions: IRenderDimensions;\n\n  private _onRequestRedraw = new EventEmitter<IRequestRedrawEvent>();\n  public get onRequestRedraw(): IEvent<IRequestRedrawEvent> { return this._onRequestRedraw.event; }\n\n  constructor(\n    private _colors: IColorSet,\n    private readonly _screenElement: HTMLElement,\n    linkifier: ILinkifier,\n    linkifier2: ILinkifier2,\n    @IInstantiationService instantiationService: IInstantiationService,\n    @IBufferService private readonly _bufferService: IBufferService,\n    @ICharSizeService private readonly _charSizeService: ICharSizeService,\n    @IOptionsService private readonly _optionsService: IOptionsService\n  ) {\n    super();\n    const allowTransparency = this._optionsService.rawOptions.allowTransparency;\n    this._renderLayers = [\n      instantiationService.createInstance(TextRenderLayer, this._screenElement, 0, this._colors, allowTransparency, this._id),\n      instantiationService.createInstance(SelectionRenderLayer, this._screenElement, 1, this._colors, this._id),\n      instantiationService.createInstance(LinkRenderLayer, this._screenElement, 2, this._colors, this._id, linkifier, linkifier2),\n      instantiationService.createInstance(CursorRenderLayer, this._screenElement, 3, this._colors, this._id, this._onRequestRedraw)\n    ];\n    this.dimensions = {\n      scaledCharWidth: 0,\n      scaledCharHeight: 0,\n      scaledCellWidth: 0,\n      scaledCellHeight: 0,\n      scaledCharLeft: 0,\n      scaledCharTop: 0,\n      scaledCanvasWidth: 0,\n      scaledCanvasHeight: 0,\n      canvasWidth: 0,\n      canvasHeight: 0,\n      actualCellWidth: 0,\n      actualCellHeight: 0\n    };\n    this._devicePixelRatio = window.devicePixelRatio;\n    this._updateDimensions();\n    this.onOptionsChanged();\n  }\n\n  public dispose(): void {\n    for (const l of this._renderLayers) {\n      l.dispose();\n    }\n    super.dispose();\n    removeTerminalFromCache(this._id);\n  }\n\n  public onDevicePixelRatioChange(): void {\n    // If the device pixel ratio changed, the char atlas needs to be regenerated\n    // and the terminal needs to refreshed\n    if (this._devicePixelRatio !== window.devicePixelRatio) {\n      this._devicePixelRatio = window.devicePixelRatio;\n      this.onResize(this._bufferService.cols, this._bufferService.rows);\n    }\n  }\n\n  public setColors(colors: IColorSet): void {\n    this._colors = colors;\n    // Clear layers and force a full render\n    for (const l of this._renderLayers) {\n      l.setColors(this._colors);\n      l.reset();\n    }\n  }\n\n  public onResize(cols: number, rows: number): void {\n    // Update character and canvas dimensions\n    this._updateDimensions();\n\n    // Resize all render layers\n    for (const l of this._renderLayers) {\n      l.resize(this.dimensions);\n    }\n\n    // Resize the screen\n    this._screenElement.style.width = `${this.dimensions.canvasWidth}px`;\n    this._screenElement.style.height = `${this.dimensions.canvasHeight}px`;\n  }\n\n  public onCharSizeChanged(): void {\n    this.onResize(this._bufferService.cols, this._bufferService.rows);\n  }\n\n  public onBlur(): void {\n    this._runOperation(l => l.onBlur());\n  }\n\n  public onFocus(): void {\n    this._runOperation(l => l.onFocus());\n  }\n\n  public onSelectionChanged(start: [number, number] | undefined, end: [number, number] | undefined, columnSelectMode: boolean = false): void {\n    this._runOperation(l => l.onSelectionChanged(start, end, columnSelectMode));\n  }\n\n  public onCursorMove(): void {\n    this._runOperation(l => l.onCursorMove());\n  }\n\n  public onOptionsChanged(): void {\n    this._runOperation(l => l.onOptionsChanged());\n  }\n\n  public clear(): void {\n    this._runOperation(l => l.reset());\n  }\n\n  private _runOperation(operation: (layer: IRenderLayer) => void): void {\n    for (const l of this._renderLayers) {\n      operation(l);\n    }\n  }\n\n  /**\n   * Performs the refresh loop callback, calling refresh only if a refresh is\n   * necessary before queueing up the next one.\n   */\n  public renderRows(start: number, end: number): void {\n    for (const l of this._renderLayers) {\n      l.onGridChanged(start, end);\n    }\n  }\n\n  public clearTextureAtlas(): void {\n    for (const layer of this._renderLayers) {\n      layer.clearTextureAtlas();\n    }\n  }\n\n  /**\n   * Recalculates the character and canvas dimensions.\n   */\n  private _updateDimensions(): void {\n    if (!this._charSizeService.hasValidSize) {\n      return;\n    }\n\n    // Calculate the scaled character width. Width is floored as it must be\n    // drawn to an integer grid in order for the CharAtlas \"stamps\" to not be\n    // blurry. When text is drawn to the grid not using the CharAtlas, it is\n    // clipped to ensure there is no overlap with the next cell.\n    this.dimensions.scaledCharWidth = Math.floor(this._charSizeService.width * window.devicePixelRatio);\n\n    // Calculate the scaled character height. Height is ceiled in case\n    // devicePixelRatio is a floating point number in order to ensure there is\n    // enough space to draw the character to the cell.\n    this.dimensions.scaledCharHeight = Math.ceil(this._charSizeService.height * window.devicePixelRatio);\n\n    // Calculate the scaled cell height, if lineHeight is not 1 then the value\n    // will be floored because since lineHeight can never be lower then 1, there\n    // is a guarentee that the scaled line height will always be larger than\n    // scaled char height.\n    this.dimensions.scaledCellHeight = Math.floor(this.dimensions.scaledCharHeight * this._optionsService.rawOptions.lineHeight);\n\n    // Calculate the y coordinate within a cell that text should draw from in\n    // order to draw in the center of a cell.\n    this.dimensions.scaledCharTop = this._optionsService.rawOptions.lineHeight === 1 ? 0 : Math.round((this.dimensions.scaledCellHeight - this.dimensions.scaledCharHeight) / 2);\n\n    // Calculate the scaled cell width, taking the letterSpacing into account.\n    this.dimensions.scaledCellWidth = this.dimensions.scaledCharWidth + Math.round(this._optionsService.rawOptions.letterSpacing);\n\n    // Calculate the x coordinate with a cell that text should draw from in\n    // order to draw in the center of a cell.\n    this.dimensions.scaledCharLeft = Math.floor(this._optionsService.rawOptions.letterSpacing / 2);\n\n    // Recalculate the canvas dimensions; scaled* define the actual number of\n    // pixel in the canvas\n    this.dimensions.scaledCanvasHeight = this._bufferService.rows * this.dimensions.scaledCellHeight;\n    this.dimensions.scaledCanvasWidth = this._bufferService.cols * this.dimensions.scaledCellWidth;\n\n    // The the size of the canvas on the page. It's very important that this\n    // rounds to nearest integer and not ceils as browsers often set\n    // window.devicePixelRatio as something like 1.100000023841858, when it's\n    // actually 1.1. Ceiling causes blurriness as the backing canvas image is 1\n    // pixel too large for the canvas element size.\n    this.dimensions.canvasHeight = Math.round(this.dimensions.scaledCanvasHeight / window.devicePixelRatio);\n    this.dimensions.canvasWidth = Math.round(this.dimensions.scaledCanvasWidth / window.devicePixelRatio);\n\n    // Get the _actual_ dimensions of an individual cell. This needs to be\n    // derived from the canvasWidth/Height calculated above which takes into\n    // account window.devicePixelRatio. ICharSizeService.width/height by itself\n    // is insufficient when the page is not at 100% zoom level as it's measured\n    // in CSS pixels, but the actual char size on the canvas can differ.\n    this.dimensions.actualCellHeight = this.dimensions.canvasHeight / this._bufferService.rows;\n    this.dimensions.actualCellWidth = this.dimensions.canvasWidth / this._bufferService.cols;\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nexport function throwIfFalsy<T>(value: T | undefined | null): T {\n  if (!value) {\n    throw new Error('value must not be falsy');\n  }\n  return value;\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IRenderDimensions } from 'browser/renderer/Types';\nimport { BaseRenderLayer } from 'browser/renderer/BaseRenderLayer';\nimport { IColorSet } from 'browser/Types';\nimport { IBufferService, IOptionsService } from 'common/services/Services';\n\ninterface ISelectionState {\n  start?: [number, number];\n  end?: [number, number];\n  columnSelectMode?: boolean;\n  ydisp?: number;\n}\n\nexport class SelectionRenderLayer extends BaseRenderLayer {\n  private _state!: ISelectionState;\n\n  constructor(\n    container: HTMLElement,\n    zIndex: number,\n    colors: IColorSet,\n    rendererId: number,\n    @IBufferService bufferService: IBufferService,\n    @IOptionsService optionsService: IOptionsService\n  ) {\n    super(container, 'selection', zIndex, true, colors, rendererId, bufferService, optionsService);\n    this._clearState();\n  }\n\n  private _clearState(): void {\n    this._state = {\n      start: undefined,\n      end: undefined,\n      columnSelectMode: undefined,\n      ydisp: undefined\n    };\n  }\n\n  public resize(dim: IRenderDimensions): void {\n    super.resize(dim);\n    // Resizing the canvas discards the contents of the canvas so clear state\n    this._clearState();\n  }\n\n  public reset(): void {\n    if (this._state.start && this._state.end) {\n      this._clearState();\n      this._clearAll();\n    }\n  }\n\n  public onSelectionChanged(start: [number, number] | undefined, end: [number, number] | undefined, columnSelectMode: boolean): void {\n    // Selection has not changed\n    if (!this._didStateChange(start, end, columnSelectMode, this._bufferService.buffer.ydisp)) {\n      return;\n    }\n\n    // Remove all selections\n    this._clearAll();\n\n    // Selection does not exist\n    if (!start || !end) {\n      this._clearState();\n      return;\n    }\n\n    // Translate from buffer position to viewport position\n    const viewportStartRow = start[1] - this._bufferService.buffer.ydisp;\n    const viewportEndRow = end[1] - this._bufferService.buffer.ydisp;\n    const viewportCappedStartRow = Math.max(viewportStartRow, 0);\n    const viewportCappedEndRow = Math.min(viewportEndRow, this._bufferService.rows - 1);\n\n    // No need to draw the selection\n    if (viewportCappedStartRow >= this._bufferService.rows || viewportCappedEndRow < 0) {\n      this._state.ydisp = this._bufferService.buffer.ydisp;\n      return;\n    }\n\n    this._ctx.fillStyle = this._colors.selectionTransparent.css;\n\n    if (columnSelectMode) {\n      const startCol = start[0];\n      const width = end[0] - startCol;\n      const height = viewportCappedEndRow - viewportCappedStartRow + 1;\n      this._fillCells(startCol, viewportCappedStartRow, width, height);\n    } else {\n      // Draw first row\n      const startCol = viewportStartRow === viewportCappedStartRow ? start[0] : 0;\n      const startRowEndCol = viewportCappedStartRow === viewportEndRow ? end[0] : this._bufferService.cols;\n      this._fillCells(startCol, viewportCappedStartRow, startRowEndCol - startCol, 1);\n\n      // Draw middle rows\n      const middleRowsCount = Math.max(viewportCappedEndRow - viewportCappedStartRow - 1, 0);\n      this._fillCells(0, viewportCappedStartRow + 1, this._bufferService.cols, middleRowsCount);\n\n      // Draw final row\n      if (viewportCappedStartRow !== viewportCappedEndRow) {\n        // Only draw viewportEndRow if it's not the same as viewportStartRow\n        const endCol = viewportEndRow === viewportCappedEndRow ? end[0] : this._bufferService.cols;\n        this._fillCells(0, viewportCappedEndRow, endCol, 1);\n      }\n    }\n\n    // Save state for next render\n    this._state.start = [start[0], start[1]];\n    this._state.end = [end[0], end[1]];\n    this._state.columnSelectMode = columnSelectMode;\n    this._state.ydisp = this._bufferService.buffer.ydisp;\n  }\n\n  private _didStateChange(start: [number, number] | undefined, end: [number, number] | undefined, columnSelectMode: boolean, ydisp: number): boolean {\n    return !this._areCoordinatesEqual(start, this._state.start) ||\n      !this._areCoordinatesEqual(end, this._state.end) ||\n      columnSelectMode !== this._state.columnSelectMode ||\n      ydisp !== this._state.ydisp;\n  }\n\n  private _areCoordinatesEqual(coord1: [number, number] | undefined, coord2: [number, number] | undefined): boolean {\n    if (!coord1 || !coord2) {\n      return false;\n    }\n\n    return coord1[0] === coord2[0] && coord1[1] === coord2[1];\n  }\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IRenderDimensions } from 'browser/renderer/Types';\nimport { CharData, ICellData } from 'common/Types';\nimport { GridCache } from 'browser/renderer/GridCache';\nimport { BaseRenderLayer } from 'browser/renderer/BaseRenderLayer';\nimport { AttributeData } from 'common/buffer/AttributeData';\nimport { NULL_CELL_CODE, Content } from 'common/buffer/Constants';\nimport { IColorSet } from 'browser/Types';\nimport { CellData } from 'common/buffer/CellData';\nimport { IOptionsService, IBufferService } from 'common/services/Services';\nimport { ICharacterJoinerService } from 'browser/services/Services';\nimport { JoinedCellData } from 'browser/services/CharacterJoinerService';\n\n/**\n * This CharData looks like a null character, which will forc a clear and render\n * when the character changes (a regular space ' ' character may not as it's\n * drawn state is a cleared cell).\n */\n// const OVERLAP_OWNED_CHAR_DATA: CharData = [null, '', 0, -1];\n\nexport class TextRenderLayer extends BaseRenderLayer {\n  private _state: GridCache<CharData>;\n  private _characterWidth: number = 0;\n  private _characterFont: string = '';\n  private _characterOverlapCache: { [key: string]: boolean } = {};\n  private _workCell = new CellData();\n\n  constructor(\n    container: HTMLElement,\n    zIndex: number,\n    colors: IColorSet,\n    alpha: boolean,\n    rendererId: number,\n    @IBufferService bufferService: IBufferService,\n    @IOptionsService optionsService: IOptionsService,\n    @ICharacterJoinerService private readonly _characterJoinerService: ICharacterJoinerService\n  ) {\n    super(container, 'text', zIndex, alpha, colors, rendererId, bufferService, optionsService);\n    this._state = new GridCache<CharData>();\n  }\n\n  public resize(dim: IRenderDimensions): void {\n    super.resize(dim);\n\n    // Clear the character width cache if the font or width has changed\n    const terminalFont = this._getFont(false, false);\n    if (this._characterWidth !== dim.scaledCharWidth || this._characterFont !== terminalFont) {\n      this._characterWidth = dim.scaledCharWidth;\n      this._characterFont = terminalFont;\n      this._characterOverlapCache = {};\n    }\n    // Resizing the canvas discards the contents of the canvas so clear state\n    this._state.clear();\n    this._state.resize(this._bufferService.cols, this._bufferService.rows);\n  }\n\n  public reset(): void {\n    this._state.clear();\n    this._clearAll();\n  }\n\n  private _forEachCell(\n    firstRow: number,\n    lastRow: number,\n    callback: (\n      cell: ICellData,\n      x: number,\n      y: number\n    ) => void\n  ): void {\n    for (let y = firstRow; y <= lastRow; y++) {\n      const row = y + this._bufferService.buffer.ydisp;\n      const line = this._bufferService.buffer.lines.get(row);\n      const joinedRanges = this._characterJoinerService.getJoinedCharacters(row);\n      for (let x = 0; x < this._bufferService.cols; x++) {\n        line!.loadCell(x, this._workCell);\n        let cell = this._workCell;\n\n        // If true, indicates that the current character(s) to draw were joined.\n        let isJoined = false;\n        let lastCharX = x;\n\n        // The character to the left is a wide character, drawing is owned by\n        // the char at x-1\n        if (cell.getWidth() === 0) {\n          continue;\n        }\n\n        // Process any joined character ranges as needed. Because of how the\n        // ranges are produced, we know that they are valid for the characters\n        // and attributes of our input.\n        if (joinedRanges.length > 0 && x === joinedRanges[0][0]) {\n          isJoined = true;\n          const range = joinedRanges.shift()!;\n\n          // We already know the exact start and end column of the joined range,\n          // so we get the string and width representing it directly\n          cell = new JoinedCellData(\n            this._workCell,\n            line!.translateToString(true, range[0], range[1]),\n            range[1] - range[0]\n          );\n\n          // Skip over the cells occupied by this range in the loop\n          lastCharX = range[1] - 1;\n        }\n\n        // If the character is an overlapping char and the character to the\n        // right is a space, take ownership of the cell to the right. We skip\n        // this check for joined characters because their rendering likely won't\n        // yield the same result as rendering the last character individually.\n        if (!isJoined && this._isOverlapping(cell)) {\n          // If the character is overlapping, we want to force a re-render on every\n          // frame. This is specifically to work around the case where two\n          // overlaping chars `a` and `b` are adjacent, the cursor is moved to b and a\n          // space is added. Without this, the first half of `b` would never\n          // get removed, and `a` would not re-render because it thinks it's\n          // already in the correct state.\n          // this._state.cache[x][y] = OVERLAP_OWNED_CHAR_DATA;\n          if (lastCharX < line!.length - 1 && line!.getCodePoint(lastCharX + 1) === NULL_CELL_CODE) {\n            // patch width to 2\n            cell.content &= ~Content.WIDTH_MASK;\n            cell.content |= 2 << Content.WIDTH_SHIFT;\n            // this._clearChar(x + 1, y);\n            // The overlapping char's char data will force a clear and render when the\n            // overlapping char is no longer to the left of the character and also when\n            // the space changes to another character.\n            // this._state.cache[x + 1][y] = OVERLAP_OWNED_CHAR_DATA;\n          }\n        }\n\n        callback(\n          cell,\n          x,\n          y\n        );\n\n        x = lastCharX;\n      }\n    }\n  }\n\n  /**\n   * Draws the background for a specified range of columns. Tries to batch adjacent cells of the\n   * same color together to reduce draw calls.\n   */\n  private _drawBackground(firstRow: number, lastRow: number): void {\n    const ctx = this._ctx;\n    const cols = this._bufferService.cols;\n    let startX: number = 0;\n    let startY: number = 0;\n    let prevFillStyle: string | null = null;\n\n    ctx.save();\n\n    this._forEachCell(firstRow, lastRow, (cell, x, y) => {\n      // libvte and xterm both draw the background (but not foreground) of invisible characters,\n      // so we should too.\n      let nextFillStyle = null; // null represents default background color\n\n      if (cell.isInverse()) {\n        if (cell.isFgDefault()) {\n          nextFillStyle = this._colors.foreground.css;\n        } else if (cell.isFgRGB()) {\n          nextFillStyle = `rgb(${AttributeData.toColorRGB(cell.getFgColor()).join(',')})`;\n        } else {\n          nextFillStyle = this._colors.ansi[cell.getFgColor()].css;\n        }\n      } else if (cell.isBgRGB()) {\n        nextFillStyle = `rgb(${AttributeData.toColorRGB(cell.getBgColor()).join(',')})`;\n      } else if (cell.isBgPalette()) {\n        nextFillStyle = this._colors.ansi[cell.getBgColor()].css;\n      }\n\n      if (prevFillStyle === null) {\n        // This is either the first iteration, or the default background was set. Either way, we\n        // don't need to draw anything.\n        startX = x;\n        startY = y;\n      }\n\n      if (y !== startY) {\n        // our row changed, draw the previous row\n        ctx.fillStyle = prevFillStyle || '';\n        this._fillCells(startX, startY, cols - startX, 1);\n        startX = x;\n        startY = y;\n      } else if (prevFillStyle !== nextFillStyle) {\n        // our color changed, draw the previous characters in this row\n        ctx.fillStyle = prevFillStyle || '';\n        this._fillCells(startX, startY, x - startX, 1);\n        startX = x;\n        startY = y;\n      }\n\n      prevFillStyle = nextFillStyle;\n    });\n\n    // flush the last color we encountered\n    if (prevFillStyle !== null) {\n      ctx.fillStyle = prevFillStyle;\n      this._fillCells(startX, startY, cols - startX, 1);\n    }\n\n    ctx.restore();\n  }\n\n  private _drawForeground(firstRow: number, lastRow: number): void {\n    this._forEachCell(firstRow, lastRow, (cell, x, y) => {\n      if (cell.isInvisible()) {\n        return;\n      }\n      this._drawChars(cell, x, y);\n      if (cell.isUnderline() || cell.isStrikethrough()) {\n        this._ctx.save();\n\n        if (cell.isInverse()) {\n          if (cell.isBgDefault()) {\n            this._ctx.fillStyle = this._colors.background.css;\n          } else if (cell.isBgRGB()) {\n            this._ctx.fillStyle = `rgb(${AttributeData.toColorRGB(cell.getBgColor()).join(',')})`;\n          } else {\n            let bg = cell.getBgColor();\n            if (this._optionsService.rawOptions.drawBoldTextInBrightColors && cell.isBold() && bg < 8) {\n              bg += 8;\n            }\n            this._ctx.fillStyle = this._colors.ansi[bg].css;\n          }\n        } else {\n          if (cell.isFgDefault()) {\n            this._ctx.fillStyle = this._colors.foreground.css;\n          } else if (cell.isFgRGB()) {\n            this._ctx.fillStyle = `rgb(${AttributeData.toColorRGB(cell.getFgColor()).join(',')})`;\n          } else {\n            let fg = cell.getFgColor();\n            if (this._optionsService.rawOptions.drawBoldTextInBrightColors && cell.isBold() && fg < 8) {\n              fg += 8;\n            }\n            this._ctx.fillStyle = this._colors.ansi[fg].css;\n          }\n        }\n\n        if (cell.isStrikethrough()) {\n          this._fillMiddleLineAtCells(x, y, cell.getWidth());\n        }\n        if (cell.isUnderline()) {\n          this._fillBottomLineAtCells(x, y, cell.getWidth());\n        }\n        this._ctx.restore();\n      }\n    });\n  }\n\n  public onGridChanged(firstRow: number, lastRow: number): void {\n    // Resize has not been called yet\n    if (this._state.cache.length === 0) {\n      return;\n    }\n\n    if (this._charAtlas) {\n      this._charAtlas.beginFrame();\n    }\n\n    this._clearCells(0, firstRow, this._bufferService.cols, lastRow - firstRow + 1);\n    this._drawBackground(firstRow, lastRow);\n    this._drawForeground(firstRow, lastRow);\n  }\n\n  public onOptionsChanged(): void {\n    this._setTransparency(this._optionsService.rawOptions.allowTransparency);\n  }\n\n  /**\n   * Whether a character is overlapping to the next cell.\n   */\n  private _isOverlapping(cell: ICellData): boolean {\n    // Only single cell characters can be overlapping, rendering issues can\n    // occur without this check\n    if (cell.getWidth() !== 1) {\n      return false;\n    }\n\n    // We assume that any ascii character will not overlap\n    if (cell.getCode() < 256) {\n      return false;\n    }\n\n    const chars = cell.getChars();\n\n    // Deliver from cache if available\n    if (this._characterOverlapCache.hasOwnProperty(chars)) {\n      return this._characterOverlapCache[chars];\n    }\n\n    // Setup the font\n    this._ctx.save();\n    this._ctx.font = this._characterFont;\n\n    // Measure the width of the character, but Math.floor it\n    // because that is what the renderer does when it calculates\n    // the character dimensions we are comparing against\n    const overlaps = Math.floor(this._ctx.measureText(chars).width) > this._characterWidth;\n\n    // Restore the original context\n    this._ctx.restore();\n\n    // Cache and return\n    this._characterOverlapCache[chars] = overlaps;\n    return overlaps;\n  }\n\n  /**\n   * Clear the charcater at the cell specified.\n   * @param x The column of the char.\n   * @param y The row of the char.\n   */\n  // private _clearChar(x: number, y: number): void {\n  //   let colsToClear = 1;\n  //   // Clear the adjacent character if it was wide\n  //   const state = this._state.cache[x][y];\n  //   if (state && state[CHAR_DATA_WIDTH_INDEX] === 2) {\n  //     colsToClear = 2;\n  //   }\n  //   this.clearCells(x, y, colsToClear, 1);\n  // }\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IGlyphIdentifier } from 'browser/renderer/atlas/Types';\nimport { IDisposable } from 'common/Types';\n\nexport abstract class BaseCharAtlas implements IDisposable {\n  private _didWarmUp: boolean = false;\n\n  public dispose(): void { }\n\n  /**\n   * Perform any work needed to warm the cache before it can be used. May be called multiple times.\n   * Implement _doWarmUp instead if you only want to get called once.\n   */\n  public warmUp(): void {\n    if (!this._didWarmUp) {\n      this._doWarmUp();\n      this._didWarmUp = true;\n    }\n  }\n\n  /**\n   * Perform any work needed to warm the cache before it can be used. Used by the default\n   * implementation of warmUp(), and will only be called once.\n   */\n  private _doWarmUp(): void { }\n\n  public clear(): void { }\n\n  /**\n   * Called when we start drawing a new frame.\n   *\n   * TODO: We rely on this getting called by TextRenderLayer. This should really be called by\n   * Renderer instead, but we need to make Renderer the source-of-truth for the char atlas, instead\n   * of BaseRenderLayer.\n   */\n  public beginFrame(): void { }\n\n  /**\n   * May be called before warmUp finishes, however it is okay for the implementation to\n   * do nothing and return false in that case.\n   *\n   * @param ctx Where to draw the character onto.\n   * @param glyph Information about what to draw\n   * @param x The position on the context to start drawing at\n   * @param y The position on the context to start drawing at\n   * @returns The success state. True if we drew the character.\n   */\n  public abstract draw(\n    ctx: CanvasRenderingContext2D,\n    glyph: IGlyphIdentifier,\n    x: number,\n    y: number\n  ): boolean;\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { generateConfig, configEquals } from 'browser/renderer/atlas/CharAtlasUtils';\nimport { BaseCharAtlas } from 'browser/renderer/atlas/BaseCharAtlas';\nimport { DynamicCharAtlas } from 'browser/renderer/atlas/DynamicCharAtlas';\nimport { ICharAtlasConfig } from 'browser/renderer/atlas/Types';\nimport { IColorSet } from 'browser/Types';\nimport { ITerminalOptions } from 'common/services/Services';\n\ninterface ICharAtlasCacheEntry {\n  atlas: BaseCharAtlas;\n  config: ICharAtlasConfig;\n  // N.B. This implementation potentially holds onto copies of the terminal forever, so\n  // this may cause memory leaks.\n  ownedBy: number[];\n}\n\nconst charAtlasCache: ICharAtlasCacheEntry[] = [];\n\n/**\n * Acquires a char atlas, either generating a new one or returning an existing\n * one that is in use by another terminal.\n */\nexport function acquireCharAtlas(\n  options: ITerminalOptions,\n  rendererId: number,\n  colors: IColorSet,\n  scaledCharWidth: number,\n  scaledCharHeight: number\n): BaseCharAtlas {\n  const newConfig = generateConfig(scaledCharWidth, scaledCharHeight, options, colors);\n\n  // Check to see if the renderer already owns this config\n  for (let i = 0; i < charAtlasCache.length; i++) {\n    const entry = charAtlasCache[i];\n    const ownedByIndex = entry.ownedBy.indexOf(rendererId);\n    if (ownedByIndex >= 0) {\n      if (configEquals(entry.config, newConfig)) {\n        return entry.atlas;\n      }\n      // The configs differ, release the renderer from the entry\n      if (entry.ownedBy.length === 1) {\n        entry.atlas.dispose();\n        charAtlasCache.splice(i, 1);\n      } else {\n        entry.ownedBy.splice(ownedByIndex, 1);\n      }\n      break;\n    }\n  }\n\n  // Try match a char atlas from the cache\n  for (let i = 0; i < charAtlasCache.length; i++) {\n    const entry = charAtlasCache[i];\n    if (configEquals(entry.config, newConfig)) {\n      // Add the renderer to the cache entry and return\n      entry.ownedBy.push(rendererId);\n      return entry.atlas;\n    }\n  }\n\n  const newEntry: ICharAtlasCacheEntry = {\n    atlas: new DynamicCharAtlas(\n      document,\n      newConfig\n    ),\n    config: newConfig,\n    ownedBy: [rendererId]\n  };\n  charAtlasCache.push(newEntry);\n  return newEntry.atlas;\n}\n\n/**\n * Removes a terminal reference from the cache, allowing its memory to be freed.\n */\nexport function removeTerminalFromCache(rendererId: number): void {\n  for (let i = 0; i < charAtlasCache.length; i++) {\n    const index = charAtlasCache[i].ownedBy.indexOf(rendererId);\n    if (index !== -1) {\n      if (charAtlasCache[i].ownedBy.length === 1) {\n        // Remove the cache entry if it's the only renderer\n        charAtlasCache[i].atlas.dispose();\n        charAtlasCache.splice(i, 1);\n      } else {\n        // Remove the reference from the cache entry\n        charAtlasCache[i].ownedBy.splice(index, 1);\n      }\n      break;\n    }\n  }\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ICharAtlasConfig } from 'browser/renderer/atlas/Types';\nimport { DEFAULT_COLOR } from 'common/buffer/Constants';\nimport { IColorSet, IPartialColorSet } from 'browser/Types';\nimport { ITerminalOptions } from 'common/services/Services';\n\nexport function generateConfig(scaledCharWidth: number, scaledCharHeight: number, options: ITerminalOptions, colors: IColorSet): ICharAtlasConfig {\n  // null out some fields that don't matter\n  const clonedColors: IPartialColorSet = {\n    foreground: colors.foreground,\n    background: colors.background,\n    cursor: undefined,\n    cursorAccent: undefined,\n    selection: undefined,\n    ansi: [...colors.ansi]\n  };\n  return {\n    devicePixelRatio: window.devicePixelRatio,\n    scaledCharWidth,\n    scaledCharHeight,\n    fontFamily: options.fontFamily,\n    fontSize: options.fontSize,\n    fontWeight: options.fontWeight,\n    fontWeightBold: options.fontWeightBold,\n    allowTransparency: options.allowTransparency,\n    colors: clonedColors\n  };\n}\n\nexport function configEquals(a: ICharAtlasConfig, b: ICharAtlasConfig): boolean {\n  for (let i = 0; i < a.colors.ansi.length; i++) {\n    if (a.colors.ansi[i].rgba !== b.colors.ansi[i].rgba) {\n      return false;\n    }\n  }\n  return a.devicePixelRatio === b.devicePixelRatio &&\n      a.fontFamily === b.fontFamily &&\n      a.fontSize === b.fontSize &&\n      a.fontWeight === b.fontWeight &&\n      a.fontWeightBold === b.fontWeightBold &&\n      a.allowTransparency === b.allowTransparency &&\n      a.scaledCharWidth === b.scaledCharWidth &&\n      a.scaledCharHeight === b.scaledCharHeight &&\n      a.colors.foreground === b.colors.foreground &&\n      a.colors.background === b.colors.background;\n}\n\nexport function is256Color(colorCode: number): boolean {\n  return colorCode < DEFAULT_COLOR;\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { isFirefox, isLegacyEdge } from 'common/Platform';\n\nexport const INVERTED_DEFAULT_COLOR = 257;\nexport const DIM_OPACITY = 0.5;\n// The text baseline is set conditionally by browser. Using 'ideographic' for Firefox or Legacy Edge would\n// result in truncated text (Issue 3353). Using 'bottom' for Chrome would result in slightly\n// unaligned Powerline fonts (PR 3356#issuecomment-850928179).\nexport const TEXT_BASELINE: CanvasTextBaseline = isFirefox || isLegacyEdge ? 'bottom' : 'ideographic';\n\nexport const CHAR_ATLAS_CELL_SPACING = 1;\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { DIM_OPACITY, INVERTED_DEFAULT_COLOR, TEXT_BASELINE } from 'browser/renderer/atlas/Constants';\nimport { IGlyphIdentifier, ICharAtlasConfig } from 'browser/renderer/atlas/Types';\nimport { BaseCharAtlas } from 'browser/renderer/atlas/BaseCharAtlas';\nimport { DEFAULT_ANSI_COLORS } from 'browser/ColorManager';\nimport { LRUMap } from 'browser/renderer/atlas/LRUMap';\nimport { isFirefox, isSafari } from 'common/Platform';\nimport { IColor } from 'browser/Types';\nimport { throwIfFalsy } from 'browser/renderer/RendererUtils';\nimport { color } from 'browser/Color';\n\n// In practice we're probably never going to exhaust a texture this large. For debugging purposes,\n// however, it can be useful to set this to a really tiny value, to verify that LRU eviction works.\nconst TEXTURE_WIDTH = 1024;\nconst TEXTURE_HEIGHT = 1024;\n\nconst TRANSPARENT_COLOR = {\n  css: 'rgba(0, 0, 0, 0)',\n  rgba: 0\n};\n\n// Drawing to the cache is expensive: If we have to draw more than this number of glyphs to the\n// cache in a single frame, give up on trying to cache anything else, and try to finish the current\n// frame ASAP.\n//\n// This helps to limit the amount of damage a program can do when it would otherwise thrash the\n// cache.\nconst FRAME_CACHE_DRAW_LIMIT = 100;\n\n/**\n * The number of milliseconds to wait before generating the ImageBitmap, this is to debounce/batch\n * the operation as window.createImageBitmap is asynchronous.\n */\nconst GLYPH_BITMAP_COMMIT_DELAY = 100;\n\ninterface IGlyphCacheValue {\n  index: number;\n  isEmpty: boolean;\n  inBitmap: boolean;\n}\n\nexport function getGlyphCacheKey(glyph: IGlyphIdentifier): number {\n  // Note that this only returns a valid key when code < 256\n  // Layout:\n  // 0b00000000000000000000000000000001: italic (1)\n  // 0b00000000000000000000000000000010: dim (1)\n  // 0b00000000000000000000000000000100: bold (1)\n  // 0b00000000000000000000111111111000: fg (9)\n  // 0b00000000000111111111000000000000: bg (9)\n  // 0b00011111111000000000000000000000: code (8)\n  // 0b11100000000000000000000000000000: unused (3)\n  return glyph.code << 21 | glyph.bg << 12 | glyph.fg << 3 | (glyph.bold ? 0 : 4) + (glyph.dim ? 0 : 2) + (glyph.italic ? 0 : 1);\n}\n\nexport class DynamicCharAtlas extends BaseCharAtlas {\n  // An ordered map that we're using to keep track of where each glyph is in the atlas texture.\n  // It's ordered so that we can determine when to remove the old entries.\n  private _cacheMap: LRUMap<IGlyphCacheValue>;\n\n  // The texture that the atlas is drawn to\n  private _cacheCanvas: HTMLCanvasElement;\n  private _cacheCtx: CanvasRenderingContext2D;\n\n  // A temporary context that glyphs are drawn to before being transfered to the atlas.\n  private _tmpCtx: CanvasRenderingContext2D;\n\n  // The number of characters stored in the atlas by width/height\n  private _width: number;\n  private _height: number;\n\n  private _drawToCacheCount: number = 0;\n\n  // An array of glyph keys that are waiting on the bitmap to be generated.\n  private _glyphsWaitingOnBitmap: IGlyphCacheValue[] = [];\n\n  // The timeout that is used to batch bitmap generation so it's not requested for every new glyph.\n  private _bitmapCommitTimeout: number | null = null;\n\n  // The bitmap to draw from, this is much faster on other browsers than others.\n  private _bitmap: ImageBitmap | null = null;\n\n  constructor(document: Document, private _config: ICharAtlasConfig) {\n    super();\n    this._cacheCanvas = document.createElement('canvas');\n    this._cacheCanvas.width = TEXTURE_WIDTH;\n    this._cacheCanvas.height = TEXTURE_HEIGHT;\n    // The canvas needs alpha because we use clearColor to convert the background color to alpha.\n    // It might also contain some characters with transparent backgrounds if allowTransparency is\n    // set.\n    this._cacheCtx = throwIfFalsy(this._cacheCanvas.getContext('2d', { alpha: true }));\n\n    const tmpCanvas = document.createElement('canvas');\n    tmpCanvas.width = this._config.scaledCharWidth;\n    tmpCanvas.height = this._config.scaledCharHeight;\n    this._tmpCtx = throwIfFalsy(tmpCanvas.getContext('2d', { alpha: this._config.allowTransparency }));\n\n    this._width = Math.floor(TEXTURE_WIDTH / this._config.scaledCharWidth);\n    this._height = Math.floor(TEXTURE_HEIGHT / this._config.scaledCharHeight);\n    const capacity = this._width * this._height;\n    this._cacheMap = new LRUMap(capacity);\n    this._cacheMap.prealloc(capacity);\n\n    // This is useful for debugging\n    // document.body.appendChild(this._cacheCanvas);\n  }\n\n  public dispose(): void {\n    if (this._bitmapCommitTimeout !== null) {\n      window.clearTimeout(this._bitmapCommitTimeout);\n      this._bitmapCommitTimeout = null;\n    }\n  }\n\n  public beginFrame(): void {\n    this._drawToCacheCount = 0;\n  }\n\n  public clear(): void {\n    if (this._cacheMap.size > 0) {\n      const capacity = this._width * this._height;\n      this._cacheMap = new LRUMap(capacity);\n      this._cacheMap.prealloc(capacity);\n    }\n    this._cacheCtx.clearRect(0, 0, TEXTURE_WIDTH, TEXTURE_HEIGHT);\n    this._tmpCtx.clearRect(0, 0, this._config.scaledCharWidth, this._config.scaledCharHeight);\n  }\n\n  public draw(\n    ctx: CanvasRenderingContext2D,\n    glyph: IGlyphIdentifier,\n    x: number,\n    y: number\n  ): boolean {\n    // Space is always an empty cell, special case this as it's so common\n    if (glyph.code === 32) {\n      return true;\n    }\n\n    // Exit early for uncachable glyphs\n    if (!this._canCache(glyph)) {\n      return false;\n    }\n\n    const glyphKey = getGlyphCacheKey(glyph);\n    const cacheValue = this._cacheMap.get(glyphKey);\n    if (cacheValue !== null && cacheValue !== undefined) {\n      this._drawFromCache(ctx, cacheValue, x, y);\n      return true;\n    }\n    if (this._drawToCacheCount < FRAME_CACHE_DRAW_LIMIT) {\n      let index;\n      if (this._cacheMap.size < this._cacheMap.capacity) {\n        index = this._cacheMap.size;\n      } else {\n        // we're out of space, so our call to set will delete this item\n        index = this._cacheMap.peek()!.index;\n      }\n      const cacheValue = this._drawToCache(glyph, index);\n      this._cacheMap.set(glyphKey, cacheValue);\n      this._drawFromCache(ctx, cacheValue, x, y);\n      return true;\n    }\n    return false;\n  }\n\n  private _canCache(glyph: IGlyphIdentifier): boolean {\n    // Only cache ascii and extended characters for now, to be safe. In the future, we could do\n    // something more complicated to determine the expected width of a character.\n    //\n    // If we switch the renderer over to webgl at some point, we may be able to use blending modes\n    // to draw overlapping glyphs from the atlas:\n    // https://github.com/servo/webrender/issues/464#issuecomment-255632875\n    // https://webglfundamentals.org/webgl/lessons/webgl-text-texture.html\n    return glyph.code < 256;\n  }\n\n  private _toCoordinateX(index: number): number {\n    return (index % this._width) * this._config.scaledCharWidth;\n  }\n\n  private _toCoordinateY(index: number): number {\n    return Math.floor(index / this._width) * this._config.scaledCharHeight;\n  }\n\n  private _drawFromCache(\n    ctx: CanvasRenderingContext2D,\n    cacheValue: IGlyphCacheValue,\n    x: number,\n    y: number\n  ): void {\n    // We don't actually need to do anything if this is whitespace.\n    if (cacheValue.isEmpty) {\n      return;\n    }\n    const cacheX = this._toCoordinateX(cacheValue.index);\n    const cacheY = this._toCoordinateY(cacheValue.index);\n    ctx.drawImage(\n      cacheValue.inBitmap ? this._bitmap! : this._cacheCanvas,\n      cacheX,\n      cacheY,\n      this._config.scaledCharWidth,\n      this._config.scaledCharHeight,\n      x,\n      y,\n      this._config.scaledCharWidth,\n      this._config.scaledCharHeight\n    );\n  }\n\n  private _getColorFromAnsiIndex(idx: number): IColor {\n    if (idx < this._config.colors.ansi.length) {\n      return this._config.colors.ansi[idx];\n    }\n    return DEFAULT_ANSI_COLORS[idx];\n  }\n\n  private _getBackgroundColor(glyph: IGlyphIdentifier): IColor {\n    if (this._config.allowTransparency) {\n      // The background color might have some transparency, so we need to render it as fully\n      // transparent in the atlas. Otherwise we'd end up drawing the transparent background twice\n      // around the anti-aliased edges of the glyph, and it would look too dark.\n      return TRANSPARENT_COLOR;\n    }\n    if (glyph.bg === INVERTED_DEFAULT_COLOR) {\n      return this._config.colors.foreground;\n    }\n    if (glyph.bg < 256) {\n      return this._getColorFromAnsiIndex(glyph.bg);\n    }\n    return this._config.colors.background;\n  }\n\n  private _getForegroundColor(glyph: IGlyphIdentifier): IColor {\n    if (glyph.fg === INVERTED_DEFAULT_COLOR) {\n      return color.opaque(this._config.colors.background);\n    }\n    if (glyph.fg < 256) {\n      // 256 color support\n      return this._getColorFromAnsiIndex(glyph.fg);\n    }\n    return this._config.colors.foreground;\n  }\n\n  // TODO: We do this (or something similar) in multiple places. We should split this off\n  // into a shared function.\n  private _drawToCache(glyph: IGlyphIdentifier, index: number): IGlyphCacheValue {\n    this._drawToCacheCount++;\n\n    this._tmpCtx.save();\n\n    // draw the background\n    const backgroundColor = this._getBackgroundColor(glyph);\n    // Use a 'copy' composite operation to clear any existing glyph out of _tmpCtxWithAlpha, regardless of\n    // transparency in backgroundColor\n    this._tmpCtx.globalCompositeOperation = 'copy';\n    this._tmpCtx.fillStyle = backgroundColor.css;\n    this._tmpCtx.fillRect(0, 0, this._config.scaledCharWidth, this._config.scaledCharHeight);\n    this._tmpCtx.globalCompositeOperation = 'source-over';\n\n    // draw the foreground/glyph\n    const fontWeight = glyph.bold ? this._config.fontWeightBold : this._config.fontWeight;\n    const fontStyle = glyph.italic ? 'italic' : '';\n    this._tmpCtx.font =\n      `${fontStyle} ${fontWeight} ${this._config.fontSize * this._config.devicePixelRatio}px ${this._config.fontFamily}`;\n    this._tmpCtx.textBaseline = TEXT_BASELINE;\n\n    this._tmpCtx.fillStyle = this._getForegroundColor(glyph).css;\n\n    // Apply alpha to dim the character\n    if (glyph.dim) {\n      this._tmpCtx.globalAlpha = DIM_OPACITY;\n    }\n    // Draw the character\n    this._tmpCtx.fillText(glyph.chars, 0, this._config.scaledCharHeight);\n\n    // clear the background from the character to avoid issues with drawing over the previous\n    // character if it extends past it's bounds\n    let imageData = this._tmpCtx.getImageData(\n      0, 0, this._config.scaledCharWidth, this._config.scaledCharHeight\n    );\n    let isEmpty = false;\n    if (!this._config.allowTransparency) {\n      isEmpty = clearColor(imageData, backgroundColor);\n    }\n\n    // If this charcater is underscore and empty, shift it up until it is visible, try for a maximum\n    // of 5 pixels.\n    if (isEmpty && glyph.chars === '_' && !this._config.allowTransparency) {\n      for (let offset = 1; offset <= 5; offset++) {\n        // Draw the character\n        this._tmpCtx.fillText(glyph.chars, 0, this._config.scaledCharHeight - offset);\n\n        // clear the background from the character to avoid issues with drawing over the previous\n        // character if it extends past it's bounds\n        imageData = this._tmpCtx.getImageData(\n          0, 0, this._config.scaledCharWidth, this._config.scaledCharHeight\n        );\n        isEmpty = clearColor(imageData, backgroundColor);\n        if (!isEmpty) {\n          break;\n        }\n      }\n    }\n\n    this._tmpCtx.restore();\n\n    // copy the data from imageData to _cacheCanvas\n    const x = this._toCoordinateX(index);\n    const y = this._toCoordinateY(index);\n    // putImageData doesn't do any blending, so it will overwrite any existing cache entry for us\n    this._cacheCtx.putImageData(imageData, x, y);\n\n    // Add the glyph and queue it to the bitmap (if the browser supports it)\n    const cacheValue = {\n      index,\n      isEmpty,\n      inBitmap: false\n    };\n    this._addGlyphToBitmap(cacheValue);\n\n    return cacheValue;\n  }\n\n  private _addGlyphToBitmap(cacheValue: IGlyphCacheValue): void {\n    // Support is patchy for createImageBitmap at the moment, pass a canvas back\n    // if support is lacking as drawImage works there too. Firefox is also\n    // included here as ImageBitmap appears both buggy and has horrible\n    // performance (tested on v55).\n    if (!('createImageBitmap' in window) || isFirefox || isSafari) {\n      return;\n    }\n\n    // Add the glyph to the queue\n    this._glyphsWaitingOnBitmap.push(cacheValue);\n\n    // Check if bitmap generation timeout already exists\n    if (this._bitmapCommitTimeout !== null) {\n      return;\n    }\n\n    this._bitmapCommitTimeout = window.setTimeout(() => this._generateBitmap(), GLYPH_BITMAP_COMMIT_DELAY);\n  }\n\n  private _generateBitmap(): void {\n    const glyphsMovingToBitmap = this._glyphsWaitingOnBitmap;\n    this._glyphsWaitingOnBitmap = [];\n    window.createImageBitmap(this._cacheCanvas).then(bitmap => {\n      // Set bitmap\n      this._bitmap = bitmap;\n\n      // Mark all new glyphs as in bitmap, excluding glyphs that came in after\n      // the bitmap was requested\n      for (let i = 0; i < glyphsMovingToBitmap.length; i++) {\n        const value = glyphsMovingToBitmap[i];\n        // It doesn't matter if the value was already evicted, it will be\n        // released from memory after this block if so.\n        value.inBitmap = true;\n      }\n    });\n    this._bitmapCommitTimeout = null;\n  }\n}\n\n// This is used for debugging the renderer, just swap out `new DynamicCharAtlas` with\n// `new NoneCharAtlas`.\nexport class NoneCharAtlas extends BaseCharAtlas {\n  constructor(document: Document, config: ICharAtlasConfig) {\n    super();\n  }\n\n  public draw(\n    ctx: CanvasRenderingContext2D,\n    glyph: IGlyphIdentifier,\n    x: number,\n    y: number\n  ): boolean {\n    return false;\n  }\n}\n\n/**\n * Makes a partiicular rgb color in an ImageData completely transparent.\n * @returns True if the result is \"empty\", meaning all pixels are fully transparent.\n */\nfunction clearColor(imageData: ImageData, color: IColor): boolean {\n  let isEmpty = true;\n  const r = color.rgba >>> 24;\n  const g = color.rgba >>> 16 & 0xFF;\n  const b = color.rgba >>> 8 & 0xFF;\n  for (let offset = 0; offset < imageData.data.length; offset += 4) {\n    if (imageData.data[offset] === r &&\n        imageData.data[offset + 1] === g &&\n        imageData.data[offset + 2] === b) {\n      imageData.data[offset + 3] = 0;\n    } else {\n      isEmpty = false;\n    }\n  }\n  return isEmpty;\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\ninterface ILinkedListNode<T> {\n  prev: ILinkedListNode<T> | null;\n  next: ILinkedListNode<T> | null;\n  key: number | null;\n  value: T | null;\n}\n\nexport class LRUMap<T> {\n  private _map: { [key: number]: ILinkedListNode<T> } = {};\n  private _head: ILinkedListNode<T> | null = null;\n  private _tail: ILinkedListNode<T> | null = null;\n  private _nodePool: ILinkedListNode<T>[] = [];\n  public size: number = 0;\n\n  constructor(public capacity: number) { }\n\n  private _unlinkNode(node: ILinkedListNode<T>): void {\n    const prev = node.prev;\n    const next = node.next;\n    if (node === this._head) {\n      this._head = next;\n    }\n    if (node === this._tail) {\n      this._tail = prev;\n    }\n    if (prev !== null) {\n      prev.next = next;\n    }\n    if (next !== null) {\n      next.prev = prev;\n    }\n  }\n\n  private _appendNode(node: ILinkedListNode<T>): void {\n    const tail = this._tail;\n    if (tail !== null) {\n      tail.next = node;\n    }\n    node.prev = tail;\n    node.next = null;\n    this._tail = node;\n    if (this._head === null) {\n      this._head = node;\n    }\n  }\n\n  /**\n   * Preallocate a bunch of linked-list nodes. Allocating these nodes ahead of time means that\n   * they're more likely to live next to each other in memory, which seems to improve performance.\n   *\n   * Each empty object only consumes about 60 bytes of memory, so this is pretty cheap, even for\n   * large maps.\n   */\n  public prealloc(count: number): void {\n    const nodePool = this._nodePool;\n    for (let i = 0; i < count; i++) {\n      nodePool.push({\n        prev: null,\n        next: null,\n        key: null,\n        value: null\n      });\n    }\n  }\n\n  public get(key: number): T | null {\n    // This is unsafe: We're assuming our keyspace doesn't overlap with Object.prototype. However,\n    // it's faster than calling hasOwnProperty, and in our case, it would never overlap.\n    const node = this._map[key];\n    if (node !== undefined) {\n      this._unlinkNode(node);\n      this._appendNode(node);\n      return node.value;\n    }\n    return null;\n  }\n\n  /**\n   * Gets a value from a key without marking it as the most recently used item.\n   */\n  public peekValue(key: number): T | null {\n    const node = this._map[key];\n    if (node !== undefined) {\n      return node.value;\n    }\n    return null;\n  }\n\n  public peek(): T | null {\n    const head = this._head;\n    return head === null ? null : head.value;\n  }\n\n  public set(key: number, value: T): void {\n    // This is unsafe: See note above.\n    let node = this._map[key];\n    if (node !== undefined) {\n      // already exists, we just need to mutate it and move it to the end of the list\n      node = this._map[key];\n      this._unlinkNode(node);\n      node.value = value;\n    } else if (this.size >= this.capacity) {\n      // we're out of space: recycle the head node, move it to the tail\n      node = this._head!;\n      this._unlinkNode(node);\n      delete this._map[node.key!];\n      node.key = key;\n      node.value = value;\n      this._map[key] = node;\n    } else {\n      // make a new element\n      const nodePool = this._nodePool;\n      if (nodePool.length > 0) {\n        // use a preallocated node if we can\n        node = nodePool.pop()!;\n        node.key = key;\n        node.value = value;\n      } else {\n        node = {\n          prev: null,\n          next: null,\n          key,\n          value\n        };\n      }\n      this._map[key] = node;\n      this.size++;\n    }\n    this._appendNode(node);\n  }\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IRenderer, IRenderDimensions, IRequestRedrawEvent } from 'browser/renderer/Types';\nimport { BOLD_CLASS, ITALIC_CLASS, CURSOR_CLASS, CURSOR_STYLE_BLOCK_CLASS, CURSOR_BLINK_CLASS, CURSOR_STYLE_BAR_CLASS, CURSOR_STYLE_UNDERLINE_CLASS, DomRendererRowFactory } from 'browser/renderer/dom/DomRendererRowFactory';\nimport { INVERTED_DEFAULT_COLOR } from 'browser/renderer/atlas/Constants';\nimport { Disposable } from 'common/Lifecycle';\nimport { IColorSet, ILinkifierEvent, ILinkifier, ILinkifier2 } from 'browser/Types';\nimport { ICharSizeService } from 'browser/services/Services';\nimport { IOptionsService, IBufferService, IInstantiationService } from 'common/services/Services';\nimport { EventEmitter, IEvent } from 'common/EventEmitter';\nimport { color } from 'browser/Color';\nimport { removeElementFromParent } from 'browser/Dom';\n\nconst TERMINAL_CLASS_PREFIX = 'xterm-dom-renderer-owner-';\nconst ROW_CONTAINER_CLASS = 'xterm-rows';\nconst FG_CLASS_PREFIX = 'xterm-fg-';\nconst BG_CLASS_PREFIX = 'xterm-bg-';\nconst FOCUS_CLASS = 'xterm-focus';\nconst SELECTION_CLASS = 'xterm-selection';\n\nlet nextTerminalId = 1;\n\n/**\n * A fallback renderer for when canvas is slow. This is not meant to be\n * particularly fast or feature complete, more just stable and usable for when\n * canvas is not an option.\n */\nexport class DomRenderer extends Disposable implements IRenderer {\n  private _rowFactory: DomRendererRowFactory;\n  private _terminalClass: number = nextTerminalId++;\n\n  private _themeStyleElement!: HTMLStyleElement;\n  private _dimensionsStyleElement!: HTMLStyleElement;\n  private _rowContainer: HTMLElement;\n  private _rowElements: HTMLElement[] = [];\n  private _selectionContainer: HTMLElement;\n\n  public dimensions: IRenderDimensions;\n\n  public get onRequestRedraw(): IEvent<IRequestRedrawEvent> { return new EventEmitter<IRequestRedrawEvent>().event; }\n\n  constructor(\n    private _colors: IColorSet,\n    private readonly _element: HTMLElement,\n    private readonly _screenElement: HTMLElement,\n    private readonly _viewportElement: HTMLElement,\n    private readonly _linkifier: ILinkifier,\n    private readonly _linkifier2: ILinkifier2,\n    @IInstantiationService instantiationService: IInstantiationService,\n    @ICharSizeService private readonly _charSizeService: ICharSizeService,\n    @IOptionsService private readonly _optionsService: IOptionsService,\n    @IBufferService private readonly _bufferService: IBufferService\n  ) {\n    super();\n    this._rowContainer = document.createElement('div');\n    this._rowContainer.classList.add(ROW_CONTAINER_CLASS);\n    this._rowContainer.style.lineHeight = 'normal';\n    this._rowContainer.setAttribute('aria-hidden', 'true');\n    this._refreshRowElements(this._bufferService.cols, this._bufferService.rows);\n    this._selectionContainer = document.createElement('div');\n    this._selectionContainer.classList.add(SELECTION_CLASS);\n    this._selectionContainer.setAttribute('aria-hidden', 'true');\n\n    this.dimensions = {\n      scaledCharWidth: 0,\n      scaledCharHeight: 0,\n      scaledCellWidth: 0,\n      scaledCellHeight: 0,\n      scaledCharLeft: 0,\n      scaledCharTop: 0,\n      scaledCanvasWidth: 0,\n      scaledCanvasHeight: 0,\n      canvasWidth: 0,\n      canvasHeight: 0,\n      actualCellWidth: 0,\n      actualCellHeight: 0\n    };\n    this._updateDimensions();\n    this._injectCss();\n\n    this._rowFactory = instantiationService.createInstance(DomRendererRowFactory, document, this._colors);\n\n    this._element.classList.add(TERMINAL_CLASS_PREFIX + this._terminalClass);\n    this._screenElement.appendChild(this._rowContainer);\n    this._screenElement.appendChild(this._selectionContainer);\n\n    this._linkifier.onShowLinkUnderline(e => this._onLinkHover(e));\n    this._linkifier.onHideLinkUnderline(e => this._onLinkLeave(e));\n\n    this._linkifier2.onShowLinkUnderline(e => this._onLinkHover(e));\n    this._linkifier2.onHideLinkUnderline(e => this._onLinkLeave(e));\n  }\n\n  public dispose(): void {\n    this._element.classList.remove(TERMINAL_CLASS_PREFIX + this._terminalClass);\n\n    // Outside influences such as React unmounts may manipulate the DOM before our disposal.\n    // https://github.com/xtermjs/xterm.js/issues/2960\n    removeElementFromParent(this._rowContainer, this._selectionContainer, this._themeStyleElement, this._dimensionsStyleElement);\n\n    super.dispose();\n  }\n\n  private _updateDimensions(): void {\n    this.dimensions.scaledCharWidth = this._charSizeService.width * window.devicePixelRatio;\n    this.dimensions.scaledCharHeight = Math.ceil(this._charSizeService.height * window.devicePixelRatio);\n    this.dimensions.scaledCellWidth = this.dimensions.scaledCharWidth + Math.round(this._optionsService.rawOptions.letterSpacing);\n    this.dimensions.scaledCellHeight = Math.floor(this.dimensions.scaledCharHeight * this._optionsService.rawOptions.lineHeight);\n    this.dimensions.scaledCharLeft = 0;\n    this.dimensions.scaledCharTop = 0;\n    this.dimensions.scaledCanvasWidth = this.dimensions.scaledCellWidth * this._bufferService.cols;\n    this.dimensions.scaledCanvasHeight = this.dimensions.scaledCellHeight * this._bufferService.rows;\n    this.dimensions.canvasWidth = Math.round(this.dimensions.scaledCanvasWidth / window.devicePixelRatio);\n    this.dimensions.canvasHeight = Math.round(this.dimensions.scaledCanvasHeight / window.devicePixelRatio);\n    this.dimensions.actualCellWidth = this.dimensions.canvasWidth / this._bufferService.cols;\n    this.dimensions.actualCellHeight = this.dimensions.canvasHeight / this._bufferService.rows;\n\n    for (const element of this._rowElements) {\n      element.style.width = `${this.dimensions.canvasWidth}px`;\n      element.style.height = `${this.dimensions.actualCellHeight}px`;\n      element.style.lineHeight = `${this.dimensions.actualCellHeight}px`;\n      // Make sure rows don't overflow onto following row\n      element.style.overflow = 'hidden';\n    }\n\n    if (!this._dimensionsStyleElement) {\n      this._dimensionsStyleElement = document.createElement('style');\n      this._screenElement.appendChild(this._dimensionsStyleElement);\n    }\n\n    const styles =\n      `${this._terminalSelector} .${ROW_CONTAINER_CLASS} span {` +\n      ` display: inline-block;` +\n      ` height: 100%;` +\n      ` vertical-align: top;` +\n      ` width: ${this.dimensions.actualCellWidth}px` +\n      `}`;\n\n    this._dimensionsStyleElement.textContent = styles;\n\n    this._selectionContainer.style.height = this._viewportElement.style.height;\n    this._screenElement.style.width = `${this.dimensions.canvasWidth}px`;\n    this._screenElement.style.height = `${this.dimensions.canvasHeight}px`;\n  }\n\n  public setColors(colors: IColorSet): void {\n    this._colors = colors;\n    this._injectCss();\n  }\n\n  private _injectCss(): void {\n    if (!this._themeStyleElement) {\n      this._themeStyleElement = document.createElement('style');\n      this._screenElement.appendChild(this._themeStyleElement);\n    }\n\n    // Base CSS\n    let styles =\n      `${this._terminalSelector} .${ROW_CONTAINER_CLASS} {` +\n      ` color: ${this._colors.foreground.css};` +\n      ` font-family: ${this._optionsService.rawOptions.fontFamily};` +\n      ` font-size: ${this._optionsService.rawOptions.fontSize}px;` +\n      `}`;\n    // Text styles\n    styles +=\n      `${this._terminalSelector} span:not(.${BOLD_CLASS}) {` +\n      ` font-weight: ${this._optionsService.rawOptions.fontWeight};` +\n      `}` +\n      `${this._terminalSelector} span.${BOLD_CLASS} {` +\n      ` font-weight: ${this._optionsService.rawOptions.fontWeightBold};` +\n      `}` +\n      `${this._terminalSelector} span.${ITALIC_CLASS} {` +\n      ` font-style: italic;` +\n      `}`;\n    // Blink animation\n    styles +=\n      `@keyframes blink_box_shadow` + `_` + this._terminalClass + ` {` +\n      ` 50% {` +\n      `  box-shadow: none;` +\n      ` }` +\n      `}`;\n    styles +=\n      `@keyframes blink_block` + `_` + this._terminalClass + ` {` +\n      ` 0% {` +\n      `  background-color: ${this._colors.cursor.css};` +\n      `  color: ${this._colors.cursorAccent.css};` +\n      ` }` +\n      ` 50% {` +\n      `  background-color: ${this._colors.cursorAccent.css};` +\n      `  color: ${this._colors.cursor.css};` +\n      ` }` +\n      `}`;\n    // Cursor\n    styles +=\n      `${this._terminalSelector} .${ROW_CONTAINER_CLASS}:not(.${FOCUS_CLASS}) .${CURSOR_CLASS}.${CURSOR_STYLE_BLOCK_CLASS} {` +\n      ` outline: 1px solid ${this._colors.cursor.css};` +\n      ` outline-offset: -1px;` +\n      `}` +\n      `${this._terminalSelector} .${ROW_CONTAINER_CLASS}.${FOCUS_CLASS} .${CURSOR_CLASS}.${CURSOR_BLINK_CLASS}:not(.${CURSOR_STYLE_BLOCK_CLASS}) {` +\n      ` animation: blink_box_shadow` + `_` + this._terminalClass + ` 1s step-end infinite;` +\n      `}` +\n      `${this._terminalSelector} .${ROW_CONTAINER_CLASS}.${FOCUS_CLASS} .${CURSOR_CLASS}.${CURSOR_BLINK_CLASS}.${CURSOR_STYLE_BLOCK_CLASS} {` +\n      ` animation: blink_block` + `_` + this._terminalClass + ` 1s step-end infinite;` +\n      `}` +\n      `${this._terminalSelector} .${ROW_CONTAINER_CLASS}.${FOCUS_CLASS} .${CURSOR_CLASS}.${CURSOR_STYLE_BLOCK_CLASS} {` +\n      ` background-color: ${this._colors.cursor.css};` +\n      ` color: ${this._colors.cursorAccent.css};` +\n      `}` +\n      `${this._terminalSelector} .${ROW_CONTAINER_CLASS} .${CURSOR_CLASS}.${CURSOR_STYLE_BAR_CLASS} {` +\n      ` box-shadow: ${this._optionsService.rawOptions.cursorWidth}px 0 0 ${this._colors.cursor.css} inset;` +\n      `}` +\n      `${this._terminalSelector} .${ROW_CONTAINER_CLASS} .${CURSOR_CLASS}.${CURSOR_STYLE_UNDERLINE_CLASS} {` +\n      ` box-shadow: 0 -1px 0 ${this._colors.cursor.css} inset;` +\n      `}`;\n    // Selection\n    styles +=\n      `${this._terminalSelector} .${SELECTION_CLASS} {` +\n      ` position: absolute;` +\n      ` top: 0;` +\n      ` left: 0;` +\n      ` z-index: 1;` +\n      ` pointer-events: none;` +\n      `}` +\n      `${this._terminalSelector} .${SELECTION_CLASS} div {` +\n      ` position: absolute;` +\n      ` background-color: ${this._colors.selectionTransparent.css};` +\n      `}`;\n    // Colors\n    this._colors.ansi.forEach((c, i) => {\n      styles +=\n        `${this._terminalSelector} .${FG_CLASS_PREFIX}${i} { color: ${c.css}; }` +\n        `${this._terminalSelector} .${BG_CLASS_PREFIX}${i} { background-color: ${c.css}; }`;\n    });\n    styles +=\n      `${this._terminalSelector} .${FG_CLASS_PREFIX}${INVERTED_DEFAULT_COLOR} { color: ${color.opaque(this._colors.background).css}; }` +\n      `${this._terminalSelector} .${BG_CLASS_PREFIX}${INVERTED_DEFAULT_COLOR} { background-color: ${this._colors.foreground.css}; }`;\n\n    this._themeStyleElement.textContent = styles;\n  }\n\n  public onDevicePixelRatioChange(): void {\n    this._updateDimensions();\n  }\n\n  private _refreshRowElements(cols: number, rows: number): void {\n    // Add missing elements\n    for (let i = this._rowElements.length; i <= rows; i++) {\n      const row = document.createElement('div');\n      this._rowContainer.appendChild(row);\n      this._rowElements.push(row);\n    }\n    // Remove excess elements\n    while (this._rowElements.length > rows) {\n      this._rowContainer.removeChild(this._rowElements.pop()!);\n    }\n  }\n\n  public onResize(cols: number, rows: number): void {\n    this._refreshRowElements(cols, rows);\n    this._updateDimensions();\n  }\n\n  public onCharSizeChanged(): void {\n    this._updateDimensions();\n  }\n\n  public onBlur(): void {\n    this._rowContainer.classList.remove(FOCUS_CLASS);\n  }\n\n  public onFocus(): void {\n    this._rowContainer.classList.add(FOCUS_CLASS);\n  }\n\n  public onSelectionChanged(start: [number, number] | undefined, end: [number, number] | undefined, columnSelectMode: boolean): void {\n    // Remove all selections\n    while (this._selectionContainer.children.length) {\n      this._selectionContainer.removeChild(this._selectionContainer.children[0]);\n    }\n\n    // Selection does not exist\n    if (!start || !end) {\n      return;\n    }\n\n    // Translate from buffer position to viewport position\n    const viewportStartRow = start[1] - this._bufferService.buffer.ydisp;\n    const viewportEndRow = end[1] - this._bufferService.buffer.ydisp;\n    const viewportCappedStartRow = Math.max(viewportStartRow, 0);\n    const viewportCappedEndRow = Math.min(viewportEndRow, this._bufferService.rows - 1);\n\n    // No need to draw the selection\n    if (viewportCappedStartRow >= this._bufferService.rows || viewportCappedEndRow < 0) {\n      return;\n    }\n\n    // Create the selections\n    const documentFragment = document.createDocumentFragment();\n\n    if (columnSelectMode) {\n      documentFragment.appendChild(\n        this._createSelectionElement(viewportCappedStartRow, start[0], end[0], viewportCappedEndRow - viewportCappedStartRow + 1)\n      );\n    } else {\n      // Draw first row\n      const startCol = viewportStartRow === viewportCappedStartRow ? start[0] : 0;\n      const endCol = viewportCappedStartRow === viewportEndRow ? end[0] : this._bufferService.cols;\n      documentFragment.appendChild(this._createSelectionElement(viewportCappedStartRow, startCol, endCol));\n      // Draw middle rows\n      const middleRowsCount = viewportCappedEndRow - viewportCappedStartRow - 1;\n      documentFragment.appendChild(this._createSelectionElement(viewportCappedStartRow + 1, 0, this._bufferService.cols, middleRowsCount));\n      // Draw final row\n      if (viewportCappedStartRow !== viewportCappedEndRow) {\n        // Only draw viewportEndRow if it's not the same as viewporttartRow\n        const endCol = viewportEndRow === viewportCappedEndRow ? end[0] : this._bufferService.cols;\n        documentFragment.appendChild(this._createSelectionElement(viewportCappedEndRow, 0, endCol));\n      }\n    }\n    this._selectionContainer.appendChild(documentFragment);\n  }\n\n  /**\n   * Creates a selection element at the specified position.\n   * @param row The row of the selection.\n   * @param colStart The start column.\n   * @param colEnd The end columns.\n   */\n  private _createSelectionElement(row: number, colStart: number, colEnd: number, rowCount: number = 1): HTMLElement {\n    const element = document.createElement('div');\n    element.style.height = `${rowCount * this.dimensions.actualCellHeight}px`;\n    element.style.top = `${row * this.dimensions.actualCellHeight}px`;\n    element.style.left = `${colStart * this.dimensions.actualCellWidth}px`;\n    element.style.width = `${this.dimensions.actualCellWidth * (colEnd - colStart)}px`;\n    return element;\n  }\n\n  public onCursorMove(): void {\n    // No-op, the cursor is drawn when rows are drawn\n  }\n\n  public onOptionsChanged(): void {\n    // Force a refresh\n    this._updateDimensions();\n    this._injectCss();\n  }\n\n  public clear(): void {\n    for (const e of this._rowElements) {\n      e.innerText = '';\n    }\n  }\n\n  public renderRows(start: number, end: number): void {\n    const cursorAbsoluteY = this._bufferService.buffer.ybase + this._bufferService.buffer.y;\n    const cursorX = Math.min(this._bufferService.buffer.x, this._bufferService.cols - 1);\n    const cursorBlink = this._optionsService.rawOptions.cursorBlink;\n\n    for (let y = start; y <= end; y++) {\n      const rowElement = this._rowElements[y];\n      rowElement.innerText = '';\n\n      const row = y + this._bufferService.buffer.ydisp;\n      const lineData = this._bufferService.buffer.lines.get(row);\n      const cursorStyle = this._optionsService.rawOptions.cursorStyle;\n      rowElement.appendChild(this._rowFactory.createRow(lineData!, row, row === cursorAbsoluteY, cursorStyle, cursorX, cursorBlink, this.dimensions.actualCellWidth, this._bufferService.cols));\n    }\n  }\n\n  private get _terminalSelector(): string {\n    return `.${TERMINAL_CLASS_PREFIX}${this._terminalClass}`;\n  }\n\n  private _onLinkHover(e: ILinkifierEvent): void {\n    this._setCellUnderline(e.x1, e.x2, e.y1, e.y2, e.cols, true);\n  }\n\n  private _onLinkLeave(e: ILinkifierEvent): void {\n    this._setCellUnderline(e.x1, e.x2, e.y1, e.y2, e.cols, false);\n  }\n\n  private _setCellUnderline(x: number, x2: number, y: number, y2: number, cols: number, enabled: boolean): void {\n    while (x !== x2 || y !== y2) {\n      const row = this._rowElements[y];\n      if (!row) {\n        return;\n      }\n      const span = row.children[x] as HTMLElement;\n      if (span) {\n        span.style.textDecoration = enabled ? 'underline' : 'none';\n      }\n      if (++x >= cols) {\n        x = 0;\n        y++;\n      }\n    }\n  }\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IBufferLine } from 'common/Types';\nimport { INVERTED_DEFAULT_COLOR } from 'browser/renderer/atlas/Constants';\nimport { NULL_CELL_CODE, WHITESPACE_CELL_CHAR, Attributes } from 'common/buffer/Constants';\nimport { CellData } from 'common/buffer/CellData';\nimport { ICoreService, IOptionsService } from 'common/services/Services';\nimport { color, rgba } from 'browser/Color';\nimport { IColorSet, IColor } from 'browser/Types';\nimport { ICharacterJoinerService } from 'browser/services/Services';\nimport { JoinedCellData } from 'browser/services/CharacterJoinerService';\n\nexport const BOLD_CLASS = 'xterm-bold';\nexport const DIM_CLASS = 'xterm-dim';\nexport const ITALIC_CLASS = 'xterm-italic';\nexport const UNDERLINE_CLASS = 'xterm-underline';\nexport const STRIKETHROUGH_CLASS = 'xterm-strikethrough';\nexport const CURSOR_CLASS = 'xterm-cursor';\nexport const CURSOR_BLINK_CLASS = 'xterm-cursor-blink';\nexport const CURSOR_STYLE_BLOCK_CLASS = 'xterm-cursor-block';\nexport const CURSOR_STYLE_BAR_CLASS = 'xterm-cursor-bar';\nexport const CURSOR_STYLE_UNDERLINE_CLASS = 'xterm-cursor-underline';\n\nexport class DomRendererRowFactory {\n  private _workCell: CellData = new CellData();\n\n  constructor(\n    private readonly _document: Document,\n    private _colors: IColorSet,\n    @ICharacterJoinerService private readonly _characterJoinerService: ICharacterJoinerService,\n    @IOptionsService private readonly _optionsService: IOptionsService,\n    @ICoreService private readonly _coreService: ICoreService\n  ) {\n  }\n\n  public setColors(colors: IColorSet): void {\n    this._colors = colors;\n  }\n\n  public createRow(lineData: IBufferLine, row: number, isCursorRow: boolean, cursorStyle: string | undefined, cursorX: number, cursorBlink: boolean, cellWidth: number, cols: number): DocumentFragment {\n    const fragment = this._document.createDocumentFragment();\n\n    const joinedRanges = this._characterJoinerService.getJoinedCharacters(row);\n    // Find the line length first, this prevents the need to output a bunch of\n    // empty cells at the end. This cannot easily be integrated into the main\n    // loop below because of the colCount feature (which can be removed after we\n    // properly support reflow and disallow data to go beyond the right-side of\n    // the viewport).\n    let lineLength = 0;\n    for (let x = Math.min(lineData.length, cols) - 1; x >= 0; x--) {\n      if (lineData.loadCell(x, this._workCell).getCode() !== NULL_CELL_CODE || (isCursorRow && x === cursorX)) {\n        lineLength = x + 1;\n        break;\n      }\n    }\n\n    for (let x = 0; x < lineLength; x++) {\n      lineData.loadCell(x, this._workCell);\n      let width = this._workCell.getWidth();\n\n      // The character to the left is a wide character, drawing is owned by the char at x-1\n      if (width === 0) {\n        continue;\n      }\n\n      // If true, indicates that the current character(s) to draw were joined.\n      let isJoined = false;\n      let lastCharX = x;\n\n      // Process any joined character ranges as needed. Because of how the\n      // ranges are produced, we know that they are valid for the characters\n      // and attributes of our input.\n      let cell = this._workCell;\n      if (joinedRanges.length > 0 && x === joinedRanges[0][0]) {\n        isJoined = true;\n        const range = joinedRanges.shift()!;\n\n        // We already know the exact start and end column of the joined range,\n        // so we get the string and width representing it directly\n        cell = new JoinedCellData(\n          this._workCell,\n          lineData.translateToString(true, range[0], range[1]),\n          range[1] - range[0]\n        );\n\n        // Skip over the cells occupied by this range in the loop\n        lastCharX = range[1] - 1;\n\n        // Recalculate width\n        width = cell.getWidth();\n      }\n\n      const charElement = this._document.createElement('span');\n      if (width > 1) {\n        charElement.style.width = `${cellWidth * width}px`;\n      }\n\n      if (isJoined) {\n        // Ligatures in the DOM renderer must use display inline, as they may not show with\n        // inline-block if they are outside the bounds of the element\n        charElement.style.display = 'inline';\n\n        // The DOM renderer colors the background of the cursor but for ligatures all cells are\n        // joined. The workaround here is to show a cursor around the whole ligature so it shows up,\n        // the cursor looks the same when on any character of the ligature though\n        if (cursorX >= x && cursorX <= lastCharX) {\n          cursorX = x;\n        }\n      }\n\n      if (!this._coreService.isCursorHidden && isCursorRow && x === cursorX) {\n        charElement.classList.add(CURSOR_CLASS);\n\n        if (cursorBlink) {\n          charElement.classList.add(CURSOR_BLINK_CLASS);\n        }\n\n        switch (cursorStyle) {\n          case 'bar':\n            charElement.classList.add(CURSOR_STYLE_BAR_CLASS);\n            break;\n          case 'underline':\n            charElement.classList.add(CURSOR_STYLE_UNDERLINE_CLASS);\n            break;\n          default:\n            charElement.classList.add(CURSOR_STYLE_BLOCK_CLASS);\n            break;\n        }\n      }\n\n      if (cell.isBold()) {\n        charElement.classList.add(BOLD_CLASS);\n      }\n\n      if (cell.isItalic()) {\n        charElement.classList.add(ITALIC_CLASS);\n      }\n\n      if (cell.isDim()) {\n        charElement.classList.add(DIM_CLASS);\n      }\n\n      if (cell.isUnderline()) {\n        charElement.classList.add(UNDERLINE_CLASS);\n      }\n\n      if (cell.isInvisible()) {\n        charElement.textContent = WHITESPACE_CELL_CHAR;\n      } else {\n        charElement.textContent = cell.getChars() || WHITESPACE_CELL_CHAR;\n      }\n\n      if (cell.isStrikethrough()) {\n        charElement.classList.add(STRIKETHROUGH_CLASS);\n      }\n\n      let fg = cell.getFgColor();\n      let fgColorMode = cell.getFgColorMode();\n      let bg = cell.getBgColor();\n      let bgColorMode = cell.getBgColorMode();\n      const isInverse = !!cell.isInverse();\n      if (isInverse) {\n        const temp = fg;\n        fg = bg;\n        bg = temp;\n        const temp2 = fgColorMode;\n        fgColorMode = bgColorMode;\n        bgColorMode = temp2;\n      }\n\n      // Foreground\n      switch (fgColorMode) {\n        case Attributes.CM_P16:\n        case Attributes.CM_P256:\n          if (cell.isBold() && fg < 8 && this._optionsService.rawOptions.drawBoldTextInBrightColors) {\n            fg += 8;\n          }\n          if (!this._applyMinimumContrast(charElement, this._colors.background, this._colors.ansi[fg])) {\n            charElement.classList.add(`xterm-fg-${fg}`);\n          }\n          break;\n        case Attributes.CM_RGB:\n          const color = rgba.toColor(\n            (fg >> 16) & 0xFF,\n            (fg >>  8) & 0xFF,\n            (fg      ) & 0xFF\n          );\n          if (!this._applyMinimumContrast(charElement, this._colors.background, color)) {\n            this._addStyle(charElement, `color:#${padStart(fg.toString(16), '0', 6)}`);\n          }\n          break;\n        case Attributes.CM_DEFAULT:\n        default:\n          if (!this._applyMinimumContrast(charElement, this._colors.background, this._colors.foreground)) {\n            if (isInverse) {\n              charElement.classList.add(`xterm-fg-${INVERTED_DEFAULT_COLOR}`);\n            }\n          }\n      }\n\n      // Background\n      switch (bgColorMode) {\n        case Attributes.CM_P16:\n        case Attributes.CM_P256:\n          charElement.classList.add(`xterm-bg-${bg}`);\n          break;\n        case Attributes.CM_RGB:\n          this._addStyle(charElement, `background-color:#${padStart(bg.toString(16), '0', 6)}`);\n          break;\n        case Attributes.CM_DEFAULT:\n        default:\n          if (isInverse) {\n            charElement.classList.add(`xterm-bg-${INVERTED_DEFAULT_COLOR}`);\n          }\n      }\n\n      fragment.appendChild(charElement);\n\n      x = lastCharX;\n    }\n    return fragment;\n  }\n\n  private _applyMinimumContrast(element: HTMLElement, bg: IColor, fg: IColor): boolean {\n    if (this._optionsService.rawOptions.minimumContrastRatio === 1) {\n      return false;\n    }\n\n    // Try get from cache first\n    let adjustedColor = this._colors.contrastCache.getColor(this._workCell.bg, this._workCell.fg);\n\n    // Calculate and store in cache\n    if (adjustedColor === undefined) {\n      adjustedColor = color.ensureContrastRatio(bg, fg, this._optionsService.rawOptions.minimumContrastRatio);\n      this._colors.contrastCache.setColor(this._workCell.bg, this._workCell.fg, adjustedColor ?? null);\n    }\n\n    if (adjustedColor) {\n      this._addStyle(element, `color:${adjustedColor.css}`);\n      return true;\n    }\n\n    return false;\n  }\n\n  private _addStyle(element: HTMLElement, style: string): void {\n    element.setAttribute('style', `${element.getAttribute('style') || ''}${style};`);\n  }\n}\n\nfunction padStart(text: string, padChar: string, length: number): string {\n  while (text.length < length) {\n    text = padChar + text;\n  }\n  return text;\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IBufferService } from 'common/services/Services';\n\n/**\n * Represents a selection within the buffer. This model only cares about column\n * and row coordinates, not wide characters.\n */\nexport class SelectionModel {\n  /**\n   * Whether select all is currently active.\n   */\n  public isSelectAllActive: boolean = false;\n\n  /**\n   * The minimal length of the selection from the start position. When double\n   * clicking on a word, the word will be selected which makes the selection\n   * start at the start of the word and makes this variable the length.\n   */\n  public selectionStartLength: number = 0;\n\n  /**\n   * The [x, y] position the selection starts at.\n   */\n  public selectionStart: [number, number] | undefined;\n\n  /**\n   * The [x, y] position the selection ends at.\n   */\n  public selectionEnd: [number, number] | undefined;\n\n  constructor(\n    private _bufferService: IBufferService\n  ) {\n  }\n\n  /**\n   * Clears the current selection.\n   */\n  public clearSelection(): void {\n    this.selectionStart = undefined;\n    this.selectionEnd = undefined;\n    this.isSelectAllActive = false;\n    this.selectionStartLength = 0;\n  }\n\n  /**\n   * The final selection start, taking into consideration select all.\n   */\n  public get finalSelectionStart(): [number, number] | undefined {\n    if (this.isSelectAllActive) {\n      return [0, 0];\n    }\n\n    if (!this.selectionEnd || !this.selectionStart) {\n      return this.selectionStart;\n    }\n\n    return this.areSelectionValuesReversed() ? this.selectionEnd : this.selectionStart;\n  }\n\n  /**\n   * The final selection end, taking into consideration select all, double click\n   * word selection and triple click line selection.\n   */\n  public get finalSelectionEnd(): [number, number] | undefined {\n    if (this.isSelectAllActive) {\n      return [this._bufferService.cols, this._bufferService.buffer.ybase + this._bufferService.rows - 1];\n    }\n\n    if (!this.selectionStart) {\n      return undefined;\n    }\n\n    // Use the selection start + length if the end doesn't exist or they're reversed\n    if (!this.selectionEnd || this.areSelectionValuesReversed()) {\n      const startPlusLength = this.selectionStart[0] + this.selectionStartLength;\n      if (startPlusLength > this._bufferService.cols) {\n        // Ensure the trailing EOL isn't included when the selection ends on the right edge\n        if (startPlusLength % this._bufferService.cols === 0) {\n          return [this._bufferService.cols, this.selectionStart[1] + Math.floor(startPlusLength / this._bufferService.cols) - 1];\n        }\n        return [startPlusLength % this._bufferService.cols, this.selectionStart[1] + Math.floor(startPlusLength / this._bufferService.cols)];\n      }\n      return [startPlusLength, this.selectionStart[1]];\n    }\n\n    // Ensure the the word/line is selected after a double/triple click\n    if (this.selectionStartLength) {\n      // Select the larger of the two when start and end are on the same line\n      if (this.selectionEnd[1] === this.selectionStart[1]) {\n        return [Math.max(this.selectionStart[0] + this.selectionStartLength, this.selectionEnd[0]), this.selectionEnd[1]];\n      }\n    }\n    return this.selectionEnd;\n  }\n\n  /**\n   * Returns whether the selection start and end are reversed.\n   */\n  public areSelectionValuesReversed(): boolean {\n    const start = this.selectionStart;\n    const end = this.selectionEnd;\n    if (!start || !end) {\n      return false;\n    }\n    return start[1] > end[1] || (start[1] === end[1] && start[0] > end[0]);\n  }\n\n  /**\n   * Handle the buffer being trimmed, adjust the selection position.\n   * @param amount The amount the buffer is being trimmed.\n   * @return Whether a refresh is necessary.\n   */\n  public onTrim(amount: number): boolean {\n    // Adjust the selection position based on the trimmed amount.\n    if (this.selectionStart) {\n      this.selectionStart[1] -= amount;\n    }\n    if (this.selectionEnd) {\n      this.selectionEnd[1] -= amount;\n    }\n\n    // The selection has moved off the buffer, clear it.\n    if (this.selectionEnd && this.selectionEnd[1] < 0) {\n      this.clearSelection();\n      return true;\n    }\n\n    // If the selection start is trimmed, ensure the start column is 0.\n    if (this.selectionStart && this.selectionStart[1] < 0) {\n      this.selectionStart[1] = 0;\n    }\n    return false;\n  }\n}\n", "/**\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IOptionsService } from 'common/services/Services';\nimport { IEvent, EventEmitter } from 'common/EventEmitter';\nimport { ICharSizeService } from 'browser/services/Services';\n\nexport class CharSizeService implements ICharSizeService {\n  public serviceBrand: undefined;\n\n  public width: number = 0;\n  public height: number = 0;\n  private _measureStrategy: IMeasureStrategy;\n\n  public get hasValidSize(): boolean { return this.width > 0 && this.height > 0; }\n\n  private _onCharSizeChange = new EventEmitter<void>();\n  public get onCharSizeChange(): IEvent<void> { return this._onCharSizeChange.event; }\n\n  constructor(\n    document: Document,\n    parentElement: HTMLElement,\n    @IOptionsService private readonly _optionsService: IOptionsService\n  ) {\n    this._measureStrategy = new DomMeasureStrategy(document, parentElement, this._optionsService);\n  }\n\n  public measure(): void {\n    const result = this._measureStrategy.measure();\n    if (result.width !== this.width || result.height !== this.height) {\n      this.width = result.width;\n      this.height = result.height;\n      this._onCharSizeChange.fire();\n    }\n  }\n}\n\ninterface IMeasureStrategy {\n  measure(): IReadonlyMeasureResult;\n}\n\ninterface IReadonlyMeasureResult {\n  readonly width: number;\n  readonly height: number;\n}\n\ninterface IMeasureResult {\n  width: number;\n  height: number;\n}\n\n// TODO: For supporting browsers we should also provide a CanvasCharDimensionsProvider that uses ctx.measureText\nclass DomMeasureStrategy implements IMeasureStrategy {\n  private _result: IMeasureResult = { width: 0, height: 0 };\n  private _measureElement: HTMLElement;\n\n  constructor(\n    private _document: Document,\n    private _parentElement: HTMLElement,\n    private _optionsService: IOptionsService\n  ) {\n    this._measureElement = this._document.createElement('span');\n    this._measureElement.classList.add('xterm-char-measure-element');\n    this._measureElement.textContent = 'W';\n    this._measureElement.setAttribute('aria-hidden', 'true');\n    this._parentElement.appendChild(this._measureElement);\n  }\n\n  public measure(): IReadonlyMeasureResult {\n    this._measureElement.style.fontFamily = this._optionsService.rawOptions.fontFamily;\n    this._measureElement.style.fontSize = `${this._optionsService.rawOptions.fontSize}px`;\n\n    // Note that this triggers a synchronous layout\n    const geometry = this._measureElement.getBoundingClientRect();\n\n    // If values are 0 then the element is likely currently display:none, in which case we should\n    // retain the previous value.\n    if (geometry.width !== 0 && geometry.height !== 0) {\n      this._result.width = geometry.width;\n      this._result.height = Math.ceil(geometry.height);\n    }\n\n    return this._result;\n  }\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IBufferLine, ICellData, CharData } from 'common/Types';\nimport { ICharacterJoiner } from 'browser/Types';\nimport { AttributeData } from 'common/buffer/AttributeData';\nimport { WHITESPACE_CELL_CHAR, Content } from 'common/buffer/Constants';\nimport { CellData } from 'common/buffer/CellData';\nimport { IBufferService } from 'common/services/Services';\nimport { ICharacterJoinerService } from 'browser/services/Services';\n\nexport class JoinedCellData extends AttributeData implements ICellData {\n  private _width: number;\n  // .content carries no meaning for joined CellData, simply nullify it\n  // thus we have to overload all other .content accessors\n  public content: number = 0;\n  public fg: number;\n  public bg: number;\n  public combinedData: string = '';\n\n  constructor(firstCell: ICellData, chars: string, width: number) {\n    super();\n    this.fg = firstCell.fg;\n    this.bg = firstCell.bg;\n    this.combinedData = chars;\n    this._width = width;\n  }\n\n  public isCombined(): number {\n    // always mark joined cell data as combined\n    return Content.IS_COMBINED_MASK;\n  }\n\n  public getWidth(): number {\n    return this._width;\n  }\n\n  public getChars(): string {\n    return this.combinedData;\n  }\n\n  public getCode(): number {\n    // code always gets the highest possible fake codepoint (read as -1)\n    // this is needed as code is used by caches as identifier\n    return 0x1FFFFF;\n  }\n\n  public setFromCharData(value: CharData): void {\n    throw new Error('not implemented');\n  }\n\n  public getAsCharData(): CharData {\n    return [this.fg, this.getChars(), this.getWidth(), this.getCode()];\n  }\n}\n\nexport class CharacterJoinerService implements ICharacterJoinerService {\n  public serviceBrand: undefined;\n\n  private _characterJoiners: ICharacterJoiner[] = [];\n  private _nextCharacterJoinerId: number = 0;\n  private _workCell: CellData = new CellData();\n\n  constructor(\n    @IBufferService private _bufferService: IBufferService\n  ) { }\n\n  public register(handler: (text: string) => [number, number][]): number {\n    const joiner: ICharacterJoiner = {\n      id: this._nextCharacterJoinerId++,\n      handler\n    };\n\n    this._characterJoiners.push(joiner);\n    return joiner.id;\n  }\n\n  public deregister(joinerId: number): boolean {\n    for (let i = 0; i < this._characterJoiners.length; i++) {\n      if (this._characterJoiners[i].id === joinerId) {\n        this._characterJoiners.splice(i, 1);\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  public getJoinedCharacters(row: number): [number, number][] {\n    if (this._characterJoiners.length === 0) {\n      return [];\n    }\n\n    const line = this._bufferService.buffer.lines.get(row);\n    if (!line || line.length === 0) {\n      return [];\n    }\n\n    const ranges: [number, number][] = [];\n    const lineStr = line.translateToString(true);\n\n    // Because some cells can be represented by multiple javascript characters,\n    // we track the cell and the string indexes separately. This allows us to\n    // translate the string ranges we get from the joiners back into cell ranges\n    // for use when rendering\n    let rangeStartColumn = 0;\n    let currentStringIndex = 0;\n    let rangeStartStringIndex = 0;\n    let rangeAttrFG = line.getFg(0);\n    let rangeAttrBG = line.getBg(0);\n\n    for (let x = 0; x < line.getTrimmedLength(); x++) {\n      line.loadCell(x, this._workCell);\n\n      if (this._workCell.getWidth() === 0) {\n        // If this character is of width 0, skip it.\n        continue;\n      }\n\n      // End of range\n      if (this._workCell.fg !== rangeAttrFG || this._workCell.bg !== rangeAttrBG) {\n        // If we ended up with a sequence of more than one character,\n        // look for ranges to join.\n        if (x - rangeStartColumn > 1) {\n          const joinedRanges = this._getJoinedRanges(\n            lineStr,\n            rangeStartStringIndex,\n            currentStringIndex,\n            line,\n            rangeStartColumn\n          );\n          for (let i = 0; i < joinedRanges.length; i++) {\n            ranges.push(joinedRanges[i]);\n          }\n        }\n\n        // Reset our markers for a new range.\n        rangeStartColumn = x;\n        rangeStartStringIndex = currentStringIndex;\n        rangeAttrFG = this._workCell.fg;\n        rangeAttrBG = this._workCell.bg;\n      }\n\n      currentStringIndex += this._workCell.getChars().length || WHITESPACE_CELL_CHAR.length;\n    }\n\n    // Process any trailing ranges.\n    if (this._bufferService.cols - rangeStartColumn > 1) {\n      const joinedRanges = this._getJoinedRanges(\n        lineStr,\n        rangeStartStringIndex,\n        currentStringIndex,\n        line,\n        rangeStartColumn\n      );\n      for (let i = 0; i < joinedRanges.length; i++) {\n        ranges.push(joinedRanges[i]);\n      }\n    }\n\n    return ranges;\n  }\n\n  /**\n   * Given a segment of a line of text, find all ranges of text that should be\n   * joined in a single rendering unit. Ranges are internally converted to\n   * column ranges, rather than string ranges.\n   * @param line String representation of the full line of text\n   * @param startIndex Start position of the range to search in the string (inclusive)\n   * @param endIndex End position of the range to search in the string (exclusive)\n   */\n  private _getJoinedRanges(line: string, startIndex: number, endIndex: number, lineData: IBufferLine, startCol: number): [number, number][] {\n    const text = line.substring(startIndex, endIndex);\n    // At this point we already know that there is at least one joiner so\n    // we can just pull its value and assign it directly rather than\n    // merging it into an empty array, which incurs unnecessary writes.\n    let allJoinedRanges: [number, number][] = [];\n    try {\n      allJoinedRanges = this._characterJoiners[0].handler(text);\n    } catch (error) {\n      console.error(error);\n    }\n    for (let i = 1; i < this._characterJoiners.length; i++) {\n      // We merge any overlapping ranges across the different joiners\n      try {\n        const joinerRanges = this._characterJoiners[i].handler(text);\n        for (let j = 0; j < joinerRanges.length; j++) {\n          CharacterJoinerService._mergeRanges(allJoinedRanges, joinerRanges[j]);\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    }\n    this._stringRangesToCellRanges(allJoinedRanges, lineData, startCol);\n    return allJoinedRanges;\n  }\n\n  /**\n   * Modifies the provided ranges in-place to adjust for variations between\n   * string length and cell width so that the range represents a cell range,\n   * rather than the string range the joiner provides.\n   * @param ranges String ranges containing start (inclusive) and end (exclusive) index\n   * @param line Cell data for the relevant line in the terminal\n   * @param startCol Offset within the line to start from\n   */\n  private _stringRangesToCellRanges(ranges: [number, number][], line: IBufferLine, startCol: number): void {\n    let currentRangeIndex = 0;\n    let currentRangeStarted = false;\n    let currentStringIndex = 0;\n    let currentRange = ranges[currentRangeIndex];\n\n    // If we got through all of the ranges, stop searching\n    if (!currentRange) {\n      return;\n    }\n\n    for (let x = startCol; x < this._bufferService.cols; x++) {\n      const width = line.getWidth(x);\n      const length = line.getString(x).length || WHITESPACE_CELL_CHAR.length;\n\n      // We skip zero-width characters when creating the string to join the text\n      // so we do the same here\n      if (width === 0) {\n        continue;\n      }\n\n      // Adjust the start of the range\n      if (!currentRangeStarted && currentRange[0] <= currentStringIndex) {\n        currentRange[0] = x;\n        currentRangeStarted = true;\n      }\n\n      // Adjust the end of the range\n      if (currentRange[1] <= currentStringIndex) {\n        currentRange[1] = x;\n\n        // We're finished with this range, so we move to the next one\n        currentRange = ranges[++currentRangeIndex];\n\n        // If there are no more ranges left, stop searching\n        if (!currentRange) {\n          break;\n        }\n\n        // Ranges can be on adjacent characters. Because the end index of the\n        // ranges are exclusive, this means that the index for the start of a\n        // range can be the same as the end index of the previous range. To\n        // account for the start of the next range, we check here just in case.\n        if (currentRange[0] <= currentStringIndex) {\n          currentRange[0] = x;\n          currentRangeStarted = true;\n        } else {\n          currentRangeStarted = false;\n        }\n      }\n\n      // Adjust the string index based on the character length to line up with\n      // the column adjustment\n      currentStringIndex += length;\n    }\n\n    // If there is still a range left at the end, it must extend all the way to\n    // the end of the line.\n    if (currentRange) {\n      currentRange[1] = this._bufferService.cols;\n    }\n  }\n\n  /**\n   * Merges the range defined by the provided start and end into the list of\n   * existing ranges. The merge is done in place on the existing range for\n   * performance and is also returned.\n   * @param ranges Existing range list\n   * @param newRange Tuple of two numbers representing the new range to merge in.\n   * @returns The ranges input with the new range merged in place\n   */\n  private static _mergeRanges(ranges: [number, number][], newRange: [number, number]): [number, number][] {\n    let inRange = false;\n    for (let i = 0; i < ranges.length; i++) {\n      const range = ranges[i];\n      if (!inRange) {\n        if (newRange[1] <= range[0]) {\n          // Case 1: New range is before the search range\n          ranges.splice(i, 0, newRange);\n          return ranges;\n        }\n\n        if (newRange[1] <= range[1]) {\n          // Case 2: New range is either wholly contained within the\n          // search range or overlaps with the front of it\n          range[0] = Math.min(newRange[0], range[0]);\n          return ranges;\n        }\n\n        if (newRange[0] < range[1]) {\n          // Case 3: New range either wholly contains the search range\n          // or overlaps with the end of it\n          range[0] = Math.min(newRange[0], range[0]);\n          inRange = true;\n        }\n\n        // Case 4: New range starts after the search range\n        continue;\n      } else {\n        if (newRange[1] <= range[0]) {\n          // Case 5: New range extends from previous range but doesn't\n          // reach the current one\n          ranges[i - 1][1] = newRange[1];\n          return ranges;\n        }\n\n        if (newRange[1] <= range[1]) {\n          // Case 6: New range extends from prvious range into the\n          // current range\n          ranges[i - 1][1] = Math.max(newRange[1], range[1]);\n          ranges.splice(i, 1);\n          return ranges;\n        }\n\n        // Case 7: New range extends from previous range past the\n        // end of the current range\n        ranges.splice(i, 1);\n        i--;\n      }\n    }\n\n    if (inRange) {\n      // Case 8: New range extends past the last existing range\n      ranges[ranges.length - 1][1] = newRange[1];\n    } else {\n      // Case 9: New range starts after the last existing range\n      ranges.push(newRange);\n    }\n\n    return ranges;\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ICoreBrowserService } from './Services';\n\nexport class CoreBrowserService implements ICoreBrowserService {\n  public serviceBrand: undefined;\n\n  constructor(\n    private _textarea: HTMLTextAreaElement\n  ) {\n  }\n\n  public get isFocused(): boolean {\n    const docOrShadowRoot = this._textarea.getRootNode ? this._textarea.getRootNode() as Document | ShadowRoot : document;\n    return docOrShadowRoot.activeElement === this._textarea && document.hasFocus();\n  }\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ICharSizeService, IRenderService, IMouseService } from './Services';\nimport { getCoords, getRawByteCoords } from 'browser/input/Mouse';\n\nexport class MouseService implements IMouseService {\n  public serviceBrand: undefined;\n\n  constructor(\n    @IRenderService private readonly _renderService: IRenderService,\n    @ICharSizeService private readonly _charSizeService: ICharSizeService\n  ) {\n  }\n\n  public getCoords(event: {clientX: number, clientY: number}, element: HTMLElement, colCount: number, rowCount: number, isSelection?: boolean): [number, number] | undefined {\n    return getCoords(\n      event,\n      element,\n      colCount,\n      rowCount,\n      this._charSizeService.hasValidSize,\n      this._renderService.dimensions.actualCellWidth,\n      this._renderService.dimensions.actualCellHeight,\n      isSelection\n    );\n  }\n\n  public getRawByteCoords(event: MouseEvent, element: HTMLElement, colCount: number, rowCount: number): { x: number, y: number } | undefined {\n    const coords = this.getCoords(event, element, colCount, rowCount);\n    return getRawByteCoords(coords);\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IRenderer, IRenderDimensions } from 'browser/renderer/Types';\nimport { RenderDebouncer } from 'browser/RenderDebouncer';\nimport { EventEmitter, IEvent } from 'common/EventEmitter';\nimport { Disposable } from 'common/Lifecycle';\nimport { ScreenDprMonitor } from 'browser/ScreenDprMonitor';\nimport { addDisposableDomListener } from 'browser/Lifecycle';\nimport { IColorSet, IRenderDebouncer } from 'browser/Types';\nimport { IOptionsService, IBufferService } from 'common/services/Services';\nimport { ICharSizeService, IRenderService } from 'browser/services/Services';\n\ninterface ISelectionState {\n  start: [number, number] | undefined;\n  end: [number, number] | undefined;\n  columnSelectMode: boolean;\n}\n\nexport class RenderService extends Disposable implements IRenderService {\n  public serviceBrand: undefined;\n\n  private _renderDebouncer: IRenderDebouncer;\n  private _screenDprMonitor: ScreenDprMonitor;\n\n  private _isPaused: boolean = false;\n  private _needsFullRefresh: boolean = false;\n  private _isNextRenderRedrawOnly: boolean = true;\n  private _needsSelectionRefresh: boolean = false;\n  private _canvasWidth: number = 0;\n  private _canvasHeight: number = 0;\n  private _selectionState: ISelectionState = {\n    start: undefined,\n    end: undefined,\n    columnSelectMode: false\n  };\n\n  private _onDimensionsChange = new EventEmitter<IRenderDimensions>();\n  public get onDimensionsChange(): IEvent<IRenderDimensions> { return this._onDimensionsChange.event; }\n  private _onRender = new EventEmitter<{ start: number, end: number }>();\n  public get onRenderedBufferChange(): IEvent<{ start: number, end: number }> { return this._onRender.event; }\n  private _onRefreshRequest = new EventEmitter<{ start: number, end: number }>();\n  public get onRefreshRequest(): IEvent<{ start: number, end: number }> { return this._onRefreshRequest.event; }\n\n  public get dimensions(): IRenderDimensions { return this._renderer.dimensions; }\n\n  constructor(\n    private _renderer: IRenderer,\n    private _rowCount: number,\n    screenElement: HTMLElement,\n    @IOptionsService optionsService: IOptionsService,\n    @ICharSizeService private readonly _charSizeService: ICharSizeService,\n    @IBufferService bufferService: IBufferService\n  ) {\n    super();\n\n    this.register({ dispose: () => this._renderer.dispose() });\n\n    this._renderDebouncer = new RenderDebouncer((start, end) => this._renderRows(start, end));\n    this.register(this._renderDebouncer);\n\n    this._screenDprMonitor = new ScreenDprMonitor();\n    this._screenDprMonitor.setListener(() => this.onDevicePixelRatioChange());\n    this.register(this._screenDprMonitor);\n\n    this.register(bufferService.onResize(e => this._fullRefresh()));\n    this.register(optionsService.onOptionChange(() => this._renderer.onOptionsChanged()));\n    this.register(this._charSizeService.onCharSizeChange(() => this.onCharSizeChanged()));\n\n    // No need to register this as renderer is explicitly disposed in RenderService.dispose\n    this._renderer.onRequestRedraw(e => this.refreshRows(e.start, e.end, true));\n\n    // dprchange should handle this case, we need this as well for browsers that don't support the\n    // matchMedia query.\n    this.register(addDisposableDomListener(window, 'resize', () => this.onDevicePixelRatioChange()));\n\n    // Detect whether IntersectionObserver is detected and enable renderer pause\n    // and resume based on terminal visibility if so\n    if ('IntersectionObserver' in window) {\n      const observer = new IntersectionObserver(e => this._onIntersectionChange(e[e.length - 1]), { threshold: 0 });\n      observer.observe(screenElement);\n      this.register({ dispose: () => observer.disconnect() });\n    }\n  }\n\n  private _onIntersectionChange(entry: IntersectionObserverEntry): void {\n    this._isPaused = entry.isIntersecting === undefined ? (entry.intersectionRatio === 0) : !entry.isIntersecting;\n\n    // Terminal was hidden on open\n    if (!this._isPaused && !this._charSizeService.hasValidSize) {\n      this._charSizeService.measure();\n    }\n\n    if (!this._isPaused && this._needsFullRefresh) {\n      this.refreshRows(0, this._rowCount - 1);\n      this._needsFullRefresh = false;\n    }\n  }\n\n  public refreshRows(start: number, end: number, isRedrawOnly: boolean = false): void {\n    if (this._isPaused) {\n      this._needsFullRefresh = true;\n      return;\n    }\n    if (!isRedrawOnly) {\n      this._isNextRenderRedrawOnly = false;\n    }\n    this._renderDebouncer.refresh(start, end, this._rowCount);\n  }\n\n  private _renderRows(start: number, end: number): void {\n    this._renderer.renderRows(start, end);\n\n    // Update selection if needed\n    if (this._needsSelectionRefresh) {\n      this._renderer.onSelectionChanged(this._selectionState.start, this._selectionState.end, this._selectionState.columnSelectMode);\n      this._needsSelectionRefresh = false;\n    }\n\n    // Fire render event only if it was not a redraw\n    if (!this._isNextRenderRedrawOnly) {\n      this._onRender.fire({ start, end });\n    }\n    this._isNextRenderRedrawOnly = true;\n  }\n\n  public resize(cols: number, rows: number): void {\n    this._rowCount = rows;\n    this._fireOnCanvasResize();\n  }\n\n  public changeOptions(): void {\n    this._renderer.onOptionsChanged();\n    this.refreshRows(0, this._rowCount - 1);\n    this._fireOnCanvasResize();\n  }\n\n  private _fireOnCanvasResize(): void {\n    // Don't fire the event if the dimensions haven't changed\n    if (this._renderer.dimensions.canvasWidth === this._canvasWidth && this._renderer.dimensions.canvasHeight === this._canvasHeight) {\n      return;\n    }\n    this._onDimensionsChange.fire(this._renderer.dimensions);\n  }\n\n  public dispose(): void {\n    super.dispose();\n  }\n\n  public setRenderer(renderer: IRenderer): void {\n    // TODO: RenderService should be the only one to dispose the renderer\n    this._renderer.dispose();\n    this._renderer = renderer;\n    this._renderer.onRequestRedraw(e => this.refreshRows(e.start, e.end, true));\n\n    // Force a refresh\n    this._needsSelectionRefresh = true;\n    this._fullRefresh();\n  }\n\n  private _fullRefresh(): void {\n    if (this._isPaused) {\n      this._needsFullRefresh = true;\n    } else {\n      this.refreshRows(0, this._rowCount - 1);\n    }\n  }\n\n  public clearTextureAtlas(): void {\n    this._renderer?.clearTextureAtlas?.();\n    this._fullRefresh();\n  }\n\n  public setColors(colors: IColorSet): void {\n    this._renderer.setColors(colors);\n    this._fullRefresh();\n  }\n\n  public onDevicePixelRatioChange(): void {\n    // Force char size measurement as DomMeasureStrategy(getBoundingClientRect) is not stable\n    // when devicePixelRatio changes\n    this._charSizeService.measure();\n\n    this._renderer.onDevicePixelRatioChange();\n    this.refreshRows(0, this._rowCount - 1);\n  }\n\n  public onResize(cols: number, rows: number): void {\n    this._renderer.onResize(cols, rows);\n    this._fullRefresh();\n  }\n\n  // TODO: Is this useful when we have onResize?\n  public onCharSizeChanged(): void {\n    this._renderer.onCharSizeChanged();\n  }\n\n  public onBlur(): void {\n    this._renderer.onBlur();\n  }\n\n  public onFocus(): void {\n    this._renderer.onFocus();\n  }\n\n  public onSelectionChanged(start: [number, number] | undefined, end: [number, number] | undefined, columnSelectMode: boolean): void {\n    this._selectionState.start = start;\n    this._selectionState.end = end;\n    this._selectionState.columnSelectMode = columnSelectMode;\n    this._renderer.onSelectionChanged(start, end, columnSelectMode);\n  }\n\n  public onCursorMove(): void {\n    this._renderer.onCursorMove();\n  }\n\n  public clear(): void {\n    this._renderer.clear();\n  }\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ISelectionRedrawRequestEvent, ISelectionRequestScrollLinesEvent } from 'browser/selection/Types';\nimport { IBuffer } from 'common/buffer/Types';\nimport { IBufferLine, IDisposable } from 'common/Types';\nimport * as Browser from 'common/Platform';\nimport { SelectionModel } from 'browser/selection/SelectionModel';\nimport { CellData } from 'common/buffer/CellData';\nimport { EventEmitter, IEvent } from 'common/EventEmitter';\nimport { IMouseService, ISelectionService, IRenderService } from 'browser/services/Services';\nimport { ILinkifier2 } from 'browser/Types';\nimport { IBufferService, IOptionsService, ICoreService } from 'common/services/Services';\nimport { getCoordsRelativeToElement } from 'browser/input/Mouse';\nimport { moveToCellSequence } from 'browser/input/MoveToCell';\nimport { Disposable } from 'common/Lifecycle';\nimport { getRangeLength } from 'common/buffer/BufferRange';\n\n/**\n * The number of pixels the mouse needs to be above or below the viewport in\n * order to scroll at the maximum speed.\n */\nconst DRAG_SCROLL_MAX_THRESHOLD = 50;\n\n/**\n * The maximum scrolling speed\n */\nconst DRAG_SCROLL_MAX_SPEED = 15;\n\n/**\n * The number of milliseconds between drag scroll updates.\n */\nconst DRAG_SCROLL_INTERVAL = 50;\n\n/**\n * The maximum amount of time that can have elapsed for an alt click to move the\n * cursor.\n */\nconst ALT_CLICK_MOVE_CURSOR_TIME = 500;\n\nconst NON_BREAKING_SPACE_CHAR = String.fromCharCode(160);\nconst ALL_NON_BREAKING_SPACE_REGEX = new RegExp(NON_BREAKING_SPACE_CHAR, 'g');\n\n/**\n * Represents a position of a word on a line.\n */\ninterface IWordPosition {\n  start: number;\n  length: number;\n}\n\n/**\n * A selection mode, this drives how the selection behaves on mouse move.\n */\nexport const enum SelectionMode {\n  NORMAL,\n  WORD,\n  LINE,\n  COLUMN\n}\n\n/**\n * A class that manages the selection of the terminal. With help from\n * SelectionModel, SelectionService handles with all logic associated with\n * dealing with the selection, including handling mouse interaction, wide\n * characters and fetching the actual text within the selection. Rendering is\n * not handled by the SelectionService but the onRedrawRequest event is fired\n * when the selection is ready to be redrawn (on an animation frame).\n */\nexport class SelectionService extends Disposable implements ISelectionService {\n  public serviceBrand: undefined;\n\n  protected _model: SelectionModel;\n\n  /**\n   * The amount to scroll every drag scroll update (depends on how far the mouse\n   * drag is above or below the terminal).\n   */\n  private _dragScrollAmount: number = 0;\n\n  /**\n   * The current selection mode.\n   */\n  protected _activeSelectionMode: SelectionMode;\n\n  /**\n   * A setInterval timer that is active while the mouse is down whose callback\n   * scrolls the viewport when necessary.\n   */\n  private _dragScrollIntervalTimer: number | undefined;\n\n  /**\n   * The animation frame ID used for refreshing the selection.\n   */\n  private _refreshAnimationFrame: number | undefined;\n\n  /**\n   * Whether selection is enabled.\n   */\n  private _enabled = true;\n\n  private _mouseMoveListener: EventListener;\n  private _mouseUpListener: EventListener;\n  private _trimListener: IDisposable;\n  private _workCell: CellData = new CellData();\n\n  private _mouseDownTimeStamp: number = 0;\n  private _oldHasSelection: boolean = false;\n  private _oldSelectionStart: [number, number] | undefined = undefined;\n  private _oldSelectionEnd: [number, number] | undefined = undefined;\n\n  private _onLinuxMouseSelection = this.register(new EventEmitter<string>());\n  public get onLinuxMouseSelection(): IEvent<string> { return this._onLinuxMouseSelection.event; }\n  private _onRedrawRequest = this.register(new EventEmitter<ISelectionRedrawRequestEvent>());\n  public get onRequestRedraw(): IEvent<ISelectionRedrawRequestEvent> { return this._onRedrawRequest.event; }\n  private _onSelectionChange = this.register(new EventEmitter<void>());\n  public get onSelectionChange(): IEvent<void> { return this._onSelectionChange.event; }\n  private _onRequestScrollLines = this.register(new EventEmitter<ISelectionRequestScrollLinesEvent>());\n  public get onRequestScrollLines(): IEvent<ISelectionRequestScrollLinesEvent> { return this._onRequestScrollLines.event; }\n\n  constructor(\n    private readonly _element: HTMLElement,\n    private readonly _screenElement: HTMLElement,\n    private readonly _linkifier: ILinkifier2,\n    @IBufferService private readonly _bufferService: IBufferService,\n    @ICoreService private readonly _coreService: ICoreService,\n    @IMouseService private readonly _mouseService: IMouseService,\n    @IOptionsService private readonly _optionsService: IOptionsService,\n    @IRenderService private readonly _renderService: IRenderService\n  ) {\n    super();\n\n    // Init listeners\n    this._mouseMoveListener = event => this._onMouseMove(event as MouseEvent);\n    this._mouseUpListener = event => this._onMouseUp(event as MouseEvent);\n    this._coreService.onUserInput(() => {\n      if (this.hasSelection) {\n        this.clearSelection();\n      }\n    });\n    this._trimListener = this._bufferService.buffer.lines.onTrim(amount => this._onTrim(amount));\n    this.register(this._bufferService.buffers.onBufferActivate(e => this._onBufferActivate(e)));\n\n    this.enable();\n\n    this._model = new SelectionModel(this._bufferService);\n    this._activeSelectionMode = SelectionMode.NORMAL;\n  }\n\n  public dispose(): void {\n    this._removeMouseDownListeners();\n  }\n\n  public reset(): void {\n    this.clearSelection();\n  }\n\n  /**\n   * Disables the selection manager. This is useful for when terminal mouse\n   * are enabled.\n   */\n  public disable(): void {\n    this.clearSelection();\n    this._enabled = false;\n  }\n\n  /**\n   * Enable the selection manager.\n   */\n  public enable(): void {\n    this._enabled = true;\n  }\n\n  public get selectionStart(): [number, number] | undefined { return this._model.finalSelectionStart; }\n  public get selectionEnd(): [number, number] | undefined { return this._model.finalSelectionEnd; }\n\n  /**\n   * Gets whether there is an active text selection.\n   */\n  public get hasSelection(): boolean {\n    const start = this._model.finalSelectionStart;\n    const end = this._model.finalSelectionEnd;\n    if (!start || !end) {\n      return false;\n    }\n    return start[0] !== end[0] || start[1] !== end[1];\n  }\n\n  /**\n   * Gets the text currently selected.\n   */\n  public get selectionText(): string {\n    const start = this._model.finalSelectionStart;\n    const end = this._model.finalSelectionEnd;\n    if (!start || !end) {\n      return '';\n    }\n\n    const buffer = this._bufferService.buffer;\n    const result: string[] = [];\n\n    if (this._activeSelectionMode === SelectionMode.COLUMN) {\n      // Ignore zero width selections\n      if (start[0] === end[0]) {\n        return '';\n      }\n\n      for (let i = start[1]; i <= end[1]; i++) {\n        const lineText = buffer.translateBufferLineToString(i, true, start[0], end[0]);\n        result.push(lineText);\n      }\n    } else {\n      // Get first row\n      const startRowEndCol = start[1] === end[1] ? end[0] : undefined;\n      result.push(buffer.translateBufferLineToString(start[1], true, start[0], startRowEndCol));\n\n      // Get middle rows\n      for (let i = start[1] + 1; i <= end[1] - 1; i++) {\n        const bufferLine = buffer.lines.get(i);\n        const lineText = buffer.translateBufferLineToString(i, true);\n        if (bufferLine?.isWrapped) {\n          result[result.length - 1] += lineText;\n        } else {\n          result.push(lineText);\n        }\n      }\n\n      // Get final row\n      if (start[1] !== end[1]) {\n        const bufferLine = buffer.lines.get(end[1]);\n        const lineText = buffer.translateBufferLineToString(end[1], true, 0, end[0]);\n        if (bufferLine && bufferLine!.isWrapped) {\n          result[result.length - 1] += lineText;\n        } else {\n          result.push(lineText);\n        }\n      }\n    }\n\n    // Format string by replacing non-breaking space chars with regular spaces\n    // and joining the array into a multi-line string.\n    const formattedResult = result.map(line => {\n      return line.replace(ALL_NON_BREAKING_SPACE_REGEX, ' ');\n    }).join(Browser.isWindows ? '\\r\\n' : '\\n');\n\n    return formattedResult;\n  }\n\n  /**\n   * Clears the current terminal selection.\n   */\n  public clearSelection(): void {\n    this._model.clearSelection();\n    this._removeMouseDownListeners();\n    this.refresh();\n    this._onSelectionChange.fire();\n  }\n\n  /**\n   * Queues a refresh, redrawing the selection on the next opportunity.\n   * @param isLinuxMouseSelection Whether the selection should be registered as a new\n   * selection on Linux.\n   */\n  public refresh(isLinuxMouseSelection?: boolean): void {\n    // Queue the refresh for the renderer\n    if (!this._refreshAnimationFrame) {\n      this._refreshAnimationFrame = window.requestAnimationFrame(() => this._refresh());\n    }\n\n    // If the platform is Linux and the refresh call comes from a mouse event,\n    // we need to update the selection for middle click to paste selection.\n    if (Browser.isLinux && isLinuxMouseSelection) {\n      const selectionText = this.selectionText;\n      if (selectionText.length) {\n        this._onLinuxMouseSelection.fire(this.selectionText);\n      }\n    }\n  }\n\n  /**\n   * Fires the refresh event, causing consumers to pick it up and redraw the\n   * selection state.\n   */\n  private _refresh(): void {\n    this._refreshAnimationFrame = undefined;\n    this._onRedrawRequest.fire({\n      start: this._model.finalSelectionStart,\n      end: this._model.finalSelectionEnd,\n      columnSelectMode: this._activeSelectionMode === SelectionMode.COLUMN\n    });\n  }\n\n  /**\n   * Checks if the current click was inside the current selection\n   * @param event The mouse event\n   */\n  private _isClickInSelection(event: MouseEvent): boolean {\n    const coords = this._getMouseBufferCoords(event);\n    const start = this._model.finalSelectionStart;\n    const end = this._model.finalSelectionEnd;\n\n    if (!start || !end || !coords) {\n      return false;\n    }\n\n    return this._areCoordsInSelection(coords, start, end);\n  }\n\n  protected _areCoordsInSelection(coords: [number, number], start: [number, number], end: [number, number]): boolean {\n    return (coords[1] > start[1] && coords[1] < end[1]) ||\n        (start[1] === end[1] && coords[1] === start[1] && coords[0] >= start[0] && coords[0] < end[0]) ||\n        (start[1] < end[1] && coords[1] === end[1] && coords[0] < end[0]) ||\n        (start[1] < end[1] && coords[1] === start[1] && coords[0] >= start[0]);\n  }\n\n  /**\n   * Selects word at the current mouse event coordinates.\n   * @param event The mouse event.\n   */\n  private _selectWordAtCursor(event: MouseEvent, allowWhitespaceOnlySelection: boolean): boolean {\n    // Check if there is a link under the cursor first and select that if so\n    const range = this._linkifier.currentLink?.link?.range;\n    if (range) {\n      this._model.selectionStart = [range.start.x - 1, range.start.y - 1];\n      this._model.selectionStartLength = getRangeLength(range, this._bufferService.cols);\n      this._model.selectionEnd = undefined;\n      return true;\n    }\n\n    const coords = this._getMouseBufferCoords(event);\n    if (coords) {\n      this._selectWordAt(coords, allowWhitespaceOnlySelection);\n      this._model.selectionEnd = undefined;\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Selects all text within the terminal.\n   */\n  public selectAll(): void {\n    this._model.isSelectAllActive = true;\n    this.refresh();\n    this._onSelectionChange.fire();\n  }\n\n  public selectLines(start: number, end: number): void {\n    this._model.clearSelection();\n    start = Math.max(start, 0);\n    end = Math.min(end, this._bufferService.buffer.lines.length - 1);\n    this._model.selectionStart = [0, start];\n    this._model.selectionEnd = [this._bufferService.cols, end];\n    this.refresh();\n    this._onSelectionChange.fire();\n  }\n\n  /**\n   * Handle the buffer being trimmed, adjust the selection position.\n   * @param amount The amount the buffer is being trimmed.\n   */\n  private _onTrim(amount: number): void {\n    const needsRefresh = this._model.onTrim(amount);\n    if (needsRefresh) {\n      this.refresh();\n    }\n  }\n\n  /**\n   * Gets the 0-based [x, y] buffer coordinates of the current mouse event.\n   * @param event The mouse event.\n   */\n  private _getMouseBufferCoords(event: MouseEvent): [number, number] | undefined {\n    const coords = this._mouseService.getCoords(event, this._screenElement, this._bufferService.cols, this._bufferService.rows, true);\n    if (!coords) {\n      return undefined;\n    }\n\n    // Convert to 0-based\n    coords[0]--;\n    coords[1]--;\n\n    // Convert viewport coords to buffer coords\n    coords[1] += this._bufferService.buffer.ydisp;\n    return coords;\n  }\n\n  /**\n   * Gets the amount the viewport should be scrolled based on how far out of the\n   * terminal the mouse is.\n   * @param event The mouse event.\n   */\n  private _getMouseEventScrollAmount(event: MouseEvent): number {\n    let offset = getCoordsRelativeToElement(event, this._screenElement)[1];\n    const terminalHeight = this._renderService.dimensions.canvasHeight;\n    if (offset >= 0 && offset <= terminalHeight) {\n      return 0;\n    }\n    if (offset > terminalHeight) {\n      offset -= terminalHeight;\n    }\n\n    offset = Math.min(Math.max(offset, -DRAG_SCROLL_MAX_THRESHOLD), DRAG_SCROLL_MAX_THRESHOLD);\n    offset /= DRAG_SCROLL_MAX_THRESHOLD;\n    return (offset / Math.abs(offset)) + Math.round(offset * (DRAG_SCROLL_MAX_SPEED - 1));\n  }\n\n  /**\n   * Returns whether the selection manager should force selection, regardless of\n   * whether the terminal is in mouse events mode.\n   * @param event The mouse event.\n   */\n  public shouldForceSelection(event: MouseEvent): boolean {\n    if (Browser.isMac) {\n      return event.altKey && this._optionsService.rawOptions.macOptionClickForcesSelection;\n    }\n\n    return event.shiftKey;\n  }\n\n  /**\n   * Handles te mousedown event, setting up for a new selection.\n   * @param event The mousedown event.\n   */\n  public onMouseDown(event: MouseEvent): void {\n    this._mouseDownTimeStamp = event.timeStamp;\n    // If we have selection, we want the context menu on right click even if the\n    // terminal is in mouse mode.\n    if (event.button === 2 && this.hasSelection) {\n      return;\n    }\n\n    // Only action the primary button\n    if (event.button !== 0) {\n      return;\n    }\n\n    // Allow selection when using a specific modifier key, even when disabled\n    if (!this._enabled) {\n      if (!this.shouldForceSelection(event)) {\n        return;\n      }\n\n      // Don't send the mouse down event to the current process, we want to select\n      event.stopPropagation();\n    }\n\n    // Tell the browser not to start a regular selection\n    event.preventDefault();\n\n    // Reset drag scroll state\n    this._dragScrollAmount = 0;\n\n    if (this._enabled && event.shiftKey) {\n      this._onIncrementalClick(event);\n    } else {\n      if (event.detail === 1) {\n        this._onSingleClick(event);\n      } else if (event.detail === 2) {\n        this._onDoubleClick(event);\n      } else if (event.detail === 3) {\n        this._onTripleClick(event);\n      }\n    }\n\n    this._addMouseDownListeners();\n    this.refresh(true);\n  }\n\n  /**\n   * Adds listeners when mousedown is triggered.\n   */\n  private _addMouseDownListeners(): void {\n    // Listen on the document so that dragging outside of viewport works\n    if (this._screenElement.ownerDocument) {\n      this._screenElement.ownerDocument.addEventListener('mousemove', this._mouseMoveListener);\n      this._screenElement.ownerDocument.addEventListener('mouseup', this._mouseUpListener);\n    }\n    this._dragScrollIntervalTimer = window.setInterval(() => this._dragScroll(), DRAG_SCROLL_INTERVAL);\n  }\n\n  /**\n   * Removes the listeners that are registered when mousedown is triggered.\n   */\n  private _removeMouseDownListeners(): void {\n    if (this._screenElement.ownerDocument) {\n      this._screenElement.ownerDocument.removeEventListener('mousemove', this._mouseMoveListener);\n      this._screenElement.ownerDocument.removeEventListener('mouseup', this._mouseUpListener);\n    }\n    clearInterval(this._dragScrollIntervalTimer);\n    this._dragScrollIntervalTimer = undefined;\n  }\n\n  /**\n   * Performs an incremental click, setting the selection end position to the mouse\n   * position.\n   * @param event The mouse event.\n   */\n  private _onIncrementalClick(event: MouseEvent): void {\n    if (this._model.selectionStart) {\n      this._model.selectionEnd = this._getMouseBufferCoords(event);\n    }\n  }\n\n  /**\n   * Performs a single click, resetting relevant state and setting the selection\n   * start position.\n   * @param event The mouse event.\n   */\n  private _onSingleClick(event: MouseEvent): void {\n    this._model.selectionStartLength = 0;\n    this._model.isSelectAllActive = false;\n    this._activeSelectionMode = this.shouldColumnSelect(event) ? SelectionMode.COLUMN : SelectionMode.NORMAL;\n\n    // Initialize the new selection\n    this._model.selectionStart = this._getMouseBufferCoords(event);\n    if (!this._model.selectionStart) {\n      return;\n    }\n    this._model.selectionEnd = undefined;\n\n    // Ensure the line exists\n    const line = this._bufferService.buffer.lines.get(this._model.selectionStart[1]);\n    if (!line) {\n      return;\n    }\n\n    // Return early if the click event is not in the buffer (eg. in scroll bar)\n    if (line.length === this._model.selectionStart[0]) {\n      return;\n    }\n\n    // If the mouse is over the second half of a wide character, adjust the\n    // selection to cover the whole character\n    if (line.hasWidth(this._model.selectionStart[0]) === 0) {\n      this._model.selectionStart[0]++;\n    }\n  }\n\n  /**\n   * Performs a double click, selecting the current word.\n   * @param event The mouse event.\n   */\n  private _onDoubleClick(event: MouseEvent): void {\n    if (this._selectWordAtCursor(event, true)) {\n      this._activeSelectionMode = SelectionMode.WORD;\n    }\n  }\n\n  /**\n   * Performs a triple click, selecting the current line and activating line\n   * select mode.\n   * @param event The mouse event.\n   */\n  private _onTripleClick(event: MouseEvent): void {\n    const coords = this._getMouseBufferCoords(event);\n    if (coords) {\n      this._activeSelectionMode = SelectionMode.LINE;\n      this._selectLineAt(coords[1]);\n    }\n  }\n\n  /**\n   * Returns whether the selection manager should operate in column select mode\n   * @param event the mouse or keyboard event\n   */\n  public shouldColumnSelect(event: KeyboardEvent | MouseEvent): boolean {\n    return event.altKey && !(Browser.isMac && this._optionsService.rawOptions.macOptionClickForcesSelection);\n  }\n\n  /**\n   * Handles the mousemove event when the mouse button is down, recording the\n   * end of the selection and refreshing the selection.\n   * @param event The mousemove event.\n   */\n  private _onMouseMove(event: MouseEvent): void {\n    // If the mousemove listener is active it means that a selection is\n    // currently being made, we should stop propagation to prevent mouse events\n    // to be sent to the pty.\n    event.stopImmediatePropagation();\n\n    // Do nothing if there is no selection start, this can happen if the first\n    // click in the terminal is an incremental click\n    if (!this._model.selectionStart) {\n      return;\n    }\n\n    // Record the previous position so we know whether to redraw the selection\n    // at the end.\n    const previousSelectionEnd = this._model.selectionEnd ? [this._model.selectionEnd[0], this._model.selectionEnd[1]] : null;\n\n    // Set the initial selection end based on the mouse coordinates\n    this._model.selectionEnd = this._getMouseBufferCoords(event);\n    if (!this._model.selectionEnd) {\n      this.refresh(true);\n      return;\n    }\n\n    // Select the entire line if line select mode is active.\n    if (this._activeSelectionMode === SelectionMode.LINE) {\n      if (this._model.selectionEnd[1] < this._model.selectionStart[1]) {\n        this._model.selectionEnd[0] = 0;\n      } else {\n        this._model.selectionEnd[0] = this._bufferService.cols;\n      }\n    } else if (this._activeSelectionMode === SelectionMode.WORD) {\n      this._selectToWordAt(this._model.selectionEnd);\n    }\n\n    // Determine the amount of scrolling that will happen.\n    this._dragScrollAmount = this._getMouseEventScrollAmount(event);\n\n    // If the cursor was above or below the viewport, make sure it's at the\n    // start or end of the viewport respectively. This should only happen when\n    // NOT in column select mode.\n    if (this._activeSelectionMode !== SelectionMode.COLUMN) {\n      if (this._dragScrollAmount > 0) {\n        this._model.selectionEnd[0] = this._bufferService.cols;\n      } else if (this._dragScrollAmount < 0) {\n        this._model.selectionEnd[0] = 0;\n      }\n    }\n\n    // If the character is a wide character include the cell to the right in the\n    // selection. Note that selections at the very end of the line will never\n    // have a character.\n    const buffer = this._bufferService.buffer;\n    if (this._model.selectionEnd[1] < buffer.lines.length) {\n      const line = buffer.lines.get(this._model.selectionEnd[1]);\n      if (line && line.hasWidth(this._model.selectionEnd[0]) === 0) {\n        this._model.selectionEnd[0]++;\n      }\n    }\n\n    // Only draw here if the selection changes.\n    if (!previousSelectionEnd ||\n      previousSelectionEnd[0] !== this._model.selectionEnd[0] ||\n      previousSelectionEnd[1] !== this._model.selectionEnd[1]) {\n      this.refresh(true);\n    }\n  }\n\n  /**\n   * The callback that occurs every DRAG_SCROLL_INTERVAL ms that does the\n   * scrolling of the viewport.\n   */\n  private _dragScroll(): void {\n    if (!this._model.selectionEnd || !this._model.selectionStart) {\n      return;\n    }\n    if (this._dragScrollAmount) {\n      this._onRequestScrollLines.fire({ amount: this._dragScrollAmount, suppressScrollEvent: false });\n      // Re-evaluate selection\n      // If the cursor was above or below the viewport, make sure it's at the\n      // start or end of the viewport respectively. This should only happen when\n      // NOT in column select mode.\n      const buffer = this._bufferService.buffer;\n      if (this._dragScrollAmount > 0) {\n        if (this._activeSelectionMode !== SelectionMode.COLUMN) {\n          this._model.selectionEnd[0] = this._bufferService.cols;\n        }\n        this._model.selectionEnd[1] = Math.min(buffer.ydisp + this._bufferService.rows, buffer.lines.length - 1);\n      } else {\n        if (this._activeSelectionMode !== SelectionMode.COLUMN) {\n          this._model.selectionEnd[0] = 0;\n        }\n        this._model.selectionEnd[1] = buffer.ydisp;\n      }\n      this.refresh();\n    }\n  }\n\n  /**\n   * Handles the mouseup event, removing the mousedown listeners.\n   * @param event The mouseup event.\n   */\n  private _onMouseUp(event: MouseEvent): void {\n    const timeElapsed = event.timeStamp - this._mouseDownTimeStamp;\n\n    this._removeMouseDownListeners();\n\n    if (this.selectionText.length <= 1 && timeElapsed < ALT_CLICK_MOVE_CURSOR_TIME && event.altKey && this._optionsService.getOption('altClickMovesCursor')) {\n      if (this._bufferService.buffer.ybase === this._bufferService.buffer.ydisp) {\n        const coordinates = this._mouseService.getCoords(\n          event,\n          this._element,\n          this._bufferService.cols,\n          this._bufferService.rows,\n          false\n        );\n        if (coordinates && coordinates[0] !== undefined && coordinates[1] !== undefined) {\n          const sequence = moveToCellSequence(coordinates[0] - 1, coordinates[1] - 1, this._bufferService, this._coreService.decPrivateModes.applicationCursorKeys);\n          this._coreService.triggerDataEvent(sequence, true);\n        }\n      }\n    } else {\n      this._fireEventIfSelectionChanged();\n    }\n  }\n\n  private _fireEventIfSelectionChanged(): void {\n    const start = this._model.finalSelectionStart;\n    const end = this._model.finalSelectionEnd;\n    const hasSelection = !!start && !!end && (start[0] !== end[0] || start[1] !== end[1]);\n\n    if (!hasSelection) {\n      if (this._oldHasSelection) {\n        this._fireOnSelectionChange(start, end, hasSelection);\n      }\n      return;\n    }\n\n    // Sanity check, these should not be undefined as there is a selection\n    if (!start || !end) {\n      return;\n    }\n\n    if (!this._oldSelectionStart || !this._oldSelectionEnd || (\n      start[0] !== this._oldSelectionStart[0] || start[1] !== this._oldSelectionStart[1] ||\n      end[0] !== this._oldSelectionEnd[0] || end[1] !== this._oldSelectionEnd[1])) {\n\n      this._fireOnSelectionChange(start, end, hasSelection);\n    }\n  }\n\n  private _fireOnSelectionChange(start: [number, number] | undefined, end: [number, number] | undefined, hasSelection: boolean): void {\n    this._oldSelectionStart = start;\n    this._oldSelectionEnd = end;\n    this._oldHasSelection = hasSelection;\n    this._onSelectionChange.fire();\n  }\n\n  private _onBufferActivate(e: {activeBuffer: IBuffer, inactiveBuffer: IBuffer}): void {\n    this.clearSelection();\n    // Only adjust the selection on trim, shiftElements is rarely used (only in\n    // reverseIndex) and delete in a splice is only ever used when the same\n    // number of elements was just added. Given this is could actually be\n    // beneficial to leave the selection as is for these cases.\n    this._trimListener.dispose();\n    this._trimListener = e.activeBuffer.lines.onTrim(amount => this._onTrim(amount));\n  }\n\n  /**\n   * Converts a viewport column to the character index on the buffer line, the\n   * latter takes into account wide characters.\n   * @param coords The coordinates to find the 2 index for.\n   */\n  private _convertViewportColToCharacterIndex(bufferLine: IBufferLine, coords: [number, number]): number {\n    let charIndex = coords[0];\n    for (let i = 0; coords[0] >= i; i++) {\n      const length = bufferLine.loadCell(i, this._workCell).getChars().length;\n      if (this._workCell.getWidth() === 0) {\n        // Wide characters aren't included in the line string so decrement the\n        // index so the index is back on the wide character.\n        charIndex--;\n      } else if (length > 1 && coords[0] !== i) {\n        // Emojis take up multiple characters, so adjust accordingly. For these\n        // we don't want ot include the character at the column as we're\n        // returning the start index in the string, not the end index.\n        charIndex += length - 1;\n      }\n    }\n    return charIndex;\n  }\n\n  public setSelection(col: number, row: number, length: number): void {\n    this._model.clearSelection();\n    this._removeMouseDownListeners();\n    this._model.selectionStart = [col, row];\n    this._model.selectionStartLength = length;\n    this.refresh();\n  }\n\n  public rightClickSelect(ev: MouseEvent): void {\n    if (!this._isClickInSelection(ev)) {\n      if (this._selectWordAtCursor(ev, false)) {\n        this.refresh(true);\n      }\n      this._fireEventIfSelectionChanged();\n    }\n  }\n\n  /**\n   * Gets positional information for the word at the coordinated specified.\n   * @param coords The coordinates to get the word at.\n   */\n  private _getWordAt(coords: [number, number], allowWhitespaceOnlySelection: boolean, followWrappedLinesAbove: boolean = true, followWrappedLinesBelow: boolean = true): IWordPosition | undefined {\n    // Ensure coords are within viewport (eg. not within scroll bar)\n    if (coords[0] >= this._bufferService.cols) {\n      return undefined;\n    }\n\n    const buffer = this._bufferService.buffer;\n    const bufferLine = buffer.lines.get(coords[1]);\n    if (!bufferLine) {\n      return undefined;\n    }\n\n    const line = buffer.translateBufferLineToString(coords[1], false);\n\n    // Get actual index, taking into consideration wide characters\n    let startIndex = this._convertViewportColToCharacterIndex(bufferLine, coords);\n    let endIndex = startIndex;\n\n    // Record offset to be used later\n    const charOffset = coords[0] - startIndex;\n    let leftWideCharCount = 0;\n    let rightWideCharCount = 0;\n    let leftLongCharOffset = 0;\n    let rightLongCharOffset = 0;\n\n    if (line.charAt(startIndex) === ' ') {\n      // Expand until non-whitespace is hit\n      while (startIndex > 0 && line.charAt(startIndex - 1) === ' ') {\n        startIndex--;\n      }\n      while (endIndex < line.length && line.charAt(endIndex + 1) === ' ') {\n        endIndex++;\n      }\n    } else {\n      // Expand until whitespace is hit. This algorithm works by scanning left\n      // and right from the starting position, keeping both the index format\n      // (line) and the column format (bufferLine) in sync. When a wide\n      // character is hit, it is recorded and the column index is adjusted.\n      let startCol = coords[0];\n      let endCol = coords[0];\n\n      // Consider the initial position, skip it and increment the wide char\n      // variable\n      if (bufferLine.getWidth(startCol) === 0) {\n        leftWideCharCount++;\n        startCol--;\n      }\n      if (bufferLine.getWidth(endCol) === 2) {\n        rightWideCharCount++;\n        endCol++;\n      }\n\n      // Adjust the end index for characters whose length are > 1 (emojis)\n      const length = bufferLine.getString(endCol).length;\n      if (length > 1) {\n        rightLongCharOffset += length - 1;\n        endIndex += length - 1;\n      }\n\n      // Expand the string in both directions until a space is hit\n      while (startCol > 0 && startIndex > 0 && !this._isCharWordSeparator(bufferLine.loadCell(startCol - 1, this._workCell))) {\n        bufferLine.loadCell(startCol - 1, this._workCell);\n        const length = this._workCell.getChars().length;\n        if (this._workCell.getWidth() === 0) {\n          // If the next character is a wide char, record it and skip the column\n          leftWideCharCount++;\n          startCol--;\n        } else if (length > 1) {\n          // If the next character's string is longer than 1 char (eg. emoji),\n          // adjust the index\n          leftLongCharOffset += length - 1;\n          startIndex -= length - 1;\n        }\n        startIndex--;\n        startCol--;\n      }\n      while (endCol < bufferLine.length && endIndex + 1 < line.length && !this._isCharWordSeparator(bufferLine.loadCell(endCol + 1, this._workCell))) {\n        bufferLine.loadCell(endCol + 1, this._workCell);\n        const length = this._workCell.getChars().length;\n        if (this._workCell.getWidth() === 2) {\n          // If the next character is a wide char, record it and skip the column\n          rightWideCharCount++;\n          endCol++;\n        } else if (length > 1) {\n          // If the next character's string is longer than 1 char (eg. emoji),\n          // adjust the index\n          rightLongCharOffset += length - 1;\n          endIndex += length - 1;\n        }\n        endIndex++;\n        endCol++;\n      }\n    }\n\n    // Incremenet the end index so it is at the start of the next character\n    endIndex++;\n\n    // Calculate the start _column_, converting the the string indexes back to\n    // column coordinates.\n    let start =\n        startIndex // The index of the selection's start char in the line string\n        + charOffset // The difference between the initial char's column and index\n        - leftWideCharCount // The number of wide chars left of the initial char\n        + leftLongCharOffset; // The number of additional chars left of the initial char added by columns with strings longer than 1 (emojis)\n\n    // Calculate the length in _columns_, converting the the string indexes back\n    // to column coordinates.\n    let length = Math.min(this._bufferService.cols, // Disallow lengths larger than the terminal cols\n      endIndex // The index of the selection's end char in the line string\n      - startIndex // The index of the selection's start char in the line string\n      + leftWideCharCount // The number of wide chars left of the initial char\n      + rightWideCharCount // The number of wide chars right of the initial char (inclusive)\n      - leftLongCharOffset // The number of additional chars left of the initial char added by columns with strings longer than 1 (emojis)\n      - rightLongCharOffset); // The number of additional chars right of the initial char (inclusive) added by columns with strings longer than 1 (emojis)\n\n    if (!allowWhitespaceOnlySelection && line.slice(startIndex, endIndex).trim() === '') {\n      return undefined;\n    }\n\n    // Recurse upwards if the line is wrapped and the word wraps to the above line\n    if (followWrappedLinesAbove) {\n      if (start === 0 && bufferLine.getCodePoint(0) !== 32 /* ' ' */) {\n        const previousBufferLine = buffer.lines.get(coords[1] - 1);\n        if (previousBufferLine && bufferLine.isWrapped && previousBufferLine.getCodePoint(this._bufferService.cols - 1) !== 32 /* ' ' */) {\n          const previousLineWordPosition = this._getWordAt([this._bufferService.cols - 1, coords[1] - 1], false, true, false);\n          if (previousLineWordPosition) {\n            const offset = this._bufferService.cols - previousLineWordPosition.start;\n            start -= offset;\n            length += offset;\n          }\n        }\n      }\n    }\n\n    // Recurse downwards if the line is wrapped and the word wraps to the next line\n    if (followWrappedLinesBelow) {\n      if (start + length === this._bufferService.cols && bufferLine.getCodePoint(this._bufferService.cols - 1) !== 32 /* ' ' */) {\n        const nextBufferLine = buffer.lines.get(coords[1] + 1);\n        if (nextBufferLine?.isWrapped && nextBufferLine.getCodePoint(0) !== 32 /* ' ' */) {\n          const nextLineWordPosition = this._getWordAt([0, coords[1] + 1], false, false, true);\n          if (nextLineWordPosition) {\n            length += nextLineWordPosition.length;\n          }\n        }\n      }\n    }\n\n    return { start, length };\n  }\n\n  /**\n   * Selects the word at the coordinates specified.\n   * @param coords The coordinates to get the word at.\n   * @param allowWhitespaceOnlySelection If whitespace should be selected\n   */\n  protected _selectWordAt(coords: [number, number], allowWhitespaceOnlySelection: boolean): void {\n    const wordPosition = this._getWordAt(coords, allowWhitespaceOnlySelection);\n    if (wordPosition) {\n      // Adjust negative start value\n      while (wordPosition.start < 0) {\n        wordPosition.start += this._bufferService.cols;\n        coords[1]--;\n      }\n      this._model.selectionStart = [wordPosition.start, coords[1]];\n      this._model.selectionStartLength = wordPosition.length;\n    }\n  }\n\n  /**\n   * Sets the selection end to the word at the coordinated specified.\n   * @param coords The coordinates to get the word at.\n   */\n  private _selectToWordAt(coords: [number, number]): void {\n    const wordPosition = this._getWordAt(coords, true);\n    if (wordPosition) {\n      let endRow = coords[1];\n\n      // Adjust negative start value\n      while (wordPosition.start < 0) {\n        wordPosition.start += this._bufferService.cols;\n        endRow--;\n      }\n\n      // Adjust wrapped length value, this only needs to happen when values are reversed as in that\n      // case we're interested in the start of the word, not the end\n      if (!this._model.areSelectionValuesReversed()) {\n        while (wordPosition.start + wordPosition.length > this._bufferService.cols) {\n          wordPosition.length -= this._bufferService.cols;\n          endRow++;\n        }\n      }\n\n      this._model.selectionEnd = [this._model.areSelectionValuesReversed() ? wordPosition.start : wordPosition.start + wordPosition.length, endRow];\n    }\n  }\n\n  /**\n   * Gets whether the character is considered a word separator by the select\n   * word logic.\n   * @param char The character to check.\n   */\n  private _isCharWordSeparator(cell: CellData): boolean {\n    // Zero width characters are never separators as they are always to the\n    // right of wide characters\n    if (cell.getWidth() === 0) {\n      return false;\n    }\n    return this._optionsService.rawOptions.wordSeparator.indexOf(cell.getChars()) >= 0;\n  }\n\n  /**\n   * Selects the line specified.\n   * @param line The line index.\n   */\n  protected _selectLineAt(line: number): void {\n    const wrappedRange = this._bufferService.buffer.getWrappedRangeForLine(line);\n    this._model.selectionStart = [0, wrappedRange.first];\n    this._model.selectionEnd = [this._bufferService.cols, wrappedRange.last];\n    this._model.selectionStartLength = 0;\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IEvent } from 'common/EventEmitter';\nimport { IRenderDimensions, IRenderer } from 'browser/renderer/Types';\nimport { IColorSet } from 'browser/Types';\nimport { ISelectionRedrawRequestEvent as ISelectionRequestRedrawEvent, ISelectionRequestScrollLinesEvent } from 'browser/selection/Types';\nimport { createDecorator } from 'common/services/ServiceRegistry';\nimport { IDisposable } from 'common/Types';\n\nexport const ICharSizeService = createDecorator<ICharSizeService>('CharSizeService');\nexport interface ICharSizeService {\n  serviceBrand: undefined;\n\n  readonly width: number;\n  readonly height: number;\n  readonly hasValidSize: boolean;\n\n  readonly onCharSizeChange: IEvent<void>;\n\n  measure(): void;\n}\n\nexport const ICoreBrowserService = createDecorator<ICoreBrowserService>('CoreBrowserService');\nexport interface ICoreBrowserService {\n  serviceBrand: undefined;\n\n  readonly isFocused: boolean;\n}\n\nexport const IMouseService = createDecorator<IMouseService>('MouseService');\nexport interface IMouseService {\n  serviceBrand: undefined;\n\n  getCoords(event: {clientX: number, clientY: number}, element: HTMLElement, colCount: number, rowCount: number, isSelection?: boolean): [number, number] | undefined;\n  getRawByteCoords(event: MouseEvent, element: HTMLElement, colCount: number, rowCount: number): { x: number, y: number } | undefined;\n}\n\nexport const IRenderService = createDecorator<IRenderService>('RenderService');\nexport interface IRenderService extends IDisposable {\n  serviceBrand: undefined;\n\n  onDimensionsChange: IEvent<IRenderDimensions>;\n  /**\n   * Fires when buffer changes are rendered. This does not fire when only cursor\n   * or selections are rendered.\n   */\n  onRenderedBufferChange: IEvent<{ start: number, end: number }>;\n  onRefreshRequest: IEvent<{ start: number, end: number }>;\n\n  dimensions: IRenderDimensions;\n\n  refreshRows(start: number, end: number): void;\n  clearTextureAtlas(): void;\n  resize(cols: number, rows: number): void;\n  changeOptions(): void;\n  setRenderer(renderer: IRenderer): void;\n  setColors(colors: IColorSet): void;\n  onDevicePixelRatioChange(): void;\n  onResize(cols: number, rows: number): void;\n  // TODO: Is this useful when we have onResize?\n  onCharSizeChanged(): void;\n  onBlur(): void;\n  onFocus(): void;\n  onSelectionChanged(start: [number, number] | undefined, end: [number, number] | undefined, columnSelectMode: boolean): void;\n  onCursorMove(): void;\n  clear(): void;\n}\n\nexport const ISelectionService = createDecorator<ISelectionService>('SelectionService');\nexport interface ISelectionService {\n  serviceBrand: undefined;\n\n  readonly selectionText: string;\n  readonly hasSelection: boolean;\n  readonly selectionStart: [number, number] | undefined;\n  readonly selectionEnd: [number, number] | undefined;\n\n  readonly onLinuxMouseSelection: IEvent<string>;\n  readonly onRequestRedraw: IEvent<ISelectionRequestRedrawEvent>;\n  readonly onRequestScrollLines: IEvent<ISelectionRequestScrollLinesEvent>;\n  readonly onSelectionChange: IEvent<void>;\n\n  disable(): void;\n  enable(): void;\n  reset(): void;\n  setSelection(row: number, col: number, length: number): void;\n  selectAll(): void;\n  selectLines(start: number, end: number): void;\n  clearSelection(): void;\n  rightClickSelect(event: MouseEvent): void;\n  shouldColumnSelect(event: KeyboardEvent | MouseEvent): boolean;\n  shouldForceSelection(event: MouseEvent): boolean;\n  refresh(isLinuxMouseSelection?: boolean): void;\n  onMouseDown(event: MouseEvent): void;\n}\n\nexport const ISoundService = createDecorator<ISoundService>('SoundService');\nexport interface ISoundService {\n  serviceBrand: undefined;\n\n  playBellSound(): void;\n}\n\n\nexport const ICharacterJoinerService = createDecorator<ICharacterJoinerService>('CharacterJoinerService');\nexport interface ICharacterJoinerService {\n  serviceBrand: undefined;\n\n  register(handler: (text: string) => [number, number][]): number;\n  deregister(joinerId: number): boolean;\n  getJoinedCharacters(row: number): [number, number][];\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IOptionsService } from 'common/services/Services';\nimport { ISoundService } from 'browser/services/Services';\n\nexport class SoundService implements ISoundService {\n  public serviceBrand: undefined;\n\n  private static _audioContext: AudioContext;\n\n  public static get audioContext(): AudioContext | null {\n    if (!SoundService._audioContext) {\n      const audioContextCtor: typeof AudioContext = (window as any).AudioContext || (window as any).webkitAudioContext;\n      if (!audioContextCtor) {\n        console.warn('Web Audio API is not supported by this browser. Consider upgrading to the latest version');\n        return null;\n      }\n      SoundService._audioContext = new audioContextCtor();\n    }\n    return SoundService._audioContext;\n  }\n\n  constructor(\n    @IOptionsService private _optionsService: IOptionsService\n  ) {\n  }\n\n  public playBellSound(): void {\n    const ctx = SoundService.audioContext;\n    if (!ctx) {\n      return;\n    }\n    const bellAudioSource = ctx.createBufferSource();\n    ctx.decodeAudioData(this._base64ToArrayBuffer(this._removeMimeType(this._optionsService.rawOptions.bellSound)), (buffer) => {\n      bellAudioSource.buffer = buffer;\n      bellAudioSource.connect(ctx.destination);\n      bellAudioSource.start(0);\n    });\n  }\n\n  private _base64ToArrayBuffer(base64: string): ArrayBuffer {\n    const binaryString = window.atob(base64);\n    const len = binaryString.length;\n    const bytes = new Uint8Array(len);\n\n    for (let i = 0; i < len; i++) {\n      bytes[i] = binaryString.charCodeAt(i);\n    }\n\n    return bytes.buffer;\n  }\n\n  private _removeMimeType(dataURI: string): string {\n    // Split the input to get the mime-type and the data itself\n    const splitUri = dataURI.split(',');\n\n    // Return only the data\n    return splitUri[1];\n  }\n}\n", "/**\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ICircularList } from 'common/Types';\nimport { EventEmitter, IEvent } from 'common/EventEmitter';\n\nexport interface IInsertEvent {\n  index: number;\n  amount: number;\n}\n\nexport interface IDeleteEvent {\n  index: number;\n  amount: number;\n}\n\n/**\n * Represents a circular list; a list with a maximum size that wraps around when push is called,\n * overriding values at the start of the list.\n */\nexport class CircularList<T> implements ICircularList<T> {\n  protected _array: (T | undefined)[];\n  private _startIndex: number;\n  private _length: number;\n\n  public onDeleteEmitter = new EventEmitter<IDeleteEvent>();\n  public get onDelete(): IEvent<IDeleteEvent> { return this.onDeleteEmitter.event; }\n  public onInsertEmitter = new EventEmitter<IInsertEvent>();\n  public get onInsert(): IEvent<IInsertEvent> { return this.onInsertEmitter.event; }\n  public onTrimEmitter = new EventEmitter<number>();\n  public get onTrim(): IEvent<number> { return this.onTrimEmitter.event; }\n\n  constructor(\n    private _maxLength: number\n  ) {\n    this._array = new Array<T>(this._maxLength);\n    this._startIndex = 0;\n    this._length = 0;\n  }\n\n  public get maxLength(): number {\n    return this._maxLength;\n  }\n\n  public set maxLength(newMaxLength: number) {\n    // There was no change in maxLength, return early.\n    if (this._maxLength === newMaxLength) {\n      return;\n    }\n\n    // Reconstruct array, starting at index 0. Only transfer values from the\n    // indexes 0 to length.\n    const newArray = new Array<T | undefined>(newMaxLength);\n    for (let i = 0; i < Math.min(newMaxLength, this.length); i++) {\n      newArray[i] = this._array[this._getCyclicIndex(i)];\n    }\n    this._array = newArray;\n    this._maxLength = newMaxLength;\n    this._startIndex = 0;\n  }\n\n  public get length(): number {\n    return this._length;\n  }\n\n  public set length(newLength: number) {\n    if (newLength > this._length) {\n      for (let i = this._length; i < newLength; i++) {\n        this._array[i] = undefined;\n      }\n    }\n    this._length = newLength;\n  }\n\n  /**\n   * Gets the value at an index.\n   *\n   * Note that for performance reasons there is no bounds checking here, the index reference is\n   * circular so this should always return a value and never throw.\n   * @param index The index of the value to get.\n   * @return The value corresponding to the index.\n   */\n  public get(index: number): T | undefined {\n    return this._array[this._getCyclicIndex(index)];\n  }\n\n  /**\n   * Sets the value at an index.\n   *\n   * Note that for performance reasons there is no bounds checking here, the index reference is\n   * circular so this should always return a value and never throw.\n   * @param index The index to set.\n   * @param value The value to set.\n   */\n  public set(index: number, value: T | undefined): void {\n    this._array[this._getCyclicIndex(index)] = value;\n  }\n\n  /**\n   * Pushes a new value onto the list, wrapping around to the start of the array, overriding index 0\n   * if the maximum length is reached.\n   * @param value The value to push onto the list.\n   */\n  public push(value: T): void {\n    this._array[this._getCyclicIndex(this._length)] = value;\n    if (this._length === this._maxLength) {\n      this._startIndex = ++this._startIndex % this._maxLength;\n      this.onTrimEmitter.fire(1);\n    } else {\n      this._length++;\n    }\n  }\n\n  /**\n   * Advance ringbuffer index and return current element for recycling.\n   * Note: The buffer must be full for this method to work.\n   * @throws When the buffer is not full.\n   */\n  public recycle(): T {\n    if (this._length !== this._maxLength) {\n      throw new Error('Can only recycle when the buffer is full');\n    }\n    this._startIndex = ++this._startIndex % this._maxLength;\n    this.onTrimEmitter.fire(1);\n    return this._array[this._getCyclicIndex(this._length - 1)]!;\n  }\n\n  /**\n   * Ringbuffer is at max length.\n   */\n  public get isFull(): boolean {\n    return this._length === this._maxLength;\n  }\n\n  /**\n   * Removes and returns the last value on the list.\n   * @return The popped value.\n   */\n  public pop(): T | undefined {\n    return this._array[this._getCyclicIndex(this._length-- - 1)];\n  }\n\n  /**\n   * Deletes and/or inserts items at a particular index (in that order). Unlike\n   * Array.prototype.splice, this operation does not return the deleted items as a new array in\n   * order to save creating a new array. Note that this operation may shift all values in the list\n   * in the worst case.\n   * @param start The index to delete and/or insert.\n   * @param deleteCount The number of elements to delete.\n   * @param items The items to insert.\n   */\n  public splice(start: number, deleteCount: number, ...items: T[]): void {\n    // Delete items\n    if (deleteCount) {\n      for (let i = start; i < this._length - deleteCount; i++) {\n        this._array[this._getCyclicIndex(i)] = this._array[this._getCyclicIndex(i + deleteCount)];\n      }\n      this._length -= deleteCount;\n      this.onDeleteEmitter.fire({ index: start, amount: deleteCount });\n    }\n\n    // Add items\n    for (let i = this._length - 1; i >= start; i--) {\n      this._array[this._getCyclicIndex(i + items.length)] = this._array[this._getCyclicIndex(i)];\n    }\n    for (let i = 0; i < items.length; i++) {\n      this._array[this._getCyclicIndex(start + i)] = items[i];\n    }\n    if (items.length) {\n      this.onInsertEmitter.fire({ index: start, amount: items.length });\n    }\n\n    // Adjust length as needed\n    if (this._length + items.length > this._maxLength) {\n      const countToTrim = (this._length + items.length) - this._maxLength;\n      this._startIndex += countToTrim;\n      this._length = this._maxLength;\n      this.onTrimEmitter.fire(countToTrim);\n    } else {\n      this._length += items.length;\n    }\n  }\n\n  /**\n   * Trims a number of items from the start of the list.\n   * @param count The number of items to remove.\n   */\n  public trimStart(count: number): void {\n    if (count > this._length) {\n      count = this._length;\n    }\n    this._startIndex += count;\n    this._length -= count;\n    this.onTrimEmitter.fire(count);\n  }\n\n  public shiftElements(start: number, count: number, offset: number): void {\n    if (count <= 0) {\n      return;\n    }\n    if (start < 0 || start >= this._length) {\n      throw new Error('start argument out of range');\n    }\n    if (start + offset < 0) {\n      throw new Error('Cannot shift elements in list beyond index 0');\n    }\n\n    if (offset > 0) {\n      for (let i = count - 1; i >= 0; i--) {\n        this.set(start + i + offset, this.get(start + i));\n      }\n      const expandListBy = (start + count + offset) - this._length;\n      if (expandListBy > 0) {\n        this._length += expandListBy;\n        while (this._length > this._maxLength) {\n          this._length--;\n          this._startIndex++;\n          this.onTrimEmitter.fire(1);\n        }\n      }\n    } else {\n      for (let i = 0; i < count; i++) {\n        this.set(start + i + offset, this.get(start + i));\n      }\n    }\n  }\n\n  /**\n   * Gets the cyclic index for the specified regular index. The cyclic index can then be used on the\n   * backing array to get the element associated with the regular index.\n   * @param index The regular index.\n   * @returns The cyclic index.\n   */\n  private _getCyclicIndex(index: number): number {\n    return (this._startIndex + index) % this._maxLength;\n  }\n}\n", "/**\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\n/*\n * A simple utility for cloning values\n */\nexport function clone<T>(val: T, depth: number = 5): T {\n  if (typeof val !== 'object') {\n    return val;\n  }\n\n  // If we're cloning an array, use an array as the base, otherwise use an object\n  const clonedObject: any = Array.isArray(val) ? [] : {};\n\n  for (const key in val) {\n    // Recursively clone eack item unless we're at the maximum depth\n    clonedObject[key] = depth <= 1 ? val[key] : (val[key] && clone(val[key], depth - 1));\n  }\n\n  return clonedObject as T;\n}\n", "/**\n * Copyright (c) 2014-2020 The xterm.js authors. All rights reserved.\n * Copyright (c) 2012-2013, Christopher Jeffrey (MIT License)\n * @license MIT\n *\n * Originally forked from (with the author's permission):\n *   Fabrice Bellard's javascript vt100 for jslinux:\n *   http://bellard.org/jslinux/\n *   Copyright (c) 2011 Fabrice Bellard\n *   The original design remains. The terminal itself\n *   has been extended to include xterm CSI codes, among\n *   other features.\n *\n * Terminal Emulation References:\n *   http://vt100.net/\n *   http://invisible-island.net/xterm/ctlseqs/ctlseqs.txt\n *   http://invisible-island.net/xterm/ctlseqs/ctlseqs.html\n *   http://invisible-island.net/vttest/\n *   http://www.inwap.com/pdp10/ansicode.txt\n *   http://linux.die.net/man/4/console_codes\n *   http://linux.die.net/man/7/urxvt\n */\n\nimport { Disposable } from 'common/Lifecycle';\nimport { IInstantiationService, IOptionsService, IBufferService, ILogService, ICharsetService, ICoreService, ICoreMouseService, IUnicodeService, IDirtyRowService, LogLevelEnum, ITerminalOptions } from 'common/services/Services';\nimport { InstantiationService } from 'common/services/InstantiationService';\nimport { LogService } from 'common/services/LogService';\nimport { BufferService, MINIMUM_COLS, MINIMUM_ROWS } from 'common/services/BufferService';\nimport { OptionsService } from 'common/services/OptionsService';\nimport { IDisposable, IBufferLine, IAttributeData, ICoreTerminal, IKeyboardEvent, IScrollEvent, ScrollSource, ITerminalOptions as IPublicTerminalOptions } from 'common/Types';\nimport { CoreService } from 'common/services/CoreService';\nimport { EventEmitter, IEvent, forwardEvent } from 'common/EventEmitter';\nimport { CoreMouseService } from 'common/services/CoreMouseService';\nimport { DirtyRowService } from 'common/services/DirtyRowService';\nimport { UnicodeService } from 'common/services/UnicodeService';\nimport { CharsetService } from 'common/services/CharsetService';\nimport { updateWindowsModeWrappedState } from 'common/WindowsMode';\nimport { IFunctionIdentifier, IParams } from 'common/parser/Types';\nimport { IBufferSet } from 'common/buffer/Types';\nimport { InputHandler } from 'common/InputHandler';\nimport { WriteBuffer } from 'common/input/WriteBuffer';\n\n// Only trigger this warning a single time per session\nlet hasWriteSyncWarnHappened = false;\n\nexport abstract class CoreTerminal extends Disposable implements ICoreTerminal {\n  protected readonly _instantiationService: IInstantiationService;\n  protected readonly _bufferService: IBufferService;\n  protected readonly _logService: ILogService;\n  protected readonly _charsetService: ICharsetService;\n  protected readonly _dirtyRowService: IDirtyRowService;\n\n  public readonly coreMouseService: ICoreMouseService;\n  public readonly coreService: ICoreService;\n  public readonly unicodeService: IUnicodeService;\n  public readonly optionsService: IOptionsService;\n\n  protected _inputHandler: InputHandler;\n  private _writeBuffer: WriteBuffer;\n  private _windowsMode: IDisposable | undefined;\n\n  private _onBinary = new EventEmitter<string>();\n  public get onBinary(): IEvent<string> { return this._onBinary.event; }\n  private _onData = new EventEmitter<string>();\n  public get onData(): IEvent<string> { return this._onData.event; }\n  protected _onLineFeed = new EventEmitter<void>();\n  public get onLineFeed(): IEvent<void> { return this._onLineFeed.event; }\n  private _onResize = new EventEmitter<{ cols: number, rows: number }>();\n  public get onResize(): IEvent<{ cols: number, rows: number }> { return this._onResize.event; }\n  protected _onScroll = new EventEmitter<IScrollEvent, void>();\n  /**\n   * Internally we track the source of the scroll but this is meaningless outside the library so\n   * it's filtered out.\n   */\n  protected _onScrollApi?: EventEmitter<number, void>;\n  public get onScroll(): IEvent<number, void> {\n    if (!this._onScrollApi) {\n      this._onScrollApi = new EventEmitter<number, void>();\n      this.register(this._onScroll.event(ev => {\n        this._onScrollApi?.fire(ev.position);\n      }));\n    }\n    return this._onScrollApi.event;\n  }\n\n  public get cols(): number { return this._bufferService.cols; }\n  public get rows(): number { return this._bufferService.rows; }\n  public get buffers(): IBufferSet { return this._bufferService.buffers; }\n  public get options(): ITerminalOptions { return this.optionsService.options; }\n  public set options(options: ITerminalOptions) {\n    for (const key in options) {\n      this.optionsService.options[key] = options[key];\n    }\n  }\n\n  constructor(\n    options: Partial<ITerminalOptions>\n  ) {\n    super();\n\n    // Setup and initialize services\n    this._instantiationService = new InstantiationService();\n    this.optionsService = new OptionsService(options);\n    this._instantiationService.setService(IOptionsService, this.optionsService);\n    this._bufferService = this.register(this._instantiationService.createInstance(BufferService));\n    this._instantiationService.setService(IBufferService, this._bufferService);\n    this._logService = this._instantiationService.createInstance(LogService);\n    this._instantiationService.setService(ILogService, this._logService);\n    this.coreService = this.register(this._instantiationService.createInstance(CoreService, () => this.scrollToBottom()));\n    this._instantiationService.setService(ICoreService, this.coreService);\n    this.coreMouseService = this._instantiationService.createInstance(CoreMouseService);\n    this._instantiationService.setService(ICoreMouseService, this.coreMouseService);\n    this._dirtyRowService = this._instantiationService.createInstance(DirtyRowService);\n    this._instantiationService.setService(IDirtyRowService, this._dirtyRowService);\n    this.unicodeService = this._instantiationService.createInstance(UnicodeService);\n    this._instantiationService.setService(IUnicodeService, this.unicodeService);\n    this._charsetService = this._instantiationService.createInstance(CharsetService);\n    this._instantiationService.setService(ICharsetService, this._charsetService);\n\n    // Register input handler and handle/forward events\n    this._inputHandler = new InputHandler(this._bufferService, this._charsetService, this.coreService, this._dirtyRowService, this._logService, this.optionsService, this.coreMouseService, this.unicodeService);\n    this.register(forwardEvent(this._inputHandler.onLineFeed, this._onLineFeed));\n    this.register(this._inputHandler);\n\n    // Setup listeners\n    this.register(forwardEvent(this._bufferService.onResize, this._onResize));\n    this.register(forwardEvent(this.coreService.onData, this._onData));\n    this.register(forwardEvent(this.coreService.onBinary, this._onBinary));\n    this.register(this.optionsService.onOptionChange(key => this._updateOptions(key)));\n    this.register(this._bufferService.onScroll(event => {\n      this._onScroll.fire({ position: this._bufferService.buffer.ydisp, source: ScrollSource.TERMINAL });\n      this._dirtyRowService.markRangeDirty(this._bufferService.buffer.scrollTop, this._bufferService.buffer.scrollBottom);\n    }));\n    this.register(this._inputHandler.onScroll(event => {\n      this._onScroll.fire({ position: this._bufferService.buffer.ydisp, source: ScrollSource.TERMINAL });\n      this._dirtyRowService.markRangeDirty(this._bufferService.buffer.scrollTop, this._bufferService.buffer.scrollBottom);\n    }));\n\n    // Setup WriteBuffer\n    this._writeBuffer = new WriteBuffer((data, promiseResult) => this._inputHandler.parse(data, promiseResult));\n  }\n\n  public dispose(): void {\n    if (this._isDisposed) {\n      return;\n    }\n    super.dispose();\n    this._windowsMode?.dispose();\n    this._windowsMode = undefined;\n  }\n\n  public write(data: string | Uint8Array, callback?: () => void): void {\n    this._writeBuffer.write(data, callback);\n  }\n\n  /**\n   * Write data to terminal synchonously.\n   *\n   * This method is unreliable with async parser handlers, thus should not\n   * be used anymore. If you need blocking semantics on data input consider\n   * `write` with a callback instead.\n   *\n   * @deprecated Unreliable, will be removed soon.\n   */\n  public writeSync(data: string | Uint8Array, maxSubsequentCalls?: number): void {\n    if (this._logService.logLevel <= LogLevelEnum.WARN && !hasWriteSyncWarnHappened) {\n      this._logService.warn('writeSync is unreliable and will be removed soon.');\n      hasWriteSyncWarnHappened = true;\n    }\n    this._writeBuffer.writeSync(data, maxSubsequentCalls);\n  }\n\n  public resize(x: number, y: number): void {\n    if (isNaN(x) || isNaN(y)) {\n      return;\n    }\n\n    x = Math.max(x, MINIMUM_COLS);\n    y = Math.max(y, MINIMUM_ROWS);\n\n    this._bufferService.resize(x, y);\n  }\n\n  /**\n   * Scroll the terminal down 1 row, creating a blank line.\n   * @param isWrapped Whether the new line is wrapped from the previous line.\n   */\n  public scroll(eraseAttr: IAttributeData, isWrapped: boolean = false): void {\n    this._bufferService.scroll(eraseAttr, isWrapped);\n  }\n\n  /**\n   * Scroll the display of the terminal\n   * @param disp The number of lines to scroll down (negative scroll up).\n   * @param suppressScrollEvent Don't emit the scroll event as scrollLines. This is used\n   * to avoid unwanted events being handled by the viewport when the event was triggered from the\n   * viewport originally.\n   */\n  public scrollLines(disp: number, suppressScrollEvent?: boolean, source?: ScrollSource): void {\n    this._bufferService.scrollLines(disp, suppressScrollEvent, source);\n  }\n\n  /**\n   * Scroll the display of the terminal by a number of pages.\n   * @param pageCount The number of pages to scroll (negative scrolls up).\n   */\n  public scrollPages(pageCount: number): void {\n    this._bufferService.scrollPages(pageCount);\n  }\n\n  /**\n   * Scrolls the display of the terminal to the top.\n   */\n  public scrollToTop(): void {\n    this._bufferService.scrollToTop();\n  }\n\n  /**\n   * Scrolls the display of the terminal to the bottom.\n   */\n  public scrollToBottom(): void {\n    this._bufferService.scrollToBottom();\n  }\n\n  public scrollToLine(line: number): void {\n    this._bufferService.scrollToLine(line);\n  }\n\n  /** Add handler for ESC escape sequence. See xterm.d.ts for details. */\n  public registerEscHandler(id: IFunctionIdentifier, callback: () => boolean | Promise<boolean>): IDisposable {\n    return this._inputHandler.registerEscHandler(id, callback);\n  }\n\n  /** Add handler for DCS escape sequence. See xterm.d.ts for details. */\n  public registerDcsHandler(id: IFunctionIdentifier, callback: (data: string, param: IParams) => boolean | Promise<boolean>): IDisposable {\n    return this._inputHandler.registerDcsHandler(id, callback);\n  }\n\n  /** Add handler for CSI escape sequence. See xterm.d.ts for details. */\n  public registerCsiHandler(id: IFunctionIdentifier, callback: (params: IParams) => boolean | Promise<boolean>): IDisposable {\n    return this._inputHandler.registerCsiHandler(id, callback);\n  }\n\n  /** Add handler for OSC escape sequence. See xterm.d.ts for details. */\n  public registerOscHandler(ident: number, callback: (data: string) => boolean | Promise<boolean>): IDisposable {\n    return this._inputHandler.registerOscHandler(ident, callback);\n  }\n\n  protected _setup(): void {\n    if (this.optionsService.rawOptions.windowsMode) {\n      this._enableWindowsMode();\n    }\n  }\n\n  public reset(): void {\n    this._inputHandler.reset();\n    this._bufferService.reset();\n    this._charsetService.reset();\n    this.coreService.reset();\n    this.coreMouseService.reset();\n  }\n\n  protected _updateOptions(key: string): void {\n    // TODO: These listeners should be owned by individual components\n    switch (key) {\n      case 'scrollback':\n        this.buffers.resize(this.cols, this.rows);\n        break;\n      case 'windowsMode':\n        if (this.optionsService.rawOptions.windowsMode) {\n          this._enableWindowsMode();\n        } else {\n          this._windowsMode?.dispose();\n          this._windowsMode = undefined;\n        }\n        break;\n    }\n  }\n\n  protected _enableWindowsMode(): void {\n    if (!this._windowsMode) {\n      const disposables: IDisposable[] = [];\n      disposables.push(this.onLineFeed(updateWindowsModeWrappedState.bind(null, this._bufferService)));\n      disposables.push(this.registerCsiHandler({ final: 'H' }, () => {\n        updateWindowsModeWrappedState(this._bufferService);\n        return false;\n      }));\n      this._windowsMode = {\n        dispose: () => {\n          for (const d of disposables) {\n            d.dispose();\n          }\n        }\n      };\n    }\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IDisposable } from 'common/Types';\n\ninterface IListener<T, U = void> {\n  (arg1: T, arg2: U): void;\n}\n\nexport interface IEvent<T, U = void> {\n  (listener: (arg1: T, arg2: U) => any): IDisposable;\n}\n\nexport interface IEventEmitter<T, U = void> {\n  event: IEvent<T, U>;\n  fire(arg1: T, arg2: U): void;\n  dispose(): void;\n}\n\nexport class EventEmitter<T, U = void> implements IEventEmitter<T, U> {\n  private _listeners: IListener<T, U>[] = [];\n  private _event?: IEvent<T, U>;\n  private _disposed: boolean = false;\n\n  public get event(): IEvent<T, U> {\n    if (!this._event) {\n      this._event = (listener: (arg1: T, arg2: U) => any) => {\n        this._listeners.push(listener);\n        const disposable = {\n          dispose: () => {\n            if (!this._disposed) {\n              for (let i = 0; i < this._listeners.length; i++) {\n                if (this._listeners[i] === listener) {\n                  this._listeners.splice(i, 1);\n                  return;\n                }\n              }\n            }\n          }\n        };\n        return disposable;\n      };\n    }\n    return this._event;\n  }\n\n  public fire(arg1: T, arg2: U): void {\n    const queue: IListener<T, U>[] = [];\n    for (let i = 0; i < this._listeners.length; i++) {\n      queue.push(this._listeners[i]);\n    }\n    for (let i = 0; i < queue.length; i++) {\n      queue[i].call(undefined, arg1, arg2);\n    }\n  }\n\n  public dispose(): void {\n    if (this._listeners) {\n      this._listeners.length = 0;\n    }\n    this._disposed = true;\n  }\n}\n\nexport function forwardEvent<T>(from: IEvent<T>, to: IEventEmitter<T>): IDisposable {\n  return from(e => to.fire(e));\n}\n", "/**\n * Copyright (c) 2014 The xterm.js authors. All rights reserved.\n * Copyright (c) 2012-2013, Christopher Jeffrey (MIT License)\n * @license MIT\n */\n\nimport { IInputHandler, IAttributeData, IDisposable, IWindowOptions, IColorEvent, IParseStack, ColorIndex, ColorRequestType } from 'common/Types';\nimport { C0, C1 } from 'common/data/EscapeSequences';\nimport { CHARSETS, DEFAULT_CHARSET } from 'common/data/Charsets';\nimport { EscapeSequenceParser } from 'common/parser/EscapeSequenceParser';\nimport { Disposable } from 'common/Lifecycle';\nimport { concat } from 'common/TypedArrayUtils';\nimport { StringToUtf32, stringFromCodePoint, utf32ToString, Utf8ToUtf32 } from 'common/input/TextDecoder';\nimport { DEFAULT_ATTR_DATA } from 'common/buffer/BufferLine';\nimport { EventEmitter, IEvent } from 'common/EventEmitter';\nimport { IParsingState, IDcsHandler, IEscapeSequenceParser, IParams, IFunctionIdentifier } from 'common/parser/Types';\nimport { NULL_CELL_CODE, NULL_CELL_WIDTH, Attributes, FgFlags, BgFlags, Content, UnderlineStyle } from 'common/buffer/Constants';\nimport { CellData } from 'common/buffer/CellData';\nimport { AttributeData } from 'common/buffer/AttributeData';\nimport { ICoreService, IBufferService, IOptionsService, ILogService, IDirtyRowService, ICoreMouseService, ICharsetService, IUnicodeService, LogLevelEnum } from 'common/services/Services';\nimport { OscHandler } from 'common/parser/OscParser';\nimport { DcsHandler } from 'common/parser/DcsParser';\nimport { IBuffer } from 'common/buffer/Types';\nimport { parseColor } from 'common/input/XParseColor';\n\n/**\n * Map collect to glevel. Used in `selectCharset`.\n */\nconst GLEVEL: { [key: string]: number } = { '(': 0, ')': 1, '*': 2, '+': 3, '-': 1, '.': 2 };\n\n/**\n * VT commands done by the parser - FIXME: move this to the parser?\n */\n// @vt: #Y   ESC   CSI   \"Control Sequence Introducer\"   \"ESC [\"   \"Start of a CSI sequence.\"\n// @vt: #Y   ESC   OSC   \"Operating System Command\"      \"ESC ]\"   \"Start of an OSC sequence.\"\n// @vt: #Y   ESC   DCS   \"Device Control String\"         \"ESC P\"   \"Start of a DCS sequence.\"\n// @vt: #Y   ESC   ST    \"String Terminator\"             \"ESC \\\"   \"Terminator used for string type sequences.\"\n// @vt: #Y   ESC   PM    \"Privacy Message\"               \"ESC ^\"   \"Start of a privacy message.\"\n// @vt: #Y   ESC   APC   \"Application Program Command\"   \"ESC _\"   \"Start of an APC sequence.\"\n// @vt: #Y   C1    CSI   \"Control Sequence Introducer\"   \"\\x9B\"    \"Start of a CSI sequence.\"\n// @vt: #Y   C1    OSC   \"Operating System Command\"      \"\\x9D\"    \"Start of an OSC sequence.\"\n// @vt: #Y   C1    DCS   \"Device Control String\"         \"\\x90\"    \"Start of a DCS sequence.\"\n// @vt: #Y   C1    ST    \"String Terminator\"             \"\\x9C\"    \"Terminator used for string type sequences.\"\n// @vt: #Y   C1    PM    \"Privacy Message\"               \"\\x9E\"    \"Start of a privacy message.\"\n// @vt: #Y   C1    APC   \"Application Program Command\"   \"\\x9F\"    \"Start of an APC sequence.\"\n// @vt: #Y   C0    NUL   \"Null\"                          \"\\0, \\x00\"  \"NUL is ignored.\"\n// @vt: #Y   C0    ESC   \"Escape\"                        \"\\e, \\x1B\"  \"Start of a sequence. Cancels any other sequence.\"\n\n/**\n * Document common VT features here that are currently unsupported\n */\n// @vt: #N   DCS   SIXEL   \"SIXEL Graphics\"  \"DCS Ps ; Ps ; Ps ; q \tPt ST\"   \"Draw SIXEL image starting at cursor position.\"\n// @vt: #N   OSC    1   \"Set Icon Name\"  \"OSC 1 ; Pt BEL\"  \"Set icon name.\"\n\n/**\n * Max length of the UTF32 input buffer. Real memory consumption is 4 times higher.\n */\nconst MAX_PARSEBUFFER_LENGTH = 131072;\n\n/**\n * Limit length of title and icon name stacks.\n */\nconst STACK_LIMIT = 10;\n\n// map params to window option\nfunction paramToWindowOption(n: number, opts: IWindowOptions): boolean {\n  if (n > 24) {\n    return opts.setWinLines || false;\n  }\n  switch (n) {\n    case 1: return !!opts.restoreWin;\n    case 2: return !!opts.minimizeWin;\n    case 3: return !!opts.setWinPosition;\n    case 4: return !!opts.setWinSizePixels;\n    case 5: return !!opts.raiseWin;\n    case 6: return !!opts.lowerWin;\n    case 7: return !!opts.refreshWin;\n    case 8: return !!opts.setWinSizeChars;\n    case 9: return !!opts.maximizeWin;\n    case 10: return !!opts.fullscreenWin;\n    case 11: return !!opts.getWinState;\n    case 13: return !!opts.getWinPosition;\n    case 14: return !!opts.getWinSizePixels;\n    case 15: return !!opts.getScreenSizePixels;\n    case 16: return !!opts.getCellSizePixels;\n    case 18: return !!opts.getWinSizeChars;\n    case 19: return !!opts.getScreenSizeChars;\n    case 20: return !!opts.getIconTitle;\n    case 21: return !!opts.getWinTitle;\n    case 22: return !!opts.pushTitle;\n    case 23: return !!opts.popTitle;\n    case 24: return !!opts.setWinLines;\n  }\n  return false;\n}\n\nexport enum WindowsOptionsReportType {\n  GET_WIN_SIZE_PIXELS = 0,\n  GET_CELL_SIZE_PIXELS = 1\n}\n\n// create a warning log if an async handler takes longer than the limit (in ms)\nconst SLOW_ASYNC_LIMIT = 5000;\n\n/**\n * DCS subparser implementations\n */\n\n/**\n * DCS $ q Pt ST\n *   DECRQSS (https://vt100.net/docs/vt510-rm/DECRQSS.html)\n *   Request Status String (DECRQSS), VT420 and up.\n *   Response: DECRPSS (https://vt100.net/docs/vt510-rm/DECRPSS.html)\n *\n * @vt: #P[See limited support below.]  DCS   DECRQSS   \"Request Selection or Setting\"  \"DCS $ q Pt ST\"   \"Request several terminal settings.\"\n * Response is in the form `ESC P 1 $ r Pt ST` for valid requests, where `Pt` contains the corresponding CSI string,\n * `ESC P 0 ST` for invalid requests.\n *\n * Supported requests and responses:\n *\n * | Type                             | Request           | Response (`Pt`)                                       |\n * | -------------------------------- | ----------------- | ----------------------------------------------------- |\n * | Graphic Rendition (SGR)          | `DCS $ q m ST`    | always reporting `0m` (currently broken)              |\n * | Top and Bottom Margins (DECSTBM) | `DCS $ q r ST`    | `Ps ; Ps r`                                           |\n * | Cursor Style (DECSCUSR)          | `DCS $ q SP q ST` | `Ps SP q`                                             |\n * | Protection Attribute (DECSCA)    | `DCS $ q \" q ST`  | always reporting `0 \" q` (DECSCA is unsupported)      |\n * | Conformance Level (DECSCL)       | `DCS $ q \" p ST`  | always reporting `61 ; 1 \" p` (DECSCL is unsupported) |\n *\n *\n * TODO:\n * - fix SGR report\n * - either implement DECSCA or remove the report\n * - either check which conformance is better suited or remove the report completely\n *   --> we are currently a mixture of all up to VT400 but dont follow anyone strictly\n */\nclass DECRQSS implements IDcsHandler {\n  private _data: Uint32Array = new Uint32Array(0);\n\n  constructor(\n    private _bufferService: IBufferService,\n    private _coreService: ICoreService,\n    private _logService: ILogService,\n    private _optionsService: IOptionsService\n  ) { }\n\n  public hook(params: IParams): void {\n    this._data = new Uint32Array(0);\n  }\n\n  public put(data: Uint32Array, start: number, end: number): void {\n    this._data = concat(this._data, data.subarray(start, end));\n  }\n\n  public unhook(success: boolean): boolean {\n    if (!success) {\n      this._data = new Uint32Array(0);\n      return true;\n    }\n    const data = utf32ToString(this._data);\n    this._data = new Uint32Array(0);\n    switch (data) {\n      // valid: DCS 1 $ r Pt ST (xterm)\n      case '\"q': // DECSCA\n        this._coreService.triggerDataEvent(`${C0.ESC}P1$r0\"q${C0.ESC}\\\\`);\n        break;\n      case '\"p': // DECSCL\n        this._coreService.triggerDataEvent(`${C0.ESC}P1$r61;1\"p${C0.ESC}\\\\`);\n        break;\n      case 'r': // DECSTBM\n        const pt = '' + (this._bufferService.buffer.scrollTop + 1) +\n          ';' + (this._bufferService.buffer.scrollBottom + 1) + 'r';\n        this._coreService.triggerDataEvent(`${C0.ESC}P1$r${pt}${C0.ESC}\\\\`);\n        break;\n      case 'm': // SGR\n        // TODO: report real settings instead of 0m\n        this._coreService.triggerDataEvent(`${C0.ESC}P1$r0m${C0.ESC}\\\\`);\n        break;\n      case ' q': // DECSCUSR\n        const STYLES: { [key: string]: number } = { 'block': 2, 'underline': 4, 'bar': 6 };\n        let style = STYLES[this._optionsService.rawOptions.cursorStyle];\n        style -= this._optionsService.rawOptions.cursorBlink ? 1 : 0;\n        this._coreService.triggerDataEvent(`${C0.ESC}P1$r${style} q${C0.ESC}\\\\`);\n        break;\n      default:\n        // invalid: DCS 0 $ r Pt ST (xterm)\n        this._logService.debug('Unknown DCS $q %s', data);\n        this._coreService.triggerDataEvent(`${C0.ESC}P0$r${C0.ESC}\\\\`);\n    }\n    return true;\n  }\n}\n\n/**\n * DCS Ps; Ps| Pt ST\n *   DECUDK (https://vt100.net/docs/vt510-rm/DECUDK.html)\n *   not supported\n *\n * @vt: #N  DCS   DECUDK   \"User Defined Keys\"  \"DCS Ps ; Ps | Pt ST\"   \"Definitions for user-defined keys.\"\n */\n\n/**\n * DCS + q Pt ST (xterm)\n *   Request Terminfo String\n *   not implemented\n *\n * @vt: #N  DCS   XTGETTCAP   \"Request Terminfo String\"  \"DCS + q Pt ST\"   \"Request Terminfo String.\"\n */\n\n/**\n * DCS + p Pt ST (xterm)\n *   Set Terminfo Data\n *   not supported\n *\n * @vt: #N  DCS   XTSETTCAP   \"Set Terminfo Data\"  \"DCS + p Pt ST\"   \"Set Terminfo Data.\"\n */\n\n\n\n/**\n * The terminal's standard implementation of IInputHandler, this handles all\n * input from the Parser.\n *\n * Refer to http://invisible-island.net/xterm/ctlseqs/ctlseqs.html to understand\n * each function's header comment.\n */\nexport class InputHandler extends Disposable implements IInputHandler {\n  private _parseBuffer: Uint32Array = new Uint32Array(4096);\n  private _stringDecoder: StringToUtf32 = new StringToUtf32();\n  private _utf8Decoder: Utf8ToUtf32 = new Utf8ToUtf32();\n  private _workCell: CellData = new CellData();\n  private _windowTitle = '';\n  private _iconName = '';\n  protected _windowTitleStack: string[] = [];\n  protected _iconNameStack: string[] = [];\n\n  private _curAttrData: IAttributeData = DEFAULT_ATTR_DATA.clone();\n  private _eraseAttrDataInternal: IAttributeData = DEFAULT_ATTR_DATA.clone();\n\n  private _activeBuffer: IBuffer;\n\n  private _onRequestBell = new EventEmitter<void>();\n  public get onRequestBell(): IEvent<void> { return this._onRequestBell.event; }\n  private _onRequestRefreshRows = new EventEmitter<number, number>();\n  public get onRequestRefreshRows(): IEvent<number, number> { return this._onRequestRefreshRows.event; }\n  private _onRequestReset = new EventEmitter<void>();\n  public get onRequestReset(): IEvent<void> { return this._onRequestReset.event; }\n  private _onRequestSendFocus = new EventEmitter<void>();\n  public get onRequestSendFocus(): IEvent<void> { return this._onRequestSendFocus.event; }\n  private _onRequestSyncScrollBar = new EventEmitter<void>();\n  public get onRequestSyncScrollBar(): IEvent<void> { return this._onRequestSyncScrollBar.event; }\n  private _onRequestWindowsOptionsReport = new EventEmitter<WindowsOptionsReportType>();\n  public get onRequestWindowsOptionsReport(): IEvent<WindowsOptionsReportType> { return this._onRequestWindowsOptionsReport.event; }\n\n  private _onA11yChar = new EventEmitter<string>();\n  public get onA11yChar(): IEvent<string> { return this._onA11yChar.event; }\n  private _onA11yTab = new EventEmitter<number>();\n  public get onA11yTab(): IEvent<number> { return this._onA11yTab.event; }\n  private _onCursorMove = new EventEmitter<void>();\n  public get onCursorMove(): IEvent<void> { return this._onCursorMove.event; }\n  private _onLineFeed = new EventEmitter<void>();\n  public get onLineFeed(): IEvent<void> { return this._onLineFeed.event; }\n  private _onScroll = new EventEmitter<number>();\n  public get onScroll(): IEvent<number> { return this._onScroll.event; }\n  private _onTitleChange = new EventEmitter<string>();\n  public get onTitleChange(): IEvent<string> { return this._onTitleChange.event; }\n  private _onColor = new EventEmitter<IColorEvent>();\n  public get onColor(): IEvent<IColorEvent> { return this._onColor.event; }\n\n  private _parseStack: IParseStack = {\n    paused: false,\n    cursorStartX: 0,\n    cursorStartY: 0,\n    decodedLength: 0,\n    position: 0\n  };\n\n  constructor(\n    private readonly _bufferService: IBufferService,\n    private readonly _charsetService: ICharsetService,\n    private readonly _coreService: ICoreService,\n    private readonly _dirtyRowService: IDirtyRowService,\n    private readonly _logService: ILogService,\n    private readonly _optionsService: IOptionsService,\n    private readonly _coreMouseService: ICoreMouseService,\n    private readonly _unicodeService: IUnicodeService,\n    private readonly _parser: IEscapeSequenceParser = new EscapeSequenceParser()\n  ) {\n    super();\n    this.register(this._parser);\n\n    // Track properties used in performance critical code manually to avoid using slow getters\n    this._activeBuffer = this._bufferService.buffer;\n    this.register(this._bufferService.buffers.onBufferActivate(e => this._activeBuffer = e.activeBuffer));\n\n    /**\n     * custom fallback handlers\n     */\n    this._parser.setCsiHandlerFallback((ident, params) => {\n      this._logService.debug('Unknown CSI code: ', { identifier: this._parser.identToString(ident), params: params.toArray() });\n    });\n    this._parser.setEscHandlerFallback(ident => {\n      this._logService.debug('Unknown ESC code: ', { identifier: this._parser.identToString(ident) });\n    });\n    this._parser.setExecuteHandlerFallback(code => {\n      this._logService.debug('Unknown EXECUTE code: ', { code });\n    });\n    this._parser.setOscHandlerFallback((identifier, action, data) => {\n      this._logService.debug('Unknown OSC code: ', { identifier, action, data });\n    });\n    this._parser.setDcsHandlerFallback((ident, action, payload) => {\n      if (action === 'HOOK') {\n        payload = payload.toArray();\n      }\n      this._logService.debug('Unknown DCS code: ', { identifier: this._parser.identToString(ident), action, payload });\n    });\n\n    /**\n     * print handler\n     */\n    this._parser.setPrintHandler((data, start, end) => this.print(data, start, end));\n\n    /**\n     * CSI handler\n     */\n    this._parser.registerCsiHandler({ final: '@' }, params => this.insertChars(params));\n    this._parser.registerCsiHandler({ intermediates: ' ', final: '@' }, params => this.scrollLeft(params));\n    this._parser.registerCsiHandler({ final: 'A' }, params => this.cursorUp(params));\n    this._parser.registerCsiHandler({ intermediates: ' ', final: 'A' }, params => this.scrollRight(params));\n    this._parser.registerCsiHandler({ final: 'B' }, params => this.cursorDown(params));\n    this._parser.registerCsiHandler({ final: 'C' }, params => this.cursorForward(params));\n    this._parser.registerCsiHandler({ final: 'D' }, params => this.cursorBackward(params));\n    this._parser.registerCsiHandler({ final: 'E' }, params => this.cursorNextLine(params));\n    this._parser.registerCsiHandler({ final: 'F' }, params => this.cursorPrecedingLine(params));\n    this._parser.registerCsiHandler({ final: 'G' }, params => this.cursorCharAbsolute(params));\n    this._parser.registerCsiHandler({ final: 'H' }, params => this.cursorPosition(params));\n    this._parser.registerCsiHandler({ final: 'I' }, params => this.cursorForwardTab(params));\n    this._parser.registerCsiHandler({ final: 'J' }, params => this.eraseInDisplay(params));\n    this._parser.registerCsiHandler({ prefix: '?', final: 'J' }, params => this.eraseInDisplay(params));\n    this._parser.registerCsiHandler({ final: 'K' }, params => this.eraseInLine(params));\n    this._parser.registerCsiHandler({ prefix: '?', final: 'K' }, params => this.eraseInLine(params));\n    this._parser.registerCsiHandler({ final: 'L' }, params => this.insertLines(params));\n    this._parser.registerCsiHandler({ final: 'M' }, params => this.deleteLines(params));\n    this._parser.registerCsiHandler({ final: 'P' }, params => this.deleteChars(params));\n    this._parser.registerCsiHandler({ final: 'S' }, params => this.scrollUp(params));\n    this._parser.registerCsiHandler({ final: 'T' }, params => this.scrollDown(params));\n    this._parser.registerCsiHandler({ final: 'X' }, params => this.eraseChars(params));\n    this._parser.registerCsiHandler({ final: 'Z' }, params => this.cursorBackwardTab(params));\n    this._parser.registerCsiHandler({ final: '`' }, params => this.charPosAbsolute(params));\n    this._parser.registerCsiHandler({ final: 'a' }, params => this.hPositionRelative(params));\n    this._parser.registerCsiHandler({ final: 'b' }, params => this.repeatPrecedingCharacter(params));\n    this._parser.registerCsiHandler({ final: 'c' }, params => this.sendDeviceAttributesPrimary(params));\n    this._parser.registerCsiHandler({ prefix: '>', final: 'c' }, params => this.sendDeviceAttributesSecondary(params));\n    this._parser.registerCsiHandler({ final: 'd' }, params => this.linePosAbsolute(params));\n    this._parser.registerCsiHandler({ final: 'e' }, params => this.vPositionRelative(params));\n    this._parser.registerCsiHandler({ final: 'f' }, params => this.hVPosition(params));\n    this._parser.registerCsiHandler({ final: 'g' }, params => this.tabClear(params));\n    this._parser.registerCsiHandler({ final: 'h' }, params => this.setMode(params));\n    this._parser.registerCsiHandler({ prefix: '?', final: 'h' }, params => this.setModePrivate(params));\n    this._parser.registerCsiHandler({ final: 'l' }, params => this.resetMode(params));\n    this._parser.registerCsiHandler({ prefix: '?', final: 'l' }, params => this.resetModePrivate(params));\n    this._parser.registerCsiHandler({ final: 'm' }, params => this.charAttributes(params));\n    this._parser.registerCsiHandler({ final: 'n' }, params => this.deviceStatus(params));\n    this._parser.registerCsiHandler({ prefix: '?', final: 'n' }, params => this.deviceStatusPrivate(params));\n    this._parser.registerCsiHandler({ intermediates: '!', final: 'p' }, params => this.softReset(params));\n    this._parser.registerCsiHandler({ intermediates: ' ', final: 'q' }, params => this.setCursorStyle(params));\n    this._parser.registerCsiHandler({ final: 'r' }, params => this.setScrollRegion(params));\n    this._parser.registerCsiHandler({ final: 's' }, params => this.saveCursor(params));\n    this._parser.registerCsiHandler({ final: 't' }, params => this.windowOptions(params));\n    this._parser.registerCsiHandler({ final: 'u' }, params => this.restoreCursor(params));\n    this._parser.registerCsiHandler({ intermediates: '\\'', final: '}' }, params => this.insertColumns(params));\n    this._parser.registerCsiHandler({ intermediates: '\\'', final: '~' }, params => this.deleteColumns(params));\n\n    /**\n     * execute handler\n     */\n    this._parser.setExecuteHandler(C0.BEL, () => this.bell());\n    this._parser.setExecuteHandler(C0.LF, () => this.lineFeed());\n    this._parser.setExecuteHandler(C0.VT, () => this.lineFeed());\n    this._parser.setExecuteHandler(C0.FF, () => this.lineFeed());\n    this._parser.setExecuteHandler(C0.CR, () => this.carriageReturn());\n    this._parser.setExecuteHandler(C0.BS, () => this.backspace());\n    this._parser.setExecuteHandler(C0.HT, () => this.tab());\n    this._parser.setExecuteHandler(C0.SO, () => this.shiftOut());\n    this._parser.setExecuteHandler(C0.SI, () => this.shiftIn());\n    // FIXME:   What do to with missing? Old code just added those to print.\n\n    this._parser.setExecuteHandler(C1.IND, () => this.index());\n    this._parser.setExecuteHandler(C1.NEL, () => this.nextLine());\n    this._parser.setExecuteHandler(C1.HTS, () => this.tabSet());\n\n    /**\n     * OSC handler\n     */\n    //   0 - icon name + title\n    this._parser.registerOscHandler(0, new OscHandler(data => { this.setTitle(data); this.setIconName(data); return true; }));\n    //   1 - icon name\n    this._parser.registerOscHandler(1, new OscHandler(data => this.setIconName(data)));\n    //   2 - title\n    this._parser.registerOscHandler(2, new OscHandler(data => this.setTitle(data)));\n    //   3 - set property X in the form \"prop=value\"\n    //   4 - Change Color Number\n    this._parser.registerOscHandler(4, new OscHandler(data => this.setOrReportIndexedColor(data)));\n    //   5 - Change Special Color Number\n    //   6 - Enable/disable Special Color Number c\n    //   7 - current directory? (not in xterm spec, see https://gitlab.com/gnachman/iterm2/issues/3939)\n    //  10 - Change VT100 text foreground color to Pt.\n    this._parser.registerOscHandler(10, new OscHandler(data => this.setOrReportFgColor(data)));\n    //  11 - Change VT100 text background color to Pt.\n    this._parser.registerOscHandler(11, new OscHandler(data => this.setOrReportBgColor(data)));\n    //  12 - Change text cursor color to Pt.\n    this._parser.registerOscHandler(12, new OscHandler(data => this.setOrReportCursorColor(data)));\n    //  13 - Change mouse foreground color to Pt.\n    //  14 - Change mouse background color to Pt.\n    //  15 - Change Tektronix foreground color to Pt.\n    //  16 - Change Tektronix background color to Pt.\n    //  17 - Change highlight background color to Pt.\n    //  18 - Change Tektronix cursor color to Pt.\n    //  19 - Change highlight foreground color to Pt.\n    //  46 - Change Log File to Pt.\n    //  50 - Set Font to Pt.\n    //  51 - reserved for Emacs shell.\n    //  52 - Manipulate Selection Data.\n    // 104 ; c - Reset Color Number c.\n    this._parser.registerOscHandler(104, new OscHandler(data => this.restoreIndexedColor(data)));\n    // 105 ; c - Reset Special Color Number c.\n    // 106 ; c; f - Enable/disable Special Color Number c.\n    // 110 - Reset VT100 text foreground color.\n    this._parser.registerOscHandler(110, new OscHandler(data => this.restoreFgColor(data)));\n    // 111 - Reset VT100 text background color.\n    this._parser.registerOscHandler(111, new OscHandler(data => this.restoreBgColor(data)));\n    // 112 - Reset text cursor color.\n    this._parser.registerOscHandler(112, new OscHandler(data => this.restoreCursorColor(data)));\n    // 113 - Reset mouse foreground color.\n    // 114 - Reset mouse background color.\n    // 115 - Reset Tektronix foreground color.\n    // 116 - Reset Tektronix background color.\n    // 117 - Reset highlight color.\n    // 118 - Reset Tektronix cursor color.\n    // 119 - Reset highlight foreground color.\n\n    /**\n     * ESC handlers\n     */\n    this._parser.registerEscHandler({ final: '7' }, () => this.saveCursor());\n    this._parser.registerEscHandler({ final: '8' }, () => this.restoreCursor());\n    this._parser.registerEscHandler({ final: 'D' }, () => this.index());\n    this._parser.registerEscHandler({ final: 'E' }, () => this.nextLine());\n    this._parser.registerEscHandler({ final: 'H' }, () => this.tabSet());\n    this._parser.registerEscHandler({ final: 'M' }, () => this.reverseIndex());\n    this._parser.registerEscHandler({ final: '=' }, () => this.keypadApplicationMode());\n    this._parser.registerEscHandler({ final: '>' }, () => this.keypadNumericMode());\n    this._parser.registerEscHandler({ final: 'c' }, () => this.fullReset());\n    this._parser.registerEscHandler({ final: 'n' }, () => this.setgLevel(2));\n    this._parser.registerEscHandler({ final: 'o' }, () => this.setgLevel(3));\n    this._parser.registerEscHandler({ final: '|' }, () => this.setgLevel(3));\n    this._parser.registerEscHandler({ final: '}' }, () => this.setgLevel(2));\n    this._parser.registerEscHandler({ final: '~' }, () => this.setgLevel(1));\n    this._parser.registerEscHandler({ intermediates: '%', final: '@' }, () => this.selectDefaultCharset());\n    this._parser.registerEscHandler({ intermediates: '%', final: 'G' }, () => this.selectDefaultCharset());\n    for (const flag in CHARSETS) {\n      this._parser.registerEscHandler({ intermediates: '(', final: flag }, () => this.selectCharset('(' + flag));\n      this._parser.registerEscHandler({ intermediates: ')', final: flag }, () => this.selectCharset(')' + flag));\n      this._parser.registerEscHandler({ intermediates: '*', final: flag }, () => this.selectCharset('*' + flag));\n      this._parser.registerEscHandler({ intermediates: '+', final: flag }, () => this.selectCharset('+' + flag));\n      this._parser.registerEscHandler({ intermediates: '-', final: flag }, () => this.selectCharset('-' + flag));\n      this._parser.registerEscHandler({ intermediates: '.', final: flag }, () => this.selectCharset('.' + flag));\n      this._parser.registerEscHandler({ intermediates: '/', final: flag }, () => this.selectCharset('/' + flag)); // TODO: supported?\n    }\n    this._parser.registerEscHandler({ intermediates: '#', final: '8' }, () => this.screenAlignmentPattern());\n\n    /**\n     * error handler\n     */\n    this._parser.setErrorHandler((state: IParsingState) => {\n      this._logService.error('Parsing error: ', state);\n      return state;\n    });\n\n    /**\n     * DCS handler\n     */\n    this._parser.registerDcsHandler({ intermediates: '$', final: 'q' }, new DECRQSS(this._bufferService, this._coreService, this._logService, this._optionsService));\n  }\n\n  public dispose(): void {\n    super.dispose();\n  }\n\n  /**\n   * Async parse support.\n   */\n  private _preserveStack(cursorStartX: number, cursorStartY: number, decodedLength: number, position: number): void {\n    this._parseStack.paused = true;\n    this._parseStack.cursorStartX = cursorStartX;\n    this._parseStack.cursorStartY = cursorStartY;\n    this._parseStack.decodedLength = decodedLength;\n    this._parseStack.position = position;\n  }\n\n  private _logSlowResolvingAsync(p: Promise<boolean>): void {\n    // log a limited warning about an async handler taking too long\n    if (this._logService.logLevel <= LogLevelEnum.WARN) {\n      Promise.race([p, new Promise((res, rej) => setTimeout(() => rej('#SLOW_TIMEOUT'), SLOW_ASYNC_LIMIT))])\n        .catch(err => {\n          if (err !== '#SLOW_TIMEOUT') {\n            throw err;\n          }\n          console.warn(`async parser handler taking longer than ${SLOW_ASYNC_LIMIT} ms`);\n        });\n    }\n  }\n\n  /**\n   * Parse call with async handler support.\n   *\n   * Whether the stack state got preserved for the next call, is indicated by the return value:\n   * - undefined (void):\n   *   all handlers were sync, no stack save, continue normally with next chunk\n   * - Promise\\<boolean\\>:\n   *   execution stopped at async handler, stack saved, continue with\n   *   same chunk and the promise resolve value as `promiseResult` until the method returns `undefined`\n   *\n   * Note: This method should only be called by `Terminal.write` to ensure correct execution order and\n   * proper continuation of async parser handlers.\n   */\n  public parse(data: string | Uint8Array, promiseResult?: boolean): void | Promise<boolean> {\n    let result: void | Promise<boolean>;\n    let cursorStartX = this._activeBuffer.x;\n    let cursorStartY = this._activeBuffer.y;\n    let start = 0;\n    const wasPaused = this._parseStack.paused;\n\n    if (wasPaused) {\n      // assumption: _parseBuffer never mutates between async calls\n      if (result = this._parser.parse(this._parseBuffer, this._parseStack.decodedLength, promiseResult)) {\n        this._logSlowResolvingAsync(result);\n        return result;\n      }\n      cursorStartX = this._parseStack.cursorStartX;\n      cursorStartY = this._parseStack.cursorStartY;\n      this._parseStack.paused = false;\n      if (data.length > MAX_PARSEBUFFER_LENGTH) {\n        start = this._parseStack.position + MAX_PARSEBUFFER_LENGTH;\n      }\n    }\n\n    // Log debug data, the log level gate is to prevent extra work in this hot path\n    if (this._logService.logLevel <= LogLevelEnum.DEBUG) {\n      this._logService.debug(`parsing data${typeof data === 'string' ? ` \"${data}\"` : ''}`, typeof data === 'string'\n        ? data.split('').map(e => e.charCodeAt(0))\n        : data\n      );\n    }\n\n    // resize input buffer if needed\n    if (this._parseBuffer.length < data.length) {\n      if (this._parseBuffer.length < MAX_PARSEBUFFER_LENGTH) {\n        this._parseBuffer = new Uint32Array(Math.min(data.length, MAX_PARSEBUFFER_LENGTH));\n      }\n    }\n\n    // Clear the dirty row service so we know which lines changed as a result of parsing\n    // Important: do not clear between async calls, otherwise we lost pending update information.\n    if (!wasPaused) {\n      this._dirtyRowService.clearRange();\n    }\n\n    // process big data in smaller chunks\n    if (data.length > MAX_PARSEBUFFER_LENGTH) {\n      for (let i = start; i < data.length; i += MAX_PARSEBUFFER_LENGTH) {\n        const end = i + MAX_PARSEBUFFER_LENGTH < data.length ? i + MAX_PARSEBUFFER_LENGTH : data.length;\n        const len = (typeof data === 'string')\n          ? this._stringDecoder.decode(data.substring(i, end), this._parseBuffer)\n          : this._utf8Decoder.decode(data.subarray(i, end), this._parseBuffer);\n        if (result = this._parser.parse(this._parseBuffer, len)) {\n          this._preserveStack(cursorStartX, cursorStartY, len, i);\n          this._logSlowResolvingAsync(result);\n          return result;\n        }\n      }\n    } else {\n      if (!wasPaused) {\n        const len = (typeof data === 'string')\n          ? this._stringDecoder.decode(data, this._parseBuffer)\n          : this._utf8Decoder.decode(data, this._parseBuffer);\n        if (result = this._parser.parse(this._parseBuffer, len)) {\n          this._preserveStack(cursorStartX, cursorStartY, len, 0);\n          this._logSlowResolvingAsync(result);\n          return result;\n        }\n      }\n    }\n\n    if (this._activeBuffer.x !== cursorStartX || this._activeBuffer.y !== cursorStartY) {\n      this._onCursorMove.fire();\n    }\n\n    // Refresh any dirty rows accumulated as part of parsing\n    this._onRequestRefreshRows.fire(this._dirtyRowService.start, this._dirtyRowService.end);\n  }\n\n  public print(data: Uint32Array, start: number, end: number): void {\n    let code: number;\n    let chWidth: number;\n    const charset = this._charsetService.charset;\n    const screenReaderMode = this._optionsService.rawOptions.screenReaderMode;\n    const cols = this._bufferService.cols;\n    const wraparoundMode = this._coreService.decPrivateModes.wraparound;\n    const insertMode = this._coreService.modes.insertMode;\n    const curAttr = this._curAttrData;\n    let bufferRow = this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y)!;\n\n    this._dirtyRowService.markDirty(this._activeBuffer.y);\n\n    // handle wide chars: reset start_cell-1 if we would overwrite the second cell of a wide char\n    if (this._activeBuffer.x && end - start > 0 && bufferRow.getWidth(this._activeBuffer.x - 1) === 2) {\n      bufferRow.setCellFromCodePoint(this._activeBuffer.x - 1, 0, 1, curAttr.fg, curAttr.bg, curAttr.extended);\n    }\n\n    for (let pos = start; pos < end; ++pos) {\n      code = data[pos];\n\n      // calculate print space\n      // expensive call, therefore we save width in line buffer\n      chWidth = this._unicodeService.wcwidth(code);\n\n      // get charset replacement character\n      // charset is only defined for ASCII, therefore we only\n      // search for an replacement char if code < 127\n      if (code < 127 && charset) {\n        const ch = charset[String.fromCharCode(code)];\n        if (ch) {\n          code = ch.charCodeAt(0);\n        }\n      }\n\n      if (screenReaderMode) {\n        this._onA11yChar.fire(stringFromCodePoint(code));\n      }\n\n      // insert combining char at last cursor position\n      // this._activeBuffer.x should never be 0 for a combining char\n      // since they always follow a cell consuming char\n      // therefore we can test for this._activeBuffer.x to avoid overflow left\n      if (!chWidth && this._activeBuffer.x) {\n        if (!bufferRow.getWidth(this._activeBuffer.x - 1)) {\n          // found empty cell after fullwidth, need to go 2 cells back\n          // it is save to step 2 cells back here\n          // since an empty cell is only set by fullwidth chars\n          bufferRow.addCodepointToCell(this._activeBuffer.x - 2, code);\n        } else {\n          bufferRow.addCodepointToCell(this._activeBuffer.x - 1, code);\n        }\n        continue;\n      }\n\n      // goto next line if ch would overflow\n      // NOTE: To avoid costly width checks here,\n      // the terminal does not allow a cols < 2.\n      if (this._activeBuffer.x + chWidth - 1 >= cols) {\n        // autowrap - DECAWM\n        // automatically wraps to the beginning of the next line\n        if (wraparoundMode) {\n          // clear left over cells to the right\n          while (this._activeBuffer.x < cols) {\n            bufferRow.setCellFromCodePoint(this._activeBuffer.x++, 0, 1, curAttr.fg, curAttr.bg, curAttr.extended);\n          }\n          this._activeBuffer.x = 0;\n          this._activeBuffer.y++;\n          if (this._activeBuffer.y === this._activeBuffer.scrollBottom + 1) {\n            this._activeBuffer.y--;\n            this._bufferService.scroll(this._eraseAttrData(), true);\n          } else {\n            if (this._activeBuffer.y >= this._bufferService.rows) {\n              this._activeBuffer.y = this._bufferService.rows - 1;\n            }\n            // The line already exists (eg. the initial viewport), mark it as a\n            // wrapped line\n            this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y)!.isWrapped = true;\n          }\n          // row changed, get it again\n          bufferRow = this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y)!;\n        } else {\n          this._activeBuffer.x = cols - 1;\n          if (chWidth === 2) {\n            // FIXME: check for xterm behavior\n            // What to do here? We got a wide char that does not fit into last cell\n            continue;\n          }\n        }\n      }\n\n      // insert mode: move characters to right\n      if (insertMode) {\n        // right shift cells according to the width\n        bufferRow.insertCells(this._activeBuffer.x, chWidth, this._activeBuffer.getNullCell(curAttr), curAttr);\n        // test last cell - since the last cell has only room for\n        // a halfwidth char any fullwidth shifted there is lost\n        // and will be set to empty cell\n        if (bufferRow.getWidth(cols - 1) === 2) {\n          bufferRow.setCellFromCodePoint(cols - 1, NULL_CELL_CODE, NULL_CELL_WIDTH, curAttr.fg, curAttr.bg, curAttr.extended);\n        }\n      }\n\n      // write current char to buffer and advance cursor\n      bufferRow.setCellFromCodePoint(this._activeBuffer.x++, code, chWidth, curAttr.fg, curAttr.bg, curAttr.extended);\n\n      // fullwidth char - also set next cell to placeholder stub and advance cursor\n      // for graphemes bigger than fullwidth we can simply loop to zero\n      // we already made sure above, that this._activeBuffer.x + chWidth will not overflow right\n      if (chWidth > 0) {\n        while (--chWidth) {\n          // other than a regular empty cell a cell following a wide char has no width\n          bufferRow.setCellFromCodePoint(this._activeBuffer.x++, 0, 0, curAttr.fg, curAttr.bg, curAttr.extended);\n        }\n      }\n    }\n    // store last char in Parser.precedingCodepoint for REP to work correctly\n    // This needs to check whether:\n    //  - fullwidth + surrogates: reset\n    //  - combining: only base char gets carried on (bug in xterm?)\n    if (end - start > 0) {\n      bufferRow.loadCell(this._activeBuffer.x - 1, this._workCell);\n      if (this._workCell.getWidth() === 2 || this._workCell.getCode() > 0xFFFF) {\n        this._parser.precedingCodepoint = 0;\n      } else if (this._workCell.isCombined()) {\n        this._parser.precedingCodepoint = this._workCell.getChars().charCodeAt(0);\n      } else {\n        this._parser.precedingCodepoint = this._workCell.content;\n      }\n    }\n\n    // handle wide chars: reset cell to the right if it is second cell of a wide char\n    if (this._activeBuffer.x < cols && end - start > 0 && bufferRow.getWidth(this._activeBuffer.x) === 0 && !bufferRow.hasContent(this._activeBuffer.x)) {\n      bufferRow.setCellFromCodePoint(this._activeBuffer.x, 0, 1, curAttr.fg, curAttr.bg, curAttr.extended);\n    }\n\n    this._dirtyRowService.markDirty(this._activeBuffer.y);\n  }\n\n  /**\n   * Forward registerCsiHandler from parser.\n   */\n  public registerCsiHandler(id: IFunctionIdentifier, callback: (params: IParams) => boolean | Promise<boolean>): IDisposable {\n    if (id.final === 't' && !id.prefix && !id.intermediates) {\n      // security: always check whether window option is allowed\n      return this._parser.registerCsiHandler(id, params => {\n        if (!paramToWindowOption(params.params[0], this._optionsService.rawOptions.windowOptions)) {\n          return true;\n        }\n        return callback(params);\n      });\n    }\n    return this._parser.registerCsiHandler(id, callback);\n  }\n\n  /**\n   * Forward registerDcsHandler from parser.\n   */\n  public registerDcsHandler(id: IFunctionIdentifier, callback: (data: string, param: IParams) => boolean | Promise<boolean>): IDisposable {\n    return this._parser.registerDcsHandler(id, new DcsHandler(callback));\n  }\n\n  /**\n   * Forward registerEscHandler from parser.\n   */\n  public registerEscHandler(id: IFunctionIdentifier, callback: () => boolean | Promise<boolean>): IDisposable {\n    return this._parser.registerEscHandler(id, callback);\n  }\n\n  /**\n   * Forward registerOscHandler from parser.\n   */\n  public registerOscHandler(ident: number, callback: (data: string) => boolean | Promise<boolean>): IDisposable {\n    return this._parser.registerOscHandler(ident, new OscHandler(callback));\n  }\n\n  /**\n   * BEL\n   * Bell (Ctrl-G).\n   *\n   * @vt: #Y   C0    BEL   \"Bell\"  \"\\a, \\x07\"  \"Ring the bell.\"\n   * The behavior of the bell is further customizable with `ITerminalOptions.bellStyle`\n   * and `ITerminalOptions.bellSound`.\n   */\n  public bell(): boolean {\n    this._onRequestBell.fire();\n    return true;\n  }\n\n  /**\n   * LF\n   * Line Feed or New Line (NL).  (LF  is Ctrl-J).\n   *\n   * @vt: #Y   C0    LF   \"Line Feed\"            \"\\n, \\x0A\"  \"Move the cursor one row down, scrolling if needed.\"\n   * Scrolling is restricted to scroll margins and will only happen on the bottom line.\n   *\n   * @vt: #Y   C0    VT   \"Vertical Tabulation\"  \"\\v, \\x0B\"  \"Treated as LF.\"\n   * @vt: #Y   C0    FF   \"Form Feed\"            \"\\f, \\x0C\"  \"Treated as LF.\"\n   */\n  public lineFeed(): boolean {\n    this._dirtyRowService.markDirty(this._activeBuffer.y);\n    if (this._optionsService.rawOptions.convertEol) {\n      this._activeBuffer.x = 0;\n    }\n    this._activeBuffer.y++;\n    if (this._activeBuffer.y === this._activeBuffer.scrollBottom + 1) {\n      this._activeBuffer.y--;\n      this._bufferService.scroll(this._eraseAttrData());\n    } else if (this._activeBuffer.y >= this._bufferService.rows) {\n      this._activeBuffer.y = this._bufferService.rows - 1;\n    }\n    // If the end of the line is hit, prevent this action from wrapping around to the next line.\n    if (this._activeBuffer.x >= this._bufferService.cols) {\n      this._activeBuffer.x--;\n    }\n    this._dirtyRowService.markDirty(this._activeBuffer.y);\n\n    this._onLineFeed.fire();\n    return true;\n  }\n\n  /**\n   * CR\n   * Carriage Return (Ctrl-M).\n   *\n   * @vt: #Y   C0    CR   \"Carriage Return\"  \"\\r, \\x0D\"  \"Move the cursor to the beginning of the row.\"\n   */\n  public carriageReturn(): boolean {\n    this._activeBuffer.x = 0;\n    return true;\n  }\n\n  /**\n   * BS\n   * Backspace (Ctrl-H).\n   *\n   * @vt: #Y   C0    BS   \"Backspace\"  \"\\b, \\x08\"  \"Move the cursor one position to the left.\"\n   * By default it is not possible to move the cursor past the leftmost position.\n   * If `reverse wrap-around` (`CSI ? 45 h`) is set, a previous soft line wrap (DECAWM)\n   * can be undone with BS within the scroll margins. In that case the cursor will wrap back\n   * to the end of the previous row. Note that it is not possible to peek back into the scrollbuffer\n   * with the cursor, thus at the home position (top-leftmost cell) this has no effect.\n   */\n  public backspace(): boolean {\n    // reverse wrap-around is disabled\n    if (!this._coreService.decPrivateModes.reverseWraparound) {\n      this._restrictCursor();\n      if (this._activeBuffer.x > 0) {\n        this._activeBuffer.x--;\n      }\n      return true;\n    }\n\n    // reverse wrap-around is enabled\n    // other than for normal operation mode, reverse wrap-around allows the cursor\n    // to be at x=cols to be able to address the last cell of a row by BS\n    this._restrictCursor(this._bufferService.cols);\n\n    if (this._activeBuffer.x > 0) {\n      this._activeBuffer.x--;\n    } else {\n      /**\n       * reverse wrap-around handling:\n       * Our implementation deviates from xterm on purpose. Details:\n       * - only previous soft NLs can be reversed (isWrapped=true)\n       * - only works within scrollborders (top/bottom, left/right not yet supported)\n       * - cannot peek into scrollbuffer\n       * - any cursor movement sequence keeps working as expected\n       */\n      if (this._activeBuffer.x === 0\n        && this._activeBuffer.y > this._activeBuffer.scrollTop\n        && this._activeBuffer.y <= this._activeBuffer.scrollBottom\n        && this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y)?.isWrapped) {\n        this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y)!.isWrapped = false;\n        this._activeBuffer.y--;\n        this._activeBuffer.x = this._bufferService.cols - 1;\n        // find last taken cell - last cell can have 3 different states:\n        // - hasContent(true) + hasWidth(1): narrow char - we are done\n        // - hasWidth(0): second part of wide char - we are done\n        // - hasContent(false) + hasWidth(1): empty cell due to early wrapping wide char, go one cell further back\n        const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y)!;\n        if (line.hasWidth(this._activeBuffer.x) && !line.hasContent(this._activeBuffer.x)) {\n          this._activeBuffer.x--;\n          // We do this only once, since width=1 + hasContent=false currently happens only once before\n          // early wrapping of a wide char.\n          // This needs to be fixed once we support graphemes taking more than 2 cells.\n        }\n      }\n    }\n    this._restrictCursor();\n    return true;\n  }\n\n  /**\n   * TAB\n   * Horizontal Tab (HT) (Ctrl-I).\n   *\n   * @vt: #Y   C0    HT   \"Horizontal Tabulation\"  \"\\t, \\x09\"  \"Move the cursor to the next character tab stop.\"\n   */\n  public tab(): boolean {\n    if (this._activeBuffer.x >= this._bufferService.cols) {\n      return true;\n    }\n    const originalX = this._activeBuffer.x;\n    this._activeBuffer.x = this._activeBuffer.nextStop();\n    if (this._optionsService.rawOptions.screenReaderMode) {\n      this._onA11yTab.fire(this._activeBuffer.x - originalX);\n    }\n    return true;\n  }\n\n  /**\n   * SO\n   * Shift Out (Ctrl-N) -> Switch to Alternate Character Set.  This invokes the\n   * G1 character set.\n   *\n   * @vt: #P[Only limited ISO-2022 charset support.]  C0    SO   \"Shift Out\"  \"\\x0E\"  \"Switch to an alternative character set.\"\n   */\n  public shiftOut(): boolean {\n    this._charsetService.setgLevel(1);\n    return true;\n  }\n\n  /**\n   * SI\n   * Shift In (Ctrl-O) -> Switch to Standard Character Set.  This invokes the G0\n   * character set (the default).\n   *\n   * @vt: #Y   C0    SI   \"Shift In\"   \"\\x0F\"  \"Return to regular character set after Shift Out.\"\n   */\n  public shiftIn(): boolean {\n    this._charsetService.setgLevel(0);\n    return true;\n  }\n\n  /**\n   * Restrict cursor to viewport size / scroll margin (origin mode).\n   */\n  private _restrictCursor(maxCol: number = this._bufferService.cols - 1): void {\n    this._activeBuffer.x = Math.min(maxCol, Math.max(0, this._activeBuffer.x));\n    this._activeBuffer.y = this._coreService.decPrivateModes.origin\n      ? Math.min(this._activeBuffer.scrollBottom, Math.max(this._activeBuffer.scrollTop, this._activeBuffer.y))\n      : Math.min(this._bufferService.rows - 1, Math.max(0, this._activeBuffer.y));\n    this._dirtyRowService.markDirty(this._activeBuffer.y);\n  }\n\n  /**\n   * Set absolute cursor position.\n   */\n  private _setCursor(x: number, y: number): void {\n    this._dirtyRowService.markDirty(this._activeBuffer.y);\n    if (this._coreService.decPrivateModes.origin) {\n      this._activeBuffer.x = x;\n      this._activeBuffer.y = this._activeBuffer.scrollTop + y;\n    } else {\n      this._activeBuffer.x = x;\n      this._activeBuffer.y = y;\n    }\n    this._restrictCursor();\n    this._dirtyRowService.markDirty(this._activeBuffer.y);\n  }\n\n  /**\n   * Set relative cursor position.\n   */\n  private _moveCursor(x: number, y: number): void {\n    // for relative changes we have to make sure we are within 0 .. cols/rows - 1\n    // before calculating the new position\n    this._restrictCursor();\n    this._setCursor(this._activeBuffer.x + x, this._activeBuffer.y + y);\n  }\n\n  /**\n   * CSI Ps A\n   * Cursor Up Ps Times (default = 1) (CUU).\n   *\n   * @vt: #Y CSI CUU   \"Cursor Up\"   \"CSI Ps A\"  \"Move cursor `Ps` times up (default=1).\"\n   * If the cursor would pass the top scroll margin, it will stop there.\n   */\n  public cursorUp(params: IParams): boolean {\n    // stop at scrollTop\n    const diffToTop = this._activeBuffer.y - this._activeBuffer.scrollTop;\n    if (diffToTop >= 0) {\n      this._moveCursor(0, -Math.min(diffToTop, params.params[0] || 1));\n    } else {\n      this._moveCursor(0, -(params.params[0] || 1));\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps B\n   * Cursor Down Ps Times (default = 1) (CUD).\n   *\n   * @vt: #Y CSI CUD   \"Cursor Down\"   \"CSI Ps B\"  \"Move cursor `Ps` times down (default=1).\"\n   * If the cursor would pass the bottom scroll margin, it will stop there.\n   */\n  public cursorDown(params: IParams): boolean {\n    // stop at scrollBottom\n    const diffToBottom = this._activeBuffer.scrollBottom - this._activeBuffer.y;\n    if (diffToBottom >= 0) {\n      this._moveCursor(0, Math.min(diffToBottom, params.params[0] || 1));\n    } else {\n      this._moveCursor(0, params.params[0] || 1);\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps C\n   * Cursor Forward Ps Times (default = 1) (CUF).\n   *\n   * @vt: #Y CSI CUF   \"Cursor Forward\"    \"CSI Ps C\"  \"Move cursor `Ps` times forward (default=1).\"\n   */\n  public cursorForward(params: IParams): boolean {\n    this._moveCursor(params.params[0] || 1, 0);\n    return true;\n  }\n\n  /**\n   * CSI Ps D\n   * Cursor Backward Ps Times (default = 1) (CUB).\n   *\n   * @vt: #Y CSI CUB   \"Cursor Backward\"   \"CSI Ps D\"  \"Move cursor `Ps` times backward (default=1).\"\n   */\n  public cursorBackward(params: IParams): boolean {\n    this._moveCursor(-(params.params[0] || 1), 0);\n    return true;\n  }\n\n  /**\n   * CSI Ps E\n   * Cursor Next Line Ps Times (default = 1) (CNL).\n   * Other than cursorDown (CUD) also set the cursor to first column.\n   *\n   * @vt: #Y CSI CNL   \"Cursor Next Line\"  \"CSI Ps E\"  \"Move cursor `Ps` times down (default=1) and to the first column.\"\n   * Same as CUD, additionally places the cursor at the first column.\n   */\n  public cursorNextLine(params: IParams): boolean {\n    this.cursorDown(params);\n    this._activeBuffer.x = 0;\n    return true;\n  }\n\n  /**\n   * CSI Ps F\n   * Cursor Previous Line Ps Times (default = 1) (CPL).\n   * Other than cursorUp (CUU) also set the cursor to first column.\n   *\n   * @vt: #Y CSI CPL   \"Cursor Backward\"   \"CSI Ps F\"  \"Move cursor `Ps` times up (default=1) and to the first column.\"\n   * Same as CUU, additionally places the cursor at the first column.\n   */\n  public cursorPrecedingLine(params: IParams): boolean {\n    this.cursorUp(params);\n    this._activeBuffer.x = 0;\n    return true;\n  }\n\n  /**\n   * CSI Ps G\n   * Cursor Character Absolute  [column] (default = [row,1]) (CHA).\n   *\n   * @vt: #Y CSI CHA   \"Cursor Horizontal Absolute\" \"CSI Ps G\" \"Move cursor to `Ps`-th column of the active row (default=1).\"\n   */\n  public cursorCharAbsolute(params: IParams): boolean {\n    this._setCursor((params.params[0] || 1) - 1, this._activeBuffer.y);\n    return true;\n  }\n\n  /**\n   * CSI Ps ; Ps H\n   * Cursor Position [row;column] (default = [1,1]) (CUP).\n   *\n   * @vt: #Y CSI CUP   \"Cursor Position\"   \"CSI Ps ; Ps H\"  \"Set cursor to position [`Ps`, `Ps`] (default = [1, 1]).\"\n   * If ORIGIN mode is set, places the cursor to the absolute position within the scroll margins.\n   * If ORIGIN mode is not set, places the cursor to the absolute position within the viewport.\n   * Note that the coordinates are 1-based, thus the top left position starts at `1 ; 1`.\n   */\n  public cursorPosition(params: IParams): boolean {\n    this._setCursor(\n      // col\n      (params.length >= 2) ? (params.params[1] || 1) - 1 : 0,\n      // row\n      (params.params[0] || 1) - 1\n    );\n    return true;\n  }\n\n  /**\n   * CSI Pm `  Character Position Absolute\n   *   [column] (default = [row,1]) (HPA).\n   * Currently same functionality as CHA.\n   *\n   * @vt: #Y CSI HPA   \"Horizontal Position Absolute\"  \"CSI Ps ` \" \"Same as CHA.\"\n   */\n  public charPosAbsolute(params: IParams): boolean {\n    this._setCursor((params.params[0] || 1) - 1, this._activeBuffer.y);\n    return true;\n  }\n\n  /**\n   * CSI Pm a  Character Position Relative\n   *   [columns] (default = [row,col+1]) (HPR)\n   *\n   * @vt: #Y CSI HPR   \"Horizontal Position Relative\"  \"CSI Ps a\"  \"Same as CUF.\"\n   */\n  public hPositionRelative(params: IParams): boolean {\n    this._moveCursor(params.params[0] || 1, 0);\n    return true;\n  }\n\n  /**\n   * CSI Pm d  Vertical Position Absolute (VPA)\n   *   [row] (default = [1,column])\n   *\n   * @vt: #Y CSI VPA   \"Vertical Position Absolute\"    \"CSI Ps d\"  \"Move cursor to `Ps`-th row (default=1).\"\n   */\n  public linePosAbsolute(params: IParams): boolean {\n    this._setCursor(this._activeBuffer.x, (params.params[0] || 1) - 1);\n    return true;\n  }\n\n  /**\n   * CSI Pm e  Vertical Position Relative (VPR)\n   *   [rows] (default = [row+1,column])\n   * reuse CSI Ps B ?\n   *\n   * @vt: #Y CSI VPR   \"Vertical Position Relative\"    \"CSI Ps e\"  \"Move cursor `Ps` times down (default=1).\"\n   */\n  public vPositionRelative(params: IParams): boolean {\n    this._moveCursor(0, params.params[0] || 1);\n    return true;\n  }\n\n  /**\n   * CSI Ps ; Ps f\n   *   Horizontal and Vertical Position [row;column] (default =\n   *   [1,1]) (HVP).\n   *   Same as CUP.\n   *\n   * @vt: #Y CSI HVP   \"Horizontal and Vertical Position\" \"CSI Ps ; Ps f\"  \"Same as CUP.\"\n   */\n  public hVPosition(params: IParams): boolean {\n    this.cursorPosition(params);\n    return true;\n  }\n\n  /**\n   * CSI Ps g  Tab Clear (TBC).\n   *     Ps = 0  -> Clear Current Column (default).\n   *     Ps = 3  -> Clear All.\n   * Potentially:\n   *   Ps = 2  -> Clear Stops on Line.\n   *   http://vt100.net/annarbor/aaa-ug/section6.html\n   *\n   * @vt: #Y CSI TBC   \"Tab Clear\" \"CSI Ps g\"  \"Clear tab stops at current position (0) or all (3) (default=0).\"\n   * Clearing tabstops off the active row (Ps = 2, VT100) is currently not supported.\n   */\n  public tabClear(params: IParams): boolean {\n    const param = params.params[0];\n    if (param === 0) {\n      delete this._activeBuffer.tabs[this._activeBuffer.x];\n    } else if (param === 3) {\n      this._activeBuffer.tabs = {};\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps I\n   *   Cursor Forward Tabulation Ps tab stops (default = 1) (CHT).\n   *\n   * @vt: #Y CSI CHT   \"Cursor Horizontal Tabulation\" \"CSI Ps I\" \"Move cursor `Ps` times tabs forward (default=1).\"\n   */\n  public cursorForwardTab(params: IParams): boolean {\n    if (this._activeBuffer.x >= this._bufferService.cols) {\n      return true;\n    }\n    let param = params.params[0] || 1;\n    while (param--) {\n      this._activeBuffer.x = this._activeBuffer.nextStop();\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps Z  Cursor Backward Tabulation Ps tab stops (default = 1) (CBT).\n   *\n   * @vt: #Y CSI CBT   \"Cursor Backward Tabulation\"  \"CSI Ps Z\"  \"Move cursor `Ps` tabs backward (default=1).\"\n   */\n  public cursorBackwardTab(params: IParams): boolean {\n    if (this._activeBuffer.x >= this._bufferService.cols) {\n      return true;\n    }\n    let param = params.params[0] || 1;\n\n    while (param--) {\n      this._activeBuffer.x = this._activeBuffer.prevStop();\n    }\n    return true;\n  }\n\n\n  /**\n   * Helper method to erase cells in a terminal row.\n   * The cell gets replaced with the eraseChar of the terminal.\n   * @param y row index\n   * @param start first cell index to be erased\n   * @param end   end - 1 is last erased cell\n   * @param cleanWrap clear the isWrapped flag\n   */\n  private _eraseInBufferLine(y: number, start: number, end: number, clearWrap: boolean = false): void {\n    const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + y)!;\n    line.replaceCells(\n      start,\n      end,\n      this._activeBuffer.getNullCell(this._eraseAttrData()),\n      this._eraseAttrData()\n    );\n    if (clearWrap) {\n      line.isWrapped = false;\n    }\n  }\n\n  /**\n   * Helper method to reset cells in a terminal row.\n   * The cell gets replaced with the eraseChar of the terminal and the isWrapped property is set to false.\n   * @param y row index\n   */\n  private _resetBufferLine(y: number): void {\n    const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + y)!;\n    line.fill(this._activeBuffer.getNullCell(this._eraseAttrData()));\n    line.isWrapped = false;\n  }\n\n  /**\n   * CSI Ps J  Erase in Display (ED).\n   *     Ps = 0  -> Erase Below (default).\n   *     Ps = 1  -> Erase Above.\n   *     Ps = 2  -> Erase All.\n   *     Ps = 3  -> Erase Saved Lines (xterm).\n   * CSI ? Ps J\n   *   Erase in Display (DECSED).\n   *     Ps = 0  -> Selective Erase Below (default).\n   *     Ps = 1  -> Selective Erase Above.\n   *     Ps = 2  -> Selective Erase All.\n   *\n   * @vt: #Y CSI ED  \"Erase In Display\"  \"CSI Ps J\"  \"Erase various parts of the viewport.\"\n   * Supported param values:\n   *\n   * | Ps | Effect                                                       |\n   * | -- | ------------------------------------------------------------ |\n   * | 0  | Erase from the cursor through the end of the viewport.       |\n   * | 1  | Erase from the beginning of the viewport through the cursor. |\n   * | 2  | Erase complete viewport.                                     |\n   * | 3  | Erase scrollback.                                            |\n   *\n   * @vt: #P[Protection attributes are not supported.] CSI DECSED   \"Selective Erase In Display\"  \"CSI ? Ps J\"  \"Currently the same as ED.\"\n   */\n  public eraseInDisplay(params: IParams): boolean {\n    this._restrictCursor(this._bufferService.cols);\n    let j;\n    switch (params.params[0]) {\n      case 0:\n        j = this._activeBuffer.y;\n        this._dirtyRowService.markDirty(j);\n        this._eraseInBufferLine(j++, this._activeBuffer.x, this._bufferService.cols, this._activeBuffer.x === 0);\n        for (; j < this._bufferService.rows; j++) {\n          this._resetBufferLine(j);\n        }\n        this._dirtyRowService.markDirty(j);\n        break;\n      case 1:\n        j = this._activeBuffer.y;\n        this._dirtyRowService.markDirty(j);\n        // Deleted front part of line and everything before. This line will no longer be wrapped.\n        this._eraseInBufferLine(j, 0, this._activeBuffer.x + 1, true);\n        if (this._activeBuffer.x + 1 >= this._bufferService.cols) {\n          // Deleted entire previous line. This next line can no longer be wrapped.\n          this._activeBuffer.lines.get(j + 1)!.isWrapped = false;\n        }\n        while (j--) {\n          this._resetBufferLine(j);\n        }\n        this._dirtyRowService.markDirty(0);\n        break;\n      case 2:\n        j = this._bufferService.rows;\n        this._dirtyRowService.markDirty(j - 1);\n        while (j--) {\n          this._resetBufferLine(j);\n        }\n        this._dirtyRowService.markDirty(0);\n        break;\n      case 3:\n        // Clear scrollback (everything not in viewport)\n        const scrollBackSize = this._activeBuffer.lines.length - this._bufferService.rows;\n        if (scrollBackSize > 0) {\n          this._activeBuffer.lines.trimStart(scrollBackSize);\n          this._activeBuffer.ybase = Math.max(this._activeBuffer.ybase - scrollBackSize, 0);\n          this._activeBuffer.ydisp = Math.max(this._activeBuffer.ydisp - scrollBackSize, 0);\n          // Force a scroll event to refresh viewport\n          this._onScroll.fire(0);\n        }\n        break;\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps K  Erase in Line (EL).\n   *     Ps = 0  -> Erase to Right (default).\n   *     Ps = 1  -> Erase to Left.\n   *     Ps = 2  -> Erase All.\n   * CSI ? Ps K\n   *   Erase in Line (DECSEL).\n   *     Ps = 0  -> Selective Erase to Right (default).\n   *     Ps = 1  -> Selective Erase to Left.\n   *     Ps = 2  -> Selective Erase All.\n   *\n   * @vt: #Y CSI EL    \"Erase In Line\"  \"CSI Ps K\"  \"Erase various parts of the active row.\"\n   * Supported param values:\n   *\n   * | Ps | Effect                                                   |\n   * | -- | -------------------------------------------------------- |\n   * | 0  | Erase from the cursor through the end of the row.        |\n   * | 1  | Erase from the beginning of the line through the cursor. |\n   * | 2  | Erase complete line.                                     |\n   *\n   * @vt: #P[Protection attributes are not supported.] CSI DECSEL   \"Selective Erase In Line\"  \"CSI ? Ps K\"  \"Currently the same as EL.\"\n   */\n  public eraseInLine(params: IParams): boolean {\n    this._restrictCursor(this._bufferService.cols);\n    switch (params.params[0]) {\n      case 0:\n        this._eraseInBufferLine(this._activeBuffer.y, this._activeBuffer.x, this._bufferService.cols, this._activeBuffer.x === 0);\n        break;\n      case 1:\n        this._eraseInBufferLine(this._activeBuffer.y, 0, this._activeBuffer.x + 1, false);\n        break;\n      case 2:\n        this._eraseInBufferLine(this._activeBuffer.y, 0, this._bufferService.cols, true);\n        break;\n    }\n    this._dirtyRowService.markDirty(this._activeBuffer.y);\n    return true;\n  }\n\n  /**\n   * CSI Ps L\n   * Insert Ps Line(s) (default = 1) (IL).\n   *\n   * @vt: #Y CSI IL  \"Insert Line\"   \"CSI Ps L\"  \"Insert `Ps` blank lines at active row (default=1).\"\n   * For every inserted line at the scroll top one line at the scroll bottom gets removed.\n   * The cursor is set to the first column.\n   * IL has no effect if the cursor is outside the scroll margins.\n   */\n  public insertLines(params: IParams): boolean {\n    this._restrictCursor();\n    let param = params.params[0] || 1;\n\n    if (this._activeBuffer.y > this._activeBuffer.scrollBottom || this._activeBuffer.y < this._activeBuffer.scrollTop) {\n      return true;\n    }\n\n    const row: number = this._activeBuffer.ybase + this._activeBuffer.y;\n\n    const scrollBottomRowsOffset = this._bufferService.rows - 1 - this._activeBuffer.scrollBottom;\n    const scrollBottomAbsolute = this._bufferService.rows - 1 + this._activeBuffer.ybase - scrollBottomRowsOffset + 1;\n    while (param--) {\n      // test: echo -e '\\e[44m\\e[1L\\e[0m'\n      // blankLine(true) - xterm/linux behavior\n      this._activeBuffer.lines.splice(scrollBottomAbsolute - 1, 1);\n      this._activeBuffer.lines.splice(row, 0, this._activeBuffer.getBlankLine(this._eraseAttrData()));\n    }\n\n    this._dirtyRowService.markRangeDirty(this._activeBuffer.y, this._activeBuffer.scrollBottom);\n    this._activeBuffer.x = 0; // see https://vt100.net/docs/vt220-rm/chapter4.html - vt220 only?\n    return true;\n  }\n\n  /**\n   * CSI Ps M\n   * Delete Ps Line(s) (default = 1) (DL).\n   *\n   * @vt: #Y CSI DL  \"Delete Line\"   \"CSI Ps M\"  \"Delete `Ps` lines at active row (default=1).\"\n   * For every deleted line at the scroll top one blank line at the scroll bottom gets appended.\n   * The cursor is set to the first column.\n   * DL has no effect if the cursor is outside the scroll margins.\n   */\n  public deleteLines(params: IParams): boolean {\n    this._restrictCursor();\n    let param = params.params[0] || 1;\n\n    if (this._activeBuffer.y > this._activeBuffer.scrollBottom || this._activeBuffer.y < this._activeBuffer.scrollTop) {\n      return true;\n    }\n\n    const row: number = this._activeBuffer.ybase + this._activeBuffer.y;\n\n    let j: number;\n    j = this._bufferService.rows - 1 - this._activeBuffer.scrollBottom;\n    j = this._bufferService.rows - 1 + this._activeBuffer.ybase - j;\n    while (param--) {\n      // test: echo -e '\\e[44m\\e[1M\\e[0m'\n      // blankLine(true) - xterm/linux behavior\n      this._activeBuffer.lines.splice(row, 1);\n      this._activeBuffer.lines.splice(j, 0, this._activeBuffer.getBlankLine(this._eraseAttrData()));\n    }\n\n    this._dirtyRowService.markRangeDirty(this._activeBuffer.y, this._activeBuffer.scrollBottom);\n    this._activeBuffer.x = 0; // see https://vt100.net/docs/vt220-rm/chapter4.html - vt220 only?\n    return true;\n  }\n\n  /**\n   * CSI Ps @\n   * Insert Ps (Blank) Character(s) (default = 1) (ICH).\n   *\n   * @vt: #Y CSI ICH  \"Insert Characters\"   \"CSI Ps @\"  \"Insert `Ps` (blank) characters (default = 1).\"\n   * The ICH sequence inserts `Ps` blank characters. The cursor remains at the beginning of the blank characters.\n   * Text between the cursor and right margin moves to the right. Characters moved past the right margin are lost.\n   *\n   *\n   * FIXME: check against xterm - should not work outside of scroll margins (see VT520 manual)\n   */\n  public insertChars(params: IParams): boolean {\n    this._restrictCursor();\n    const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y);\n    if (line) {\n      line.insertCells(\n        this._activeBuffer.x,\n        params.params[0] || 1,\n        this._activeBuffer.getNullCell(this._eraseAttrData()),\n        this._eraseAttrData()\n      );\n      this._dirtyRowService.markDirty(this._activeBuffer.y);\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps P\n   * Delete Ps Character(s) (default = 1) (DCH).\n   *\n   * @vt: #Y CSI DCH   \"Delete Character\"  \"CSI Ps P\"  \"Delete `Ps` characters (default=1).\"\n   * As characters are deleted, the remaining characters between the cursor and right margin move to the left.\n   * Character attributes move with the characters. The terminal adds blank characters at the right margin.\n   *\n   *\n   * FIXME: check against xterm - should not work outside of scroll margins (see VT520 manual)\n   */\n  public deleteChars(params: IParams): boolean {\n    this._restrictCursor();\n    const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y);\n    if (line) {\n      line.deleteCells(\n        this._activeBuffer.x,\n        params.params[0] || 1,\n        this._activeBuffer.getNullCell(this._eraseAttrData()),\n        this._eraseAttrData()\n      );\n      this._dirtyRowService.markDirty(this._activeBuffer.y);\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps S  Scroll up Ps lines (default = 1) (SU).\n   *\n   * @vt: #Y CSI SU  \"Scroll Up\"   \"CSI Ps S\"  \"Scroll `Ps` lines up (default=1).\"\n   *\n   *\n   * FIXME: scrolled out lines at top = 1 should add to scrollback (xterm)\n   */\n  public scrollUp(params: IParams): boolean {\n    let param = params.params[0] || 1;\n\n    while (param--) {\n      this._activeBuffer.lines.splice(this._activeBuffer.ybase + this._activeBuffer.scrollTop, 1);\n      this._activeBuffer.lines.splice(this._activeBuffer.ybase + this._activeBuffer.scrollBottom, 0, this._activeBuffer.getBlankLine(this._eraseAttrData()));\n    }\n    this._dirtyRowService.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom);\n    return true;\n  }\n\n  /**\n   * CSI Ps T  Scroll down Ps lines (default = 1) (SD).\n   *\n   * @vt: #Y CSI SD  \"Scroll Down\"   \"CSI Ps T\"  \"Scroll `Ps` lines down (default=1).\"\n   */\n  public scrollDown(params: IParams): boolean {\n    let param = params.params[0] || 1;\n\n    while (param--) {\n      this._activeBuffer.lines.splice(this._activeBuffer.ybase + this._activeBuffer.scrollBottom, 1);\n      this._activeBuffer.lines.splice(this._activeBuffer.ybase + this._activeBuffer.scrollTop, 0, this._activeBuffer.getBlankLine(DEFAULT_ATTR_DATA));\n    }\n    this._dirtyRowService.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom);\n    return true;\n  }\n\n  /**\n   * CSI Ps SP @  Scroll left Ps columns (default = 1) (SL) ECMA-48\n   *\n   * Notation: (Pn)\n   * Representation: CSI Pn 02/00 04/00\n   * Parameter default value: Pn = 1\n   * SL causes the data in the presentation component to be moved by n character positions\n   * if the line orientation is horizontal, or by n line positions if the line orientation\n   * is vertical, such that the data appear to move to the left; where n equals the value of Pn.\n   * The active presentation position is not affected by this control function.\n   *\n   * Supported:\n   *   - always left shift (no line orientation setting respected)\n   *\n   * @vt: #Y CSI SL  \"Scroll Left\" \"CSI Ps SP @\" \"Scroll viewport `Ps` times to the left.\"\n   * SL moves the content of all lines within the scroll margins `Ps` times to the left.\n   * SL has no effect outside of the scroll margins.\n   */\n  public scrollLeft(params: IParams): boolean {\n    if (this._activeBuffer.y > this._activeBuffer.scrollBottom || this._activeBuffer.y < this._activeBuffer.scrollTop) {\n      return true;\n    }\n    const param = params.params[0] || 1;\n    for (let y = this._activeBuffer.scrollTop; y <= this._activeBuffer.scrollBottom; ++y) {\n      const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + y)!;\n      line.deleteCells(0, param, this._activeBuffer.getNullCell(this._eraseAttrData()), this._eraseAttrData());\n      line.isWrapped = false;\n    }\n    this._dirtyRowService.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom);\n    return true;\n  }\n\n  /**\n   * CSI Ps SP A  Scroll right Ps columns (default = 1) (SR) ECMA-48\n   *\n   * Notation: (Pn)\n   * Representation: CSI Pn 02/00 04/01\n   * Parameter default value: Pn = 1\n   * SR causes the data in the presentation component to be moved by n character positions\n   * if the line orientation is horizontal, or by n line positions if the line orientation\n   * is vertical, such that the data appear to move to the right; where n equals the value of Pn.\n   * The active presentation position is not affected by this control function.\n   *\n   * Supported:\n   *   - always right shift (no line orientation setting respected)\n   *\n   * @vt: #Y CSI SR  \"Scroll Right\"  \"CSI Ps SP A\"   \"Scroll viewport `Ps` times to the right.\"\n   * SL moves the content of all lines within the scroll margins `Ps` times to the right.\n   * Content at the right margin is lost.\n   * SL has no effect outside of the scroll margins.\n   */\n  public scrollRight(params: IParams): boolean {\n    if (this._activeBuffer.y > this._activeBuffer.scrollBottom || this._activeBuffer.y < this._activeBuffer.scrollTop) {\n      return true;\n    }\n    const param = params.params[0] || 1;\n    for (let y = this._activeBuffer.scrollTop; y <= this._activeBuffer.scrollBottom; ++y) {\n      const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + y)!;\n      line.insertCells(0, param, this._activeBuffer.getNullCell(this._eraseAttrData()), this._eraseAttrData());\n      line.isWrapped = false;\n    }\n    this._dirtyRowService.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom);\n    return true;\n  }\n\n  /**\n   * CSI Pm ' }\n   * Insert Ps Column(s) (default = 1) (DECIC), VT420 and up.\n   *\n   * @vt: #Y CSI DECIC \"Insert Columns\"  \"CSI Ps ' }\"  \"Insert `Ps` columns at cursor position.\"\n   * DECIC inserts `Ps` times blank columns at the cursor position for all lines with the scroll margins,\n   * moving content to the right. Content at the right margin is lost.\n   * DECIC has no effect outside the scrolling margins.\n   */\n  public insertColumns(params: IParams): boolean {\n    if (this._activeBuffer.y > this._activeBuffer.scrollBottom || this._activeBuffer.y < this._activeBuffer.scrollTop) {\n      return true;\n    }\n    const param = params.params[0] || 1;\n    for (let y = this._activeBuffer.scrollTop; y <= this._activeBuffer.scrollBottom; ++y) {\n      const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + y)!;\n      line.insertCells(this._activeBuffer.x, param, this._activeBuffer.getNullCell(this._eraseAttrData()), this._eraseAttrData());\n      line.isWrapped = false;\n    }\n    this._dirtyRowService.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom);\n    return true;\n  }\n\n  /**\n   * CSI Pm ' ~\n   * Delete Ps Column(s) (default = 1) (DECDC), VT420 and up.\n   *\n   * @vt: #Y CSI DECDC \"Delete Columns\"  \"CSI Ps ' ~\"  \"Delete `Ps` columns at cursor position.\"\n   * DECDC deletes `Ps` times columns at the cursor position for all lines with the scroll margins,\n   * moving content to the left. Blank columns are added at the right margin.\n   * DECDC has no effect outside the scrolling margins.\n   */\n  public deleteColumns(params: IParams): boolean {\n    if (this._activeBuffer.y > this._activeBuffer.scrollBottom || this._activeBuffer.y < this._activeBuffer.scrollTop) {\n      return true;\n    }\n    const param = params.params[0] || 1;\n    for (let y = this._activeBuffer.scrollTop; y <= this._activeBuffer.scrollBottom; ++y) {\n      const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + y)!;\n      line.deleteCells(this._activeBuffer.x, param, this._activeBuffer.getNullCell(this._eraseAttrData()), this._eraseAttrData());\n      line.isWrapped = false;\n    }\n    this._dirtyRowService.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom);\n    return true;\n  }\n\n  /**\n   * CSI Ps X\n   * Erase Ps Character(s) (default = 1) (ECH).\n   *\n   * @vt: #Y CSI ECH   \"Erase Character\"   \"CSI Ps X\"  \"Erase `Ps` characters from current cursor position to the right (default=1).\"\n   * ED erases `Ps` characters from current cursor position to the right.\n   * ED works inside or outside the scrolling margins.\n   */\n  public eraseChars(params: IParams): boolean {\n    this._restrictCursor();\n    const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y);\n    if (line) {\n      line.replaceCells(\n        this._activeBuffer.x,\n        this._activeBuffer.x + (params.params[0] || 1),\n        this._activeBuffer.getNullCell(this._eraseAttrData()),\n        this._eraseAttrData()\n      );\n      this._dirtyRowService.markDirty(this._activeBuffer.y);\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps b  Repeat the preceding graphic character Ps times (REP).\n   * From ECMA 48 (@see http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-048.pdf)\n   *    Notation: (Pn)\n   *    Representation: CSI Pn 06/02\n   *    Parameter default value: Pn = 1\n   *    REP is used to indicate that the preceding character in the data stream,\n   *    if it is a graphic character (represented by one or more bit combinations) including SPACE,\n   *    is to be repeated n times, where n equals the value of Pn.\n   *    If the character preceding REP is a control function or part of a control function,\n   *    the effect of REP is not defined by this Standard.\n   *\n   * Since we propagate the terminal as xterm-256color we have to follow xterm's behavior:\n   *    - fullwidth + surrogate chars are ignored\n   *    - for combining chars only the base char gets repeated\n   *    - text attrs are applied normally\n   *    - wrap around is respected\n   *    - any valid sequence resets the carried forward char\n   *\n   * Note: To get reset on a valid sequence working correctly without much runtime penalty,\n   * the preceding codepoint is stored on the parser in `this.print` and reset during `parser.parse`.\n   *\n   * @vt: #Y CSI REP   \"Repeat Preceding Character\"    \"CSI Ps b\"  \"Repeat preceding character `Ps` times (default=1).\"\n   * REP repeats the previous character `Ps` times advancing the cursor, also wrapping if DECAWM is set.\n   * REP has no effect if the sequence does not follow a printable ASCII character\n   * (NOOP for any other sequence in between or NON ASCII characters).\n   */\n  public repeatPrecedingCharacter(params: IParams): boolean {\n    if (!this._parser.precedingCodepoint) {\n      return true;\n    }\n    // call print to insert the chars and handle correct wrapping\n    const length = params.params[0] || 1;\n    const data = new Uint32Array(length);\n    for (let i = 0; i < length; ++i) {\n      data[i] = this._parser.precedingCodepoint;\n    }\n    this.print(data, 0, data.length);\n    return true;\n  }\n\n  /**\n   * CSI Ps c  Send Device Attributes (Primary DA).\n   *     Ps = 0  or omitted -> request attributes from terminal.  The\n   *     response depends on the decTerminalID resource setting.\n   *     -> CSI ? 1 ; 2 c  (``VT100 with Advanced Video Option'')\n   *     -> CSI ? 1 ; 0 c  (``VT101 with No Options'')\n   *     -> CSI ? 6 c  (``VT102'')\n   *     -> CSI ? 6 0 ; 1 ; 2 ; 6 ; 8 ; 9 ; 1 5 ; c  (``VT220'')\n   *   The VT100-style response parameters do not mean anything by\n   *   themselves.  VT220 parameters do, telling the host what fea-\n   *   tures the terminal supports:\n   *     Ps = 1  -> 132-columns.\n   *     Ps = 2  -> Printer.\n   *     Ps = 6  -> Selective erase.\n   *     Ps = 8  -> User-defined keys.\n   *     Ps = 9  -> National replacement character sets.\n   *     Ps = 1 5  -> Technical characters.\n   *     Ps = 2 2  -> ANSI color, e.g., VT525.\n   *     Ps = 2 9  -> ANSI text locator (i.e., DEC Locator mode).\n   *\n   * @vt: #Y CSI DA1   \"Primary Device Attributes\"     \"CSI c\"  \"Send primary device attributes.\"\n   *\n   *\n   * TODO: fix and cleanup response\n   */\n  public sendDeviceAttributesPrimary(params: IParams): boolean {\n    if (params.params[0] > 0) {\n      return true;\n    }\n    if (this._is('xterm') || this._is('rxvt-unicode') || this._is('screen')) {\n      this._coreService.triggerDataEvent(C0.ESC + '[?1;2c');\n    } else if (this._is('linux')) {\n      this._coreService.triggerDataEvent(C0.ESC + '[?6c');\n    }\n    return true;\n  }\n\n  /**\n   * CSI > Ps c\n   *   Send Device Attributes (Secondary DA).\n   *     Ps = 0  or omitted -> request the terminal's identification\n   *     code.  The response depends on the decTerminalID resource set-\n   *     ting.  It should apply only to VT220 and up, but xterm extends\n   *     this to VT100.\n   *     -> CSI  > Pp ; Pv ; Pc c\n   *   where Pp denotes the terminal type\n   *     Pp = 0  -> ``VT100''.\n   *     Pp = 1  -> ``VT220''.\n   *   and Pv is the firmware version (for xterm, this was originally\n   *   the XFree86 patch number, starting with 95).  In a DEC termi-\n   *   nal, Pc indicates the ROM cartridge registration number and is\n   *   always zero.\n   * More information:\n   *   xterm/charproc.c - line 2012, for more information.\n   *   vim responds with ^[[?0c or ^[[?1c after the terminal's response (?)\n   *\n   * @vt: #Y CSI DA2   \"Secondary Device Attributes\"   \"CSI > c\" \"Send primary device attributes.\"\n   *\n   *\n   * TODO: fix and cleanup response\n   */\n  public sendDeviceAttributesSecondary(params: IParams): boolean {\n    if (params.params[0] > 0) {\n      return true;\n    }\n    // xterm and urxvt\n    // seem to spit this\n    // out around ~370 times (?).\n    if (this._is('xterm')) {\n      this._coreService.triggerDataEvent(C0.ESC + '[>0;276;0c');\n    } else if (this._is('rxvt-unicode')) {\n      this._coreService.triggerDataEvent(C0.ESC + '[>85;95;0c');\n    } else if (this._is('linux')) {\n      // not supported by linux console.\n      // linux console echoes parameters.\n      this._coreService.triggerDataEvent(params.params[0] + 'c');\n    } else if (this._is('screen')) {\n      this._coreService.triggerDataEvent(C0.ESC + '[>83;40003;0c');\n    }\n    return true;\n  }\n\n  /**\n   * Evaluate if the current terminal is the given argument.\n   * @param term The terminal name to evaluate\n   */\n  private _is(term: string): boolean {\n    return (this._optionsService.rawOptions.termName + '').indexOf(term) === 0;\n  }\n\n  /**\n   * CSI Pm h  Set Mode (SM).\n   *     Ps = 2  -> Keyboard Action Mode (AM).\n   *     Ps = 4  -> Insert Mode (IRM).\n   *     Ps = 1 2  -> Send/receive (SRM).\n   *     Ps = 2 0  -> Automatic Newline (LNM).\n   *\n   * @vt: #P[Only IRM is supported.]    CSI SM    \"Set Mode\"  \"CSI Pm h\"  \"Set various terminal modes.\"\n   * Supported param values by SM:\n   *\n   * | Param | Action                                 | Support |\n   * | ----- | -------------------------------------- | ------- |\n   * | 2     | Keyboard Action Mode (KAM). Always on. | #N      |\n   * | 4     | Insert Mode (IRM).                     | #Y      |\n   * | 12    | Send/receive (SRM). Always off.        | #N      |\n   * | 20    | Automatic Newline (LNM). Always off.   | #N      |\n   */\n  public setMode(params: IParams): boolean {\n    for (let i = 0; i < params.length; i++) {\n      switch (params.params[i]) {\n        case 4:\n          this._coreService.modes.insertMode = true;\n          break;\n        case 20:\n          // this._t.convertEol = true;\n          break;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * CSI ? Pm h\n   *   DEC Private Mode Set (DECSET).\n   *     Ps = 1  -> Application Cursor Keys (DECCKM).\n   *     Ps = 2  -> Designate USASCII for character sets G0-G3\n   *     (DECANM), and set VT100 mode.\n   *     Ps = 3  -> 132 Column Mode (DECCOLM).\n   *     Ps = 4  -> Smooth (Slow) Scroll (DECSCLM).\n   *     Ps = 5  -> Reverse Video (DECSCNM).\n   *     Ps = 6  -> Origin Mode (DECOM).\n   *     Ps = 7  -> Wraparound Mode (DECAWM).\n   *     Ps = 8  -> Auto-repeat Keys (DECARM).\n   *     Ps = 9  -> Send Mouse X & Y on button press.  See the sec-\n   *     tion Mouse Tracking.\n   *     Ps = 1 0  -> Show toolbar (rxvt).\n   *     Ps = 1 2  -> Start Blinking Cursor (att610).\n   *     Ps = 1 8  -> Print form feed (DECPFF).\n   *     Ps = 1 9  -> Set print extent to full screen (DECPEX).\n   *     Ps = 2 5  -> Show Cursor (DECTCEM).\n   *     Ps = 3 0  -> Show scrollbar (rxvt).\n   *     Ps = 3 5  -> Enable font-shifting functions (rxvt).\n   *     Ps = 3 8  -> Enter Tektronix Mode (DECTEK).\n   *     Ps = 4 0  -> Allow 80 -> 132 Mode.\n   *     Ps = 4 1  -> more(1) fix (see curses resource).\n   *     Ps = 4 2  -> Enable Nation Replacement Character sets (DECN-\n   *     RCM).\n   *     Ps = 4 4  -> Turn On Margin Bell.\n   *     Ps = 4 5  -> Reverse-wraparound Mode.\n   *     Ps = 4 6  -> Start Logging.  This is normally disabled by a\n   *     compile-time option.\n   *     Ps = 4 7  -> Use Alternate Screen Buffer.  (This may be dis-\n   *     abled by the titeInhibit resource).\n   *     Ps = 6 6  -> Application keypad (DECNKM).\n   *     Ps = 6 7  -> Backarrow key sends backspace (DECBKM).\n   *     Ps = 1 0 0 0  -> Send Mouse X & Y on button press and\n   *     release.  See the section Mouse Tracking.\n   *     Ps = 1 0 0 1  -> Use Hilite Mouse Tracking.\n   *     Ps = 1 0 0 2  -> Use Cell Motion Mouse Tracking.\n   *     Ps = 1 0 0 3  -> Use All Motion Mouse Tracking.\n   *     Ps = 1 0 0 4  -> Send FocusIn/FocusOut events.\n   *     Ps = 1 0 0 5  -> Enable Extended Mouse Mode.\n   *     Ps = 1 0 1 0  -> Scroll to bottom on tty output (rxvt).\n   *     Ps = 1 0 1 1  -> Scroll to bottom on key press (rxvt).\n   *     Ps = 1 0 3 4  -> Interpret \"meta\" key, sets eighth bit.\n   *     (enables the eightBitInput resource).\n   *     Ps = 1 0 3 5  -> Enable special modifiers for Alt and Num-\n   *     Lock keys.  (This enables the numLock resource).\n   *     Ps = 1 0 3 6  -> Send ESC   when Meta modifies a key.  (This\n   *     enables the metaSendsEscape resource).\n   *     Ps = 1 0 3 7  -> Send DEL from the editing-keypad Delete\n   *     key.\n   *     Ps = 1 0 3 9  -> Send ESC  when Alt modifies a key.  (This\n   *     enables the altSendsEscape resource).\n   *     Ps = 1 0 4 0  -> Keep selection even if not highlighted.\n   *     (This enables the keepSelection resource).\n   *     Ps = 1 0 4 1  -> Use the CLIPBOARD selection.  (This enables\n   *     the selectToClipboard resource).\n   *     Ps = 1 0 4 2  -> Enable Urgency window manager hint when\n   *     Control-G is received.  (This enables the bellIsUrgent\n   *     resource).\n   *     Ps = 1 0 4 3  -> Enable raising of the window when Control-G\n   *     is received.  (enables the popOnBell resource).\n   *     Ps = 1 0 4 7  -> Use Alternate Screen Buffer.  (This may be\n   *     disabled by the titeInhibit resource).\n   *     Ps = 1 0 4 8  -> Save cursor as in DECSC.  (This may be dis-\n   *     abled by the titeInhibit resource).\n   *     Ps = 1 0 4 9  -> Save cursor as in DECSC and use Alternate\n   *     Screen Buffer, clearing it first.  (This may be disabled by\n   *     the titeInhibit resource).  This combines the effects of the 1\n   *     0 4 7  and 1 0 4 8  modes.  Use this with terminfo-based\n   *     applications rather than the 4 7  mode.\n   *     Ps = 1 0 5 0  -> Set terminfo/termcap function-key mode.\n   *     Ps = 1 0 5 1  -> Set Sun function-key mode.\n   *     Ps = 1 0 5 2  -> Set HP function-key mode.\n   *     Ps = 1 0 5 3  -> Set SCO function-key mode.\n   *     Ps = 1 0 6 0  -> Set legacy keyboard emulation (X11R6).\n   *     Ps = 1 0 6 1  -> Set VT220 keyboard emulation.\n   *     Ps = 2 0 0 4  -> Set bracketed paste mode.\n   * Modes:\n   *   http: *vt100.net/docs/vt220-rm/chapter4.html\n   *\n   * @vt: #P[See below for supported modes.]    CSI DECSET  \"DEC Private Set Mode\" \"CSI ? Pm h\"  \"Set various terminal attributes.\"\n   * Supported param values by DECSET:\n   *\n   * | param | Action                                                  | Support |\n   * | ----- | ------------------------------------------------------- | --------|\n   * | 1     | Application Cursor Keys (DECCKM).                       | #Y      |\n   * | 2     | Designate US-ASCII for character sets G0-G3 (DECANM).   | #Y      |\n   * | 3     | 132 Column Mode (DECCOLM).                              | #Y      |\n   * | 6     | Origin Mode (DECOM).                                    | #Y      |\n   * | 7     | Auto-wrap Mode (DECAWM).                                | #Y      |\n   * | 8     | Auto-repeat Keys (DECARM). Always on.                   | #N      |\n   * | 9     | X10 xterm mouse protocol.                               | #Y      |\n   * | 12    | Start Blinking Cursor.                                  | #Y      |\n   * | 25    | Show Cursor (DECTCEM).                                  | #Y      |\n   * | 45    | Reverse wrap-around.                                    | #Y      |\n   * | 47    | Use Alternate Screen Buffer.                            | #Y      |\n   * | 66    | Application keypad (DECNKM).                            | #Y      |\n   * | 1000  | X11 xterm mouse protocol.                               | #Y      |\n   * | 1002  | Use Cell Motion Mouse Tracking.                         | #Y      |\n   * | 1003  | Use All Motion Mouse Tracking.                          | #Y      |\n   * | 1004  | Send FocusIn/FocusOut events                            | #Y      |\n   * | 1005  | Enable UTF-8 Mouse Mode.                                | #N      |\n   * | 1006  | Enable SGR Mouse Mode.                                  | #Y      |\n   * | 1015  | Enable urxvt Mouse Mode.                                | #N      |\n   * | 1047  | Use Alternate Screen Buffer.                            | #Y      |\n   * | 1048  | Save cursor as in DECSC.                                | #Y      |\n   * | 1049  | Save cursor and switch to alternate buffer clearing it. | #P[Does not clear the alternate buffer.] |\n   * | 2004  | Set bracketed paste mode.                               | #Y      |\n   *\n   *\n   * FIXME: implement DECSCNM, 1049 should clear altbuffer\n   */\n  public setModePrivate(params: IParams): boolean {\n    for (let i = 0; i < params.length; i++) {\n      switch (params.params[i]) {\n        case 1:\n          this._coreService.decPrivateModes.applicationCursorKeys = true;\n          break;\n        case 2:\n          this._charsetService.setgCharset(0, DEFAULT_CHARSET);\n          this._charsetService.setgCharset(1, DEFAULT_CHARSET);\n          this._charsetService.setgCharset(2, DEFAULT_CHARSET);\n          this._charsetService.setgCharset(3, DEFAULT_CHARSET);\n          // set VT100 mode here\n          break;\n        case 3:\n          /**\n           * DECCOLM - 132 column mode.\n           * This is only active if 'SetWinLines' (24) is enabled\n           * through `options.windowsOptions`.\n           */\n          if (this._optionsService.rawOptions.windowOptions.setWinLines) {\n            this._bufferService.resize(132, this._bufferService.rows);\n            this._onRequestReset.fire();\n          }\n          break;\n        case 6:\n          this._coreService.decPrivateModes.origin = true;\n          this._setCursor(0, 0);\n          break;\n        case 7:\n          this._coreService.decPrivateModes.wraparound = true;\n          break;\n        case 12:\n          // this.cursorBlink = true;\n          break;\n        case 45:\n          this._coreService.decPrivateModes.reverseWraparound = true;\n          break;\n        case 66:\n          this._logService.debug('Serial port requested application keypad.');\n          this._coreService.decPrivateModes.applicationKeypad = true;\n          this._onRequestSyncScrollBar.fire();\n          break;\n        case 9: // X10 Mouse\n          // no release, no motion, no wheel, no modifiers.\n          this._coreMouseService.activeProtocol = 'X10';\n          break;\n        case 1000: // vt200 mouse\n          // no motion.\n          this._coreMouseService.activeProtocol = 'VT200';\n          break;\n        case 1002: // button event mouse\n          this._coreMouseService.activeProtocol = 'DRAG';\n          break;\n        case 1003: // any event mouse\n          // any event - sends motion events,\n          // even if there is no button held down.\n          this._coreMouseService.activeProtocol = 'ANY';\n          break;\n        case 1004: // send focusin/focusout events\n          // focusin: ^[[I\n          // focusout: ^[[O\n          this._coreService.decPrivateModes.sendFocus = true;\n          this._onRequestSendFocus.fire();\n          break;\n        case 1005: // utf8 ext mode mouse - removed in #2507\n          this._logService.debug('DECSET 1005 not supported (see #2507)');\n          break;\n        case 1006: // sgr ext mode mouse\n          this._coreMouseService.activeEncoding = 'SGR';\n          break;\n        case 1015: // urxvt ext mode mouse - removed in #2507\n          this._logService.debug('DECSET 1015 not supported (see #2507)');\n          break;\n        case 25: // show cursor\n          this._coreService.isCursorHidden = false;\n          break;\n        case 1048: // alt screen cursor\n          this.saveCursor();\n          break;\n        case 1049: // alt screen buffer cursor\n          this.saveCursor();\n        // FALL-THROUGH\n        case 47: // alt screen buffer\n        case 1047: // alt screen buffer\n          this._bufferService.buffers.activateAltBuffer(this._eraseAttrData());\n          this._coreService.isCursorInitialized = true;\n          this._onRequestRefreshRows.fire(0, this._bufferService.rows - 1);\n          this._onRequestSyncScrollBar.fire();\n          break;\n        case 2004: // bracketed paste mode (https://cirw.in/blog/bracketed-paste)\n          this._coreService.decPrivateModes.bracketedPasteMode = true;\n          break;\n      }\n    }\n    return true;\n  }\n\n\n  /**\n   * CSI Pm l  Reset Mode (RM).\n   *     Ps = 2  -> Keyboard Action Mode (AM).\n   *     Ps = 4  -> Replace Mode (IRM).\n   *     Ps = 1 2  -> Send/receive (SRM).\n   *     Ps = 2 0  -> Normal Linefeed (LNM).\n   *\n   * @vt: #P[Only IRM is supported.]    CSI RM    \"Reset Mode\"  \"CSI Pm l\"  \"Set various terminal attributes.\"\n   * Supported param values by RM:\n   *\n   * | Param | Action                                 | Support |\n   * | ----- | -------------------------------------- | ------- |\n   * | 2     | Keyboard Action Mode (KAM). Always on. | #N      |\n   * | 4     | Replace Mode (IRM). (default)          | #Y      |\n   * | 12    | Send/receive (SRM). Always off.        | #N      |\n   * | 20    | Normal Linefeed (LNM). Always off.     | #N      |\n   *\n   *\n   * FIXME: why is LNM commented out?\n   */\n  public resetMode(params: IParams): boolean {\n    for (let i = 0; i < params.length; i++) {\n      switch (params.params[i]) {\n        case 4:\n          this._coreService.modes.insertMode = false;\n          break;\n        case 20:\n          // this._t.convertEol = false;\n          break;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * CSI ? Pm l\n   *   DEC Private Mode Reset (DECRST).\n   *     Ps = 1  -> Normal Cursor Keys (DECCKM).\n   *     Ps = 2  -> Designate VT52 mode (DECANM).\n   *     Ps = 3  -> 80 Column Mode (DECCOLM).\n   *     Ps = 4  -> Jump (Fast) Scroll (DECSCLM).\n   *     Ps = 5  -> Normal Video (DECSCNM).\n   *     Ps = 6  -> Normal Cursor Mode (DECOM).\n   *     Ps = 7  -> No Wraparound Mode (DECAWM).\n   *     Ps = 8  -> No Auto-repeat Keys (DECARM).\n   *     Ps = 9  -> Don't send Mouse X & Y on button press.\n   *     Ps = 1 0  -> Hide toolbar (rxvt).\n   *     Ps = 1 2  -> Stop Blinking Cursor (att610).\n   *     Ps = 1 8  -> Don't print form feed (DECPFF).\n   *     Ps = 1 9  -> Limit print to scrolling region (DECPEX).\n   *     Ps = 2 5  -> Hide Cursor (DECTCEM).\n   *     Ps = 3 0  -> Don't show scrollbar (rxvt).\n   *     Ps = 3 5  -> Disable font-shifting functions (rxvt).\n   *     Ps = 4 0  -> Disallow 80 -> 132 Mode.\n   *     Ps = 4 1  -> No more(1) fix (see curses resource).\n   *     Ps = 4 2  -> Disable Nation Replacement Character sets (DEC-\n   *     NRCM).\n   *     Ps = 4 4  -> Turn Off Margin Bell.\n   *     Ps = 4 5  -> No Reverse-wraparound Mode.\n   *     Ps = 4 6  -> Stop Logging.  (This is normally disabled by a\n   *     compile-time option).\n   *     Ps = 4 7  -> Use Normal Screen Buffer.\n   *     Ps = 6 6  -> Numeric keypad (DECNKM).\n   *     Ps = 6 7  -> Backarrow key sends delete (DECBKM).\n   *     Ps = 1 0 0 0  -> Don't send Mouse X & Y on button press and\n   *     release.  See the section Mouse Tracking.\n   *     Ps = 1 0 0 1  -> Don't use Hilite Mouse Tracking.\n   *     Ps = 1 0 0 2  -> Don't use Cell Motion Mouse Tracking.\n   *     Ps = 1 0 0 3  -> Don't use All Motion Mouse Tracking.\n   *     Ps = 1 0 0 4  -> Don't send FocusIn/FocusOut events.\n   *     Ps = 1 0 0 5  -> Disable Extended Mouse Mode.\n   *     Ps = 1 0 1 0  -> Don't scroll to bottom on tty output\n   *     (rxvt).\n   *     Ps = 1 0 1 1  -> Don't scroll to bottom on key press (rxvt).\n   *     Ps = 1 0 3 4  -> Don't interpret \"meta\" key.  (This disables\n   *     the eightBitInput resource).\n   *     Ps = 1 0 3 5  -> Disable special modifiers for Alt and Num-\n   *     Lock keys.  (This disables the numLock resource).\n   *     Ps = 1 0 3 6  -> Don't send ESC  when Meta modifies a key.\n   *     (This disables the metaSendsEscape resource).\n   *     Ps = 1 0 3 7  -> Send VT220 Remove from the editing-keypad\n   *     Delete key.\n   *     Ps = 1 0 3 9  -> Don't send ESC  when Alt modifies a key.\n   *     (This disables the altSendsEscape resource).\n   *     Ps = 1 0 4 0  -> Do not keep selection when not highlighted.\n   *     (This disables the keepSelection resource).\n   *     Ps = 1 0 4 1  -> Use the PRIMARY selection.  (This disables\n   *     the selectToClipboard resource).\n   *     Ps = 1 0 4 2  -> Disable Urgency window manager hint when\n   *     Control-G is received.  (This disables the bellIsUrgent\n   *     resource).\n   *     Ps = 1 0 4 3  -> Disable raising of the window when Control-\n   *     G is received.  (This disables the popOnBell resource).\n   *     Ps = 1 0 4 7  -> Use Normal Screen Buffer, clearing screen\n   *     first if in the Alternate Screen.  (This may be disabled by\n   *     the titeInhibit resource).\n   *     Ps = 1 0 4 8  -> Restore cursor as in DECRC.  (This may be\n   *     disabled by the titeInhibit resource).\n   *     Ps = 1 0 4 9  -> Use Normal Screen Buffer and restore cursor\n   *     as in DECRC.  (This may be disabled by the titeInhibit\n   *     resource).  This combines the effects of the 1 0 4 7  and 1 0\n   *     4 8  modes.  Use this with terminfo-based applications rather\n   *     than the 4 7  mode.\n   *     Ps = 1 0 5 0  -> Reset terminfo/termcap function-key mode.\n   *     Ps = 1 0 5 1  -> Reset Sun function-key mode.\n   *     Ps = 1 0 5 2  -> Reset HP function-key mode.\n   *     Ps = 1 0 5 3  -> Reset SCO function-key mode.\n   *     Ps = 1 0 6 0  -> Reset legacy keyboard emulation (X11R6).\n   *     Ps = 1 0 6 1  -> Reset keyboard emulation to Sun/PC style.\n   *     Ps = 2 0 0 4  -> Reset bracketed paste mode.\n   *\n   * @vt: #P[See below for supported modes.]    CSI DECRST  \"DEC Private Reset Mode\" \"CSI ? Pm l\"  \"Reset various terminal attributes.\"\n   * Supported param values by DECRST:\n   *\n   * | param | Action                                                  | Support |\n   * | ----- | ------------------------------------------------------- | ------- |\n   * | 1     | Normal Cursor Keys (DECCKM).                            | #Y      |\n   * | 2     | Designate VT52 mode (DECANM).                           | #N      |\n   * | 3     | 80 Column Mode (DECCOLM).                               | #B[Switches to old column width instead of 80.] |\n   * | 6     | Normal Cursor Mode (DECOM).                             | #Y      |\n   * | 7     | No Wraparound Mode (DECAWM).                            | #Y      |\n   * | 8     | No Auto-repeat Keys (DECARM).                           | #N      |\n   * | 9     | Don't send Mouse X & Y on button press.                 | #Y      |\n   * | 12    | Stop Blinking Cursor.                                   | #Y      |\n   * | 25    | Hide Cursor (DECTCEM).                                  | #Y      |\n   * | 45    | No reverse wrap-around.                                 | #Y      |\n   * | 47    | Use Normal Screen Buffer.                               | #Y      |\n   * | 66    | Numeric keypad (DECNKM).                                | #Y      |\n   * | 1000  | Don't send Mouse reports.                               | #Y      |\n   * | 1002  | Don't use Cell Motion Mouse Tracking.                   | #Y      |\n   * | 1003  | Don't use All Motion Mouse Tracking.                    | #Y      |\n   * | 1004  | Don't send FocusIn/FocusOut events.                     | #Y      |\n   * | 1005  | Disable UTF-8 Mouse Mode.                               | #N      |\n   * | 1006  | Disable SGR Mouse Mode.                                 | #Y      |\n   * | 1015  | Disable urxvt Mouse Mode.                               | #N      |\n   * | 1047  | Use Normal Screen Buffer (clearing screen if in alt).   | #Y      |\n   * | 1048  | Restore cursor as in DECRC.                             | #Y      |\n   * | 1049  | Use Normal Screen Buffer and restore cursor.            | #Y      |\n   * | 2004  | Reset bracketed paste mode.                             | #Y      |\n   *\n   *\n   * FIXME: DECCOLM is currently broken (already fixed in window options PR)\n   */\n  public resetModePrivate(params: IParams): boolean {\n    for (let i = 0; i < params.length; i++) {\n      switch (params.params[i]) {\n        case 1:\n          this._coreService.decPrivateModes.applicationCursorKeys = false;\n          break;\n        case 3:\n          /**\n           * DECCOLM - 80 column mode.\n           * This is only active if 'SetWinLines' (24) is enabled\n           * through `options.windowsOptions`.\n           */\n          if (this._optionsService.rawOptions.windowOptions.setWinLines) {\n            this._bufferService.resize(80, this._bufferService.rows);\n            this._onRequestReset.fire();\n          }\n          break;\n        case 6:\n          this._coreService.decPrivateModes.origin = false;\n          this._setCursor(0, 0);\n          break;\n        case 7:\n          this._coreService.decPrivateModes.wraparound = false;\n          break;\n        case 12:\n          // this.cursorBlink = false;\n          break;\n        case 45:\n          this._coreService.decPrivateModes.reverseWraparound = false;\n          break;\n        case 66:\n          this._logService.debug('Switching back to normal keypad.');\n          this._coreService.decPrivateModes.applicationKeypad = false;\n          this._onRequestSyncScrollBar.fire();\n          break;\n        case 9: // X10 Mouse\n        case 1000: // vt200 mouse\n        case 1002: // button event mouse\n        case 1003: // any event mouse\n          this._coreMouseService.activeProtocol = 'NONE';\n          break;\n        case 1004: // send focusin/focusout events\n          this._coreService.decPrivateModes.sendFocus = false;\n          break;\n        case 1005: // utf8 ext mode mouse - removed in #2507\n          this._logService.debug('DECRST 1005 not supported (see #2507)');\n          break;\n        case 1006: // sgr ext mode mouse\n          this._coreMouseService.activeEncoding = 'DEFAULT';\n          break;\n        case 1015: // urxvt ext mode mouse - removed in #2507\n          this._logService.debug('DECRST 1015 not supported (see #2507)');\n          break;\n        case 25: // hide cursor\n          this._coreService.isCursorHidden = true;\n          break;\n        case 1048: // alt screen cursor\n          this.restoreCursor();\n          break;\n        case 1049: // alt screen buffer cursor\n        // FALL-THROUGH\n        case 47: // normal screen buffer\n        case 1047: // normal screen buffer - clearing it first\n          // Ensure the selection manager has the correct buffer\n          this._bufferService.buffers.activateNormalBuffer();\n          if (params.params[i] === 1049) {\n            this.restoreCursor();\n          }\n          this._coreService.isCursorInitialized = true;\n          this._onRequestRefreshRows.fire(0, this._bufferService.rows - 1);\n          this._onRequestSyncScrollBar.fire();\n          break;\n        case 2004: // bracketed paste mode (https://cirw.in/blog/bracketed-paste)\n          this._coreService.decPrivateModes.bracketedPasteMode = false;\n          break;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Helper to write color information packed with color mode.\n   */\n  private _updateAttrColor(color: number, mode: number, c1: number, c2: number, c3: number): number {\n    if (mode === 2) {\n      color |= Attributes.CM_RGB;\n      color &= ~Attributes.RGB_MASK;\n      color |= AttributeData.fromColorRGB([c1, c2, c3]);\n    } else if (mode === 5) {\n      color &= ~(Attributes.CM_MASK | Attributes.PCOLOR_MASK);\n      color |= Attributes.CM_P256 | (c1 & 0xff);\n    }\n    return color;\n  }\n\n  /**\n   * Helper to extract and apply color params/subparams.\n   * Returns advance for params index.\n   */\n  private _extractColor(params: IParams, pos: number, attr: IAttributeData): number {\n    // normalize params\n    // meaning: [target, CM, ign, val, val, val]\n    // RGB    : [ 38/48,  2, ign,   r,   g,   b]\n    // P256   : [ 38/48,  5, ign,   v, ign, ign]\n    const accu = [0, 0, -1, 0, 0, 0];\n\n    // alignment placeholder for non color space sequences\n    let cSpace = 0;\n\n    // return advance we took in params\n    let advance = 0;\n\n    do {\n      accu[advance + cSpace] = params.params[pos + advance];\n      if (params.hasSubParams(pos + advance)) {\n        const subparams = params.getSubParams(pos + advance)!;\n        let i = 0;\n        do {\n          if (accu[1] === 5) {\n            cSpace = 1;\n          }\n          accu[advance + i + 1 + cSpace] = subparams[i];\n        } while (++i < subparams.length && i + advance + 1 + cSpace < accu.length);\n        break;\n      }\n      // exit early if can decide color mode with semicolons\n      if ((accu[1] === 5 && advance + cSpace >= 2)\n        || (accu[1] === 2 && advance + cSpace >= 5)) {\n        break;\n      }\n      // offset colorSpace slot for semicolon mode\n      if (accu[1]) {\n        cSpace = 1;\n      }\n    } while (++advance + pos < params.length && advance + cSpace < accu.length);\n\n    // set default values to 0\n    for (let i = 2; i < accu.length; ++i) {\n      if (accu[i] === -1) {\n        accu[i] = 0;\n      }\n    }\n\n    // apply colors\n    switch (accu[0]) {\n      case 38:\n        attr.fg = this._updateAttrColor(attr.fg, accu[1], accu[3], accu[4], accu[5]);\n        break;\n      case 48:\n        attr.bg = this._updateAttrColor(attr.bg, accu[1], accu[3], accu[4], accu[5]);\n        break;\n      case 58:\n        attr.extended = attr.extended.clone();\n        attr.extended.underlineColor = this._updateAttrColor(attr.extended.underlineColor, accu[1], accu[3], accu[4], accu[5]);\n    }\n\n    return advance;\n  }\n\n  /**\n   * SGR 4 subparams:\n   *    4:0   -   equal to SGR 24 (turn off all underline)\n   *    4:1   -   equal to SGR 4 (single underline)\n   *    4:2   -   equal to SGR 21 (double underline)\n   *    4:3   -   curly underline\n   *    4:4   -   dotted underline\n   *    4:5   -   dashed underline\n   */\n  private _processUnderline(style: number, attr: IAttributeData): void {\n    // treat extended attrs as immutable, thus always clone from old one\n    // this is needed since the buffer only holds references to it\n    attr.extended = attr.extended.clone();\n\n    // default to 1 == single underline\n    if (!~style || style > 5) {\n      style = 1;\n    }\n    attr.extended.underlineStyle = style;\n    attr.fg |= FgFlags.UNDERLINE;\n\n    // 0 deactivates underline\n    if (style === 0) {\n      attr.fg &= ~FgFlags.UNDERLINE;\n    }\n\n    // update HAS_EXTENDED in BG\n    attr.updateExtended();\n  }\n\n  /**\n   * CSI Pm m  Character Attributes (SGR).\n   *\n   * @vt: #P[See below for supported attributes.]    CSI SGR   \"Select Graphic Rendition\"  \"CSI Pm m\"  \"Set/Reset various text attributes.\"\n   * SGR selects one or more character attributes at the same time. Multiple params (up to 32)\n   * are applied in order from left to right. The changed attributes are applied to all new\n   * characters received. If you move characters in the viewport by scrolling or any other means,\n   * then the attributes move with the characters.\n   *\n   * Supported param values by SGR:\n   *\n   * | Param     | Meaning                                                  | Support |\n   * | --------- | -------------------------------------------------------- | ------- |\n   * | 0         | Normal (default). Resets any other preceding SGR.        | #Y      |\n   * | 1         | Bold. (also see `options.drawBoldTextInBrightColors`)    | #Y      |\n   * | 2         | Faint, decreased intensity.                              | #Y      |\n   * | 3         | Italic.                                                  | #Y      |\n   * | 4         | Underlined (see below for style support).                | #Y      |\n   * | 5         | Slowly blinking.                                         | #N      |\n   * | 6         | Rapidly blinking.                                        | #N      |\n   * | 7         | Inverse. Flips foreground and background color.          | #Y      |\n   * | 8         | Invisible (hidden).                                      | #Y      |\n   * | 9         | Crossed-out characters (strikethrough).                  | #Y      |\n   * | 21        | Doubly underlined.                                       | #P[Currently outputs a single underline.] |\n   * | 22        | Normal (neither bold nor faint).                         | #Y      |\n   * | 23        | No italic.                                               | #Y      |\n   * | 24        | Not underlined.                                          | #Y      |\n   * | 25        | Steady (not blinking).                                   | #Y      |\n   * | 27        | Positive (not inverse).                                  | #Y      |\n   * | 28        | Visible (not hidden).                                    | #Y      |\n   * | 29        | Not Crossed-out (strikethrough).                         | #Y      |\n   * | 30        | Foreground color: Black.                                 | #Y      |\n   * | 31        | Foreground color: Red.                                   | #Y      |\n   * | 32        | Foreground color: Green.                                 | #Y      |\n   * | 33        | Foreground color: Yellow.                                | #Y      |\n   * | 34        | Foreground color: Blue.                                  | #Y      |\n   * | 35        | Foreground color: Magenta.                               | #Y      |\n   * | 36        | Foreground color: Cyan.                                  | #Y      |\n   * | 37        | Foreground color: White.                                 | #Y      |\n   * | 38        | Foreground color: Extended color.                        | #P[Support for RGB and indexed colors, see below.] |\n   * | 39        | Foreground color: Default (original).                    | #Y      |\n   * | 40        | Background color: Black.                                 | #Y      |\n   * | 41        | Background color: Red.                                   | #Y      |\n   * | 42        | Background color: Green.                                 | #Y      |\n   * | 43        | Background color: Yellow.                                | #Y      |\n   * | 44        | Background color: Blue.                                  | #Y      |\n   * | 45        | Background color: Magenta.                               | #Y      |\n   * | 46        | Background color: Cyan.                                  | #Y      |\n   * | 47        | Background color: White.                                 | #Y      |\n   * | 48        | Background color: Extended color.                        | #P[Support for RGB and indexed colors, see below.] |\n   * | 49        | Background color: Default (original).                    | #Y      |\n   * | 90 - 97   | Bright foreground color (analogous to 30 - 37).          | #Y      |\n   * | 100 - 107 | Bright background color (analogous to 40 - 47).          | #Y      |\n   *\n   * Underline supports subparams to denote the style in the form `4 : x`:\n   *\n   * | x      | Meaning                                                       | Support |\n   * | ------ | ------------------------------------------------------------- | ------- |\n   * | 0      | No underline. Same as `SGR 24 m`.                             | #Y      |\n   * | 1      | Single underline. Same as `SGR 4 m`.                          | #Y      |\n   * | 2      | Double underline.                                             | #P[Currently outputs a single underline.] |\n   * | 3      | Curly underline.                                              | #P[Currently outputs a single underline.] |\n   * | 4      | Dotted underline.                                             | #P[Currently outputs a single underline.] |\n   * | 5      | Dashed underline.                                             | #P[Currently outputs a single underline.] |\n   * | other  | Single underline. Same as `SGR 4 m`.                          | #Y      |\n   *\n   * Extended colors are supported for foreground (Ps=38) and background (Ps=48) as follows:\n   *\n   * | Ps + 1 | Meaning                                                       | Support |\n   * | ------ | ------------------------------------------------------------- | ------- |\n   * | 0      | Implementation defined.                                       | #N      |\n   * | 1      | Transparent.                                                  | #N      |\n   * | 2      | RGB color as `Ps ; 2 ; R ; G ; B` or `Ps : 2 : : R : G : B`.  | #Y      |\n   * | 3      | CMY color.                                                    | #N      |\n   * | 4      | CMYK color.                                                   | #N      |\n   * | 5      | Indexed (256 colors) as `Ps ; 5 ; INDEX` or `Ps : 5 : INDEX`. | #Y      |\n   *\n   *\n   * FIXME: blinking is implemented in attrs, but not working in renderers?\n   * FIXME: remove dead branch for p=100\n   */\n  public charAttributes(params: IParams): boolean {\n    // Optimize a single SGR0.\n    if (params.length === 1 && params.params[0] === 0) {\n      this._curAttrData.fg = DEFAULT_ATTR_DATA.fg;\n      this._curAttrData.bg = DEFAULT_ATTR_DATA.bg;\n      return true;\n    }\n\n    const l = params.length;\n    let p;\n    const attr = this._curAttrData;\n\n    for (let i = 0; i < l; i++) {\n      p = params.params[i];\n      if (p >= 30 && p <= 37) {\n        // fg color 8\n        attr.fg &= ~(Attributes.CM_MASK | Attributes.PCOLOR_MASK);\n        attr.fg |= Attributes.CM_P16 | (p - 30);\n      } else if (p >= 40 && p <= 47) {\n        // bg color 8\n        attr.bg &= ~(Attributes.CM_MASK | Attributes.PCOLOR_MASK);\n        attr.bg |= Attributes.CM_P16 | (p - 40);\n      } else if (p >= 90 && p <= 97) {\n        // fg color 16\n        attr.fg &= ~(Attributes.CM_MASK | Attributes.PCOLOR_MASK);\n        attr.fg |= Attributes.CM_P16 | (p - 90) | 8;\n      } else if (p >= 100 && p <= 107) {\n        // bg color 16\n        attr.bg &= ~(Attributes.CM_MASK | Attributes.PCOLOR_MASK);\n        attr.bg |= Attributes.CM_P16 | (p - 100) | 8;\n      } else if (p === 0) {\n        // default\n        attr.fg = DEFAULT_ATTR_DATA.fg;\n        attr.bg = DEFAULT_ATTR_DATA.bg;\n      } else if (p === 1) {\n        // bold text\n        attr.fg |= FgFlags.BOLD;\n      } else if (p === 3) {\n        // italic text\n        attr.bg |= BgFlags.ITALIC;\n      } else if (p === 4) {\n        // underlined text\n        attr.fg |= FgFlags.UNDERLINE;\n        this._processUnderline(params.hasSubParams(i) ? params.getSubParams(i)![0] : UnderlineStyle.SINGLE, attr);\n      } else if (p === 5) {\n        // blink\n        attr.fg |= FgFlags.BLINK;\n      } else if (p === 7) {\n        // inverse and positive\n        // test with: echo -e '\\e[31m\\e[42mhello\\e[7mworld\\e[27mhi\\e[m'\n        attr.fg |= FgFlags.INVERSE;\n      } else if (p === 8) {\n        // invisible\n        attr.fg |= FgFlags.INVISIBLE;\n      } else if (p === 9) {\n        // strikethrough\n        attr.fg |= FgFlags.STRIKETHROUGH;\n      } else if (p === 2) {\n        // dimmed text\n        attr.bg |= BgFlags.DIM;\n      } else if (p === 21) {\n        // double underline\n        this._processUnderline(UnderlineStyle.DOUBLE, attr);\n      } else if (p === 22) {\n        // not bold nor faint\n        attr.fg &= ~FgFlags.BOLD;\n        attr.bg &= ~BgFlags.DIM;\n      } else if (p === 23) {\n        // not italic\n        attr.bg &= ~BgFlags.ITALIC;\n      } else if (p === 24) {\n        // not underlined\n        attr.fg &= ~FgFlags.UNDERLINE;\n      } else if (p === 25) {\n        // not blink\n        attr.fg &= ~FgFlags.BLINK;\n      } else if (p === 27) {\n        // not inverse\n        attr.fg &= ~FgFlags.INVERSE;\n      } else if (p === 28) {\n        // not invisible\n        attr.fg &= ~FgFlags.INVISIBLE;\n      } else if (p === 29) {\n        // not strikethrough\n        attr.fg &= ~FgFlags.STRIKETHROUGH;\n      } else if (p === 39) {\n        // reset fg\n        attr.fg &= ~(Attributes.CM_MASK | Attributes.RGB_MASK);\n        attr.fg |= DEFAULT_ATTR_DATA.fg & (Attributes.PCOLOR_MASK | Attributes.RGB_MASK);\n      } else if (p === 49) {\n        // reset bg\n        attr.bg &= ~(Attributes.CM_MASK | Attributes.RGB_MASK);\n        attr.bg |= DEFAULT_ATTR_DATA.bg & (Attributes.PCOLOR_MASK | Attributes.RGB_MASK);\n      } else if (p === 38 || p === 48 || p === 58) {\n        // fg color 256 and RGB\n        i += this._extractColor(params, i, attr);\n      } else if (p === 59) {\n        attr.extended = attr.extended.clone();\n        attr.extended.underlineColor = -1;\n        attr.updateExtended();\n      } else if (p === 100) { // FIXME: dead branch, p=100 already handled above!\n        // reset fg/bg\n        attr.fg &= ~(Attributes.CM_MASK | Attributes.RGB_MASK);\n        attr.fg |= DEFAULT_ATTR_DATA.fg & (Attributes.PCOLOR_MASK | Attributes.RGB_MASK);\n        attr.bg &= ~(Attributes.CM_MASK | Attributes.RGB_MASK);\n        attr.bg |= DEFAULT_ATTR_DATA.bg & (Attributes.PCOLOR_MASK | Attributes.RGB_MASK);\n      } else {\n        this._logService.debug('Unknown SGR attribute: %d.', p);\n      }\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps n  Device Status Report (DSR).\n   *     Ps = 5  -> Status Report.  Result (``OK'') is\n   *   CSI 0 n\n   *     Ps = 6  -> Report Cursor Position (CPR) [row;column].\n   *   Result is\n   *   CSI r ; c R\n   * CSI ? Ps n\n   *   Device Status Report (DSR, DEC-specific).\n   *     Ps = 6  -> Report Cursor Position (CPR) [row;column] as CSI\n   *     ? r ; c R (assumes page is zero).\n   *     Ps = 1 5  -> Report Printer status as CSI ? 1 0  n  (ready).\n   *     or CSI ? 1 1  n  (not ready).\n   *     Ps = 2 5  -> Report UDK status as CSI ? 2 0  n  (unlocked)\n   *     or CSI ? 2 1  n  (locked).\n   *     Ps = 2 6  -> Report Keyboard status as\n   *   CSI ? 2 7  ;  1  ;  0  ;  0  n  (North American).\n   *   The last two parameters apply to VT400 & up, and denote key-\n   *   board ready and LK01 respectively.\n   *     Ps = 5 3  -> Report Locator status as\n   *   CSI ? 5 3  n  Locator available, if compiled-in, or\n   *   CSI ? 5 0  n  No Locator, if not.\n   *\n   * @vt: #Y CSI DSR   \"Device Status Report\"  \"CSI Ps n\"  \"Request cursor position (CPR) with `Ps` = 6.\"\n   */\n  public deviceStatus(params: IParams): boolean {\n    switch (params.params[0]) {\n      case 5:\n        // status report\n        this._coreService.triggerDataEvent(`${C0.ESC}[0n`);\n        break;\n      case 6:\n        // cursor position\n        const y = this._activeBuffer.y + 1;\n        const x = this._activeBuffer.x + 1;\n        this._coreService.triggerDataEvent(`${C0.ESC}[${y};${x}R`);\n        break;\n    }\n    return true;\n  }\n\n  // @vt: #P[Only CPR is supported.]  CSI DECDSR  \"DEC Device Status Report\"  \"CSI ? Ps n\"  \"Only CPR is supported (same as DSR).\"\n  public deviceStatusPrivate(params: IParams): boolean {\n    // modern xterm doesnt seem to\n    // respond to any of these except ?6, 6, and 5\n    switch (params.params[0]) {\n      case 6:\n        // cursor position\n        const y = this._activeBuffer.y + 1;\n        const x = this._activeBuffer.x + 1;\n        this._coreService.triggerDataEvent(`${C0.ESC}[?${y};${x}R`);\n        break;\n      case 15:\n        // no printer\n        // this.handler(C0.ESC + '[?11n');\n        break;\n      case 25:\n        // dont support user defined keys\n        // this.handler(C0.ESC + '[?21n');\n        break;\n      case 26:\n        // north american keyboard\n        // this.handler(C0.ESC + '[?27;1;0;0n');\n        break;\n      case 53:\n        // no dec locator/mouse\n        // this.handler(C0.ESC + '[?50n');\n        break;\n    }\n    return true;\n  }\n\n  /**\n   * CSI ! p   Soft terminal reset (DECSTR).\n   * http://vt100.net/docs/vt220-rm/table4-10.html\n   *\n   * @vt: #Y CSI DECSTR  \"Soft Terminal Reset\"   \"CSI ! p\"   \"Reset several terminal attributes to initial state.\"\n   * There are two terminal reset sequences - RIS and DECSTR. While RIS performs almost a full terminal bootstrap,\n   * DECSTR only resets certain attributes. For most needs DECSTR should be sufficient.\n   *\n   * The following terminal attributes are reset to default values:\n   * - IRM is reset (dafault = false)\n   * - scroll margins are reset (default = viewport size)\n   * - erase attributes are reset to default\n   * - charsets are reset\n   * - DECSC data is reset to initial values\n   * - DECOM is reset to absolute mode\n   *\n   *\n   * FIXME: there are several more attributes missing (see VT520 manual)\n   */\n  public softReset(params: IParams): boolean {\n    this._coreService.isCursorHidden = false;\n    this._onRequestSyncScrollBar.fire();\n    this._activeBuffer.scrollTop = 0;\n    this._activeBuffer.scrollBottom = this._bufferService.rows - 1;\n    this._curAttrData = DEFAULT_ATTR_DATA.clone();\n    this._coreService.reset();\n    this._charsetService.reset();\n\n    // reset DECSC data\n    this._activeBuffer.savedX = 0;\n    this._activeBuffer.savedY = this._activeBuffer.ybase;\n    this._activeBuffer.savedCurAttrData.fg = this._curAttrData.fg;\n    this._activeBuffer.savedCurAttrData.bg = this._curAttrData.bg;\n    this._activeBuffer.savedCharset = this._charsetService.charset;\n\n    // reset DECOM\n    this._coreService.decPrivateModes.origin = false;\n    return true;\n  }\n\n  /**\n   * CSI Ps SP q  Set cursor style (DECSCUSR, VT520).\n   *   Ps = 0  -> blinking block.\n   *   Ps = 1  -> blinking block (default).\n   *   Ps = 2  -> steady block.\n   *   Ps = 3  -> blinking underline.\n   *   Ps = 4  -> steady underline.\n   *   Ps = 5  -> blinking bar (xterm).\n   *   Ps = 6  -> steady bar (xterm).\n   *\n   * @vt: #Y CSI DECSCUSR  \"Set Cursor Style\"  \"CSI Ps SP q\"   \"Set cursor style.\"\n   * Supported cursor styles:\n   *  - empty, 0 or 1: steady block\n   *  - 2: blink block\n   *  - 3: steady underline\n   *  - 4: blink underline\n   *  - 5: steady bar\n   *  - 6: blink bar\n   */\n  public setCursorStyle(params: IParams): boolean {\n    const param = params.params[0] || 1;\n    switch (param) {\n      case 1:\n      case 2:\n        this._optionsService.options.cursorStyle = 'block';\n        break;\n      case 3:\n      case 4:\n        this._optionsService.options.cursorStyle = 'underline';\n        break;\n      case 5:\n      case 6:\n        this._optionsService.options.cursorStyle = 'bar';\n        break;\n    }\n    const isBlinking = param % 2 === 1;\n    this._optionsService.options.cursorBlink = isBlinking;\n    return true;\n  }\n\n  /**\n   * CSI Ps ; Ps r\n   *   Set Scrolling Region [top;bottom] (default = full size of win-\n   *   dow) (DECSTBM).\n   *\n   * @vt: #Y CSI DECSTBM \"Set Top and Bottom Margin\" \"CSI Ps ; Ps r\" \"Set top and bottom margins of the viewport [top;bottom] (default = viewport size).\"\n   */\n  public setScrollRegion(params: IParams): boolean {\n    const top = params.params[0] || 1;\n    let bottom: number;\n\n    if (params.length < 2 || (bottom = params.params[1]) > this._bufferService.rows || bottom === 0) {\n      bottom = this._bufferService.rows;\n    }\n\n    if (bottom > top) {\n      this._activeBuffer.scrollTop = top - 1;\n      this._activeBuffer.scrollBottom = bottom - 1;\n      this._setCursor(0, 0);\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps ; Ps ; Ps t - Various window manipulations and reports (xterm)\n   *\n   * Note: Only those listed below are supported. All others are left to integrators and\n   * need special treatment based on the embedding environment.\n   *\n   *    Ps = 1 4                                                          supported\n   *      Report xterm text area size in pixels.\n   *      Result is CSI 4 ; height ; width t\n   *    Ps = 14 ; 2                                                       not implemented\n   *    Ps = 16                                                           supported\n   *      Report xterm character cell size in pixels.\n   *      Result is CSI 6 ; height ; width t\n   *    Ps = 18                                                           supported\n   *      Report the size of the text area in characters.\n   *      Result is CSI 8 ; height ; width t\n   *    Ps = 20                                                           supported\n   *      Report xterm window's icon label.\n   *      Result is OSC L label ST\n   *    Ps = 21                                                           supported\n   *      Report xterm window's title.\n   *      Result is OSC l label ST\n   *    Ps = 22 ; 0  -> Save xterm icon and window title on stack.        supported\n   *    Ps = 22 ; 1  -> Save xterm icon title on stack.                   supported\n   *    Ps = 22 ; 2  -> Save xterm window title on stack.                 supported\n   *    Ps = 23 ; 0  -> Restore xterm icon and window title from stack.   supported\n   *    Ps = 23 ; 1  -> Restore xterm icon title from stack.              supported\n   *    Ps = 23 ; 2  -> Restore xterm window title from stack.            supported\n   *    Ps >= 24                                                          not implemented\n   */\n  public windowOptions(params: IParams): boolean {\n    if (!paramToWindowOption(params.params[0], this._optionsService.rawOptions.windowOptions)) {\n      return true;\n    }\n    const second = (params.length > 1) ? params.params[1] : 0;\n    switch (params.params[0]) {\n      case 14:  // GetWinSizePixels, returns CSI 4 ; height ; width t\n        if (second !== 2) {\n          this._onRequestWindowsOptionsReport.fire(WindowsOptionsReportType.GET_WIN_SIZE_PIXELS);\n        }\n        break;\n      case 16:  // GetCellSizePixels, returns CSI 6 ; height ; width t\n        this._onRequestWindowsOptionsReport.fire(WindowsOptionsReportType.GET_CELL_SIZE_PIXELS);\n        break;\n      case 18:  // GetWinSizeChars, returns CSI 8 ; height ; width t\n        if (this._bufferService) {\n          this._coreService.triggerDataEvent(`${C0.ESC}[8;${this._bufferService.rows};${this._bufferService.cols}t`);\n        }\n        break;\n      case 22:  // PushTitle\n        if (second === 0 || second === 2) {\n          this._windowTitleStack.push(this._windowTitle);\n          if (this._windowTitleStack.length > STACK_LIMIT) {\n            this._windowTitleStack.shift();\n          }\n        }\n        if (second === 0 || second === 1) {\n          this._iconNameStack.push(this._iconName);\n          if (this._iconNameStack.length > STACK_LIMIT) {\n            this._iconNameStack.shift();\n          }\n        }\n        break;\n      case 23:  // PopTitle\n        if (second === 0 || second === 2) {\n          if (this._windowTitleStack.length) {\n            this.setTitle(this._windowTitleStack.pop()!);\n          }\n        }\n        if (second === 0 || second === 1) {\n          if (this._iconNameStack.length) {\n            this.setIconName(this._iconNameStack.pop()!);\n          }\n        }\n        break;\n    }\n    return true;\n  }\n\n\n  /**\n   * CSI s\n   * ESC 7\n   *   Save cursor (ANSI.SYS).\n   *\n   * @vt: #P[TODO...]  CSI SCOSC   \"Save Cursor\"   \"CSI s\"   \"Save cursor position, charmap and text attributes.\"\n   * @vt: #Y ESC  SC   \"Save Cursor\"   \"ESC 7\"   \"Save cursor position, charmap and text attributes.\"\n   */\n  public saveCursor(params?: IParams): boolean {\n    this._activeBuffer.savedX = this._activeBuffer.x;\n    this._activeBuffer.savedY = this._activeBuffer.ybase + this._activeBuffer.y;\n    this._activeBuffer.savedCurAttrData.fg = this._curAttrData.fg;\n    this._activeBuffer.savedCurAttrData.bg = this._curAttrData.bg;\n    this._activeBuffer.savedCharset = this._charsetService.charset;\n    return true;\n  }\n\n\n  /**\n   * CSI u\n   * ESC 8\n   *   Restore cursor (ANSI.SYS).\n   *\n   * @vt: #P[TODO...]  CSI SCORC \"Restore Cursor\"  \"CSI u\"   \"Restore cursor position, charmap and text attributes.\"\n   * @vt: #Y ESC  RC \"Restore Cursor\"  \"ESC 8\"   \"Restore cursor position, charmap and text attributes.\"\n   */\n  public restoreCursor(params?: IParams): boolean {\n    this._activeBuffer.x = this._activeBuffer.savedX || 0;\n    this._activeBuffer.y = Math.max(this._activeBuffer.savedY - this._activeBuffer.ybase, 0);\n    this._curAttrData.fg = this._activeBuffer.savedCurAttrData.fg;\n    this._curAttrData.bg = this._activeBuffer.savedCurAttrData.bg;\n    this._charsetService.charset = (this as any)._savedCharset;\n    if (this._activeBuffer.savedCharset) {\n      this._charsetService.charset = this._activeBuffer.savedCharset;\n    }\n    this._restrictCursor();\n    return true;\n  }\n\n\n  /**\n   * OSC 2; <data> ST (set window title)\n   *   Proxy to set window title.\n   *\n   * @vt: #P[Icon name is not exposed.]   OSC    0   \"Set Windows Title and Icon Name\"  \"OSC 0 ; Pt BEL\"  \"Set window title and icon name.\"\n   * Icon name is not supported. For Window Title see below.\n   *\n   * @vt: #Y     OSC    2   \"Set Windows Title\"  \"OSC 2 ; Pt BEL\"  \"Set window title.\"\n   * xterm.js does not manipulate the title directly, instead exposes changes via the event `Terminal.onTitleChange`.\n   */\n  public setTitle(data: string): boolean {\n    this._windowTitle = data;\n    this._onTitleChange.fire(data);\n    return true;\n  }\n\n  /**\n   * OSC 1; <data> ST\n   * Note: Icon name is not exposed.\n   */\n  public setIconName(data: string): boolean {\n    this._iconName = data;\n    return true;\n  }\n\n  /**\n   * OSC 4; <num> ; <text> ST (set ANSI color <num> to <text>)\n   *\n   * @vt: #Y    OSC    4    \"Set ANSI color\"   \"OSC 4 ; c ; spec BEL\" \"Change color number `c` to the color specified by `spec`.\"\n   * `c` is the color index between 0 and 255. The color format of `spec` is derived from `XParseColor` (see OSC 10 for supported formats).\n   * There may be multipe `c ; spec` pairs present in the same instruction.\n   * If `spec` contains `?` the terminal returns a sequence with the currently set color.\n   */\n  public setOrReportIndexedColor(data: string): boolean {\n    const event: IColorEvent = [];\n    const slots = data.split(';');\n    while (slots.length > 1) {\n      const idx = slots.shift() as string;\n      const spec = slots.shift() as string;\n      if (/^\\d+$/.exec(idx)) {\n        const index = parseInt(idx);\n        if (0 <= index && index < 256) {\n          if (spec === '?') {\n            event.push({ type: ColorRequestType.REPORT, index });\n          } else {\n            const color = parseColor(spec);\n            if (color) {\n              event.push({ type: ColorRequestType.SET, index, color });\n            }\n          }\n        }\n      }\n    }\n    if (event.length) {\n      this._onColor.fire(event);\n    }\n    return true;\n  }\n\n  // special colors - OSC 10 | 11 | 12\n  private _specialColors = [ColorIndex.FOREGROUND, ColorIndex.BACKGROUND, ColorIndex.CURSOR];\n\n  /**\n   * Apply colors requests for special colors in OSC 10 | 11 | 12.\n   * Since these commands are stacking from multiple parameters,\n   * we handle them in a loop with an entry offset to `_specialColors`.\n   */\n  private _setOrReportSpecialColor(data: string, offset: number): boolean {\n    const slots = data.split(';');\n    for (let i = 0; i < slots.length; ++i, ++offset) {\n      if (offset >= this._specialColors.length) break;\n      if (slots[i] === '?') {\n        this._onColor.fire([{ type: ColorRequestType.REPORT, index: this._specialColors[offset] }]);\n      } else {\n        const color = parseColor(slots[i]);\n        if (color) {\n          this._onColor.fire([{ type: ColorRequestType.SET, index: this._specialColors[offset], color }]);\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * OSC 10 ; <xcolor name>|<?> ST - set or query default foreground color\n   *\n   * @vt: #Y  OSC   10    \"Set or query default foreground color\"   \"OSC 10 ; Pt BEL\"  \"Set or query default foreground color.\"\n   * To set the color, the following color specification formats are supported:\n   * - `rgb:<red>/<green>/<blue>` for  `<red>, <green>, <blue>` in `h | hh | hhh | hhhh`, where\n   *   `h` is a single hexadecimal digit (case insignificant). The different widths scale\n   *   from 4 bit (`h`) to 16 bit (`hhhh`) and get converted to 8 bit (`hh`).\n   * - `#RGB` - 4 bits per channel, expanded to `#R0G0B0`\n   * - `#RRGGBB` - 8 bits per channel\n   * - `#RRRGGGBBB` - 12 bits per channel, truncated to `#RRGGBB`\n   * - `#RRRRGGGGBBBB` - 16 bits per channel, truncated to `#RRGGBB`\n   *\n   * **Note:** X11 named colors are currently unsupported.\n   *\n   * If `Pt` contains `?` instead of a color specification, the terminal\n   * returns a sequence with the current default foreground color\n   * (use that sequence to restore the color after changes).\n   *\n   * **Note:** Other than xterm, xterm.js does not support OSC 12 - 19.\n   * Therefore stacking multiple `Pt` separated by `;` only works for the first two entries.\n   */\n  public setOrReportFgColor(data: string): boolean {\n    return this._setOrReportSpecialColor(data, 0);\n  }\n\n  /**\n   * OSC 11 ; <xcolor name>|<?> ST - set or query default background color\n   *\n   * @vt: #Y  OSC   11    \"Set or query default background color\"   \"OSC 11 ; Pt BEL\"  \"Same as OSC 10, but for default background.\"\n   */\n  public setOrReportBgColor(data: string): boolean {\n    return this._setOrReportSpecialColor(data, 1);\n  }\n\n  /**\n   * OSC 12 ; <xcolor name>|<?> ST - set or query default cursor color\n   *\n   * @vt: #Y  OSC   12    \"Set or query default cursor color\"   \"OSC 12 ; Pt BEL\"  \"Same as OSC 10, but for default cursor color.\"\n   */\n  public setOrReportCursorColor(data: string): boolean {\n    return this._setOrReportSpecialColor(data, 2);\n  }\n\n  /**\n   * OSC 104 ; <num> ST - restore ANSI color <num>\n   *\n   * @vt: #Y  OSC   104    \"Reset ANSI color\"   \"OSC 104 ; c BEL\" \"Reset color number `c` to themed color.\"\n   * `c` is the color index between 0 and 255. This function restores the default color for `c` as\n   * specified by the loaded theme. Any number of `c` parameters may be given.\n   * If no parameters are given, the entire indexed color table will be reset.\n   */\n  public restoreIndexedColor(data: string): boolean {\n    if (!data) {\n      this._onColor.fire([{ type: ColorRequestType.RESTORE }]);\n      return true;\n    }\n    const event: IColorEvent = [];\n    const slots = data.split(';');\n    for (let i = 0; i < slots.length; ++i) {\n      if (/^\\d+$/.exec(slots[i])) {\n        const index = parseInt(slots[i]);\n        if (0 <= index && index < 256) {\n          event.push({ type: ColorRequestType.RESTORE, index });\n        }\n      }\n    }\n    if (event.length) {\n      this._onColor.fire(event);\n    }\n    return true;\n  }\n\n  /**\n   * OSC 110 ST - restore default foreground color\n   *\n   * @vt: #Y  OSC   110    \"Restore default foreground color\"   \"OSC 110 BEL\"  \"Restore default foreground to themed color.\"\n   */\n  public restoreFgColor(data: string): boolean {\n    this._onColor.fire([{ type: ColorRequestType.RESTORE, index: ColorIndex.FOREGROUND }]);\n    return true;\n  }\n\n  /**\n   * OSC 111 ST - restore default background color\n   *\n   * @vt: #Y  OSC   111    \"Restore default background color\"   \"OSC 111 BEL\"  \"Restore default background to themed color.\"\n   */\n  public restoreBgColor(data: string): boolean {\n    this._onColor.fire([{ type: ColorRequestType.RESTORE, index: ColorIndex.BACKGROUND }]);\n    return true;\n  }\n\n  /**\n   * OSC 112 ST - restore default cursor color\n   *\n   * @vt: #Y  OSC   112    \"Restore default cursor color\"   \"OSC 112 BEL\"  \"Restore default cursor to themed color.\"\n   */\n  public restoreCursorColor(data: string): boolean {\n    this._onColor.fire([{ type: ColorRequestType.RESTORE, index: ColorIndex.CURSOR }]);\n    return true;\n  }\n\n  /**\n   * ESC E\n   * C1.NEL\n   *   DEC mnemonic: NEL (https://vt100.net/docs/vt510-rm/NEL)\n   *   Moves cursor to first position on next line.\n   *\n   * @vt: #Y   C1    NEL   \"Next Line\"   \"\\x85\"    \"Move the cursor to the beginning of the next row.\"\n   * @vt: #Y   ESC   NEL   \"Next Line\"   \"ESC E\"   \"Move the cursor to the beginning of the next row.\"\n   */\n  public nextLine(): boolean {\n    this._activeBuffer.x = 0;\n    this.index();\n    return true;\n  }\n\n  /**\n   * ESC =\n   *   DEC mnemonic: DECKPAM (https://vt100.net/docs/vt510-rm/DECKPAM.html)\n   *   Enables the numeric keypad to send application sequences to the host.\n   */\n  public keypadApplicationMode(): boolean {\n    this._logService.debug('Serial port requested application keypad.');\n    this._coreService.decPrivateModes.applicationKeypad = true;\n    this._onRequestSyncScrollBar.fire();\n    return true;\n  }\n\n  /**\n   * ESC >\n   *   DEC mnemonic: DECKPNM (https://vt100.net/docs/vt510-rm/DECKPNM.html)\n   *   Enables the keypad to send numeric characters to the host.\n   */\n  public keypadNumericMode(): boolean {\n    this._logService.debug('Switching back to normal keypad.');\n    this._coreService.decPrivateModes.applicationKeypad = false;\n    this._onRequestSyncScrollBar.fire();\n    return true;\n  }\n\n  /**\n   * ESC % @\n   * ESC % G\n   *   Select default character set. UTF-8 is not supported (string are unicode anyways)\n   *   therefore ESC % G does the same.\n   */\n  public selectDefaultCharset(): boolean {\n    this._charsetService.setgLevel(0);\n    this._charsetService.setgCharset(0, DEFAULT_CHARSET); // US (default)\n    return true;\n  }\n\n  /**\n   * ESC ( C\n   *   Designate G0 Character Set, VT100, ISO 2022.\n   * ESC ) C\n   *   Designate G1 Character Set (ISO 2022, VT100).\n   * ESC * C\n   *   Designate G2 Character Set (ISO 2022, VT220).\n   * ESC + C\n   *   Designate G3 Character Set (ISO 2022, VT220).\n   * ESC - C\n   *   Designate G1 Character Set (VT300).\n   * ESC . C\n   *   Designate G2 Character Set (VT300).\n   * ESC / C\n   *   Designate G3 Character Set (VT300). C = A  -> ISO Latin-1 Supplemental. - Supported?\n   */\n  public selectCharset(collectAndFlag: string): boolean {\n    if (collectAndFlag.length !== 2) {\n      this.selectDefaultCharset();\n      return true;\n    }\n    if (collectAndFlag[0] === '/') {\n      return true;  // TODO: Is this supported?\n    }\n    this._charsetService.setgCharset(GLEVEL[collectAndFlag[0]], CHARSETS[collectAndFlag[1]] || DEFAULT_CHARSET);\n    return true;\n  }\n\n  /**\n   * ESC D\n   * C1.IND\n   *   DEC mnemonic: IND (https://vt100.net/docs/vt510-rm/IND.html)\n   *   Moves the cursor down one line in the same column.\n   *\n   * @vt: #Y   C1    IND   \"Index\"   \"\\x84\"    \"Move the cursor one line down scrolling if needed.\"\n   * @vt: #Y   ESC   IND   \"Index\"   \"ESC D\"   \"Move the cursor one line down scrolling if needed.\"\n   */\n  public index(): boolean {\n    this._restrictCursor();\n    this._activeBuffer.y++;\n    if (this._activeBuffer.y === this._activeBuffer.scrollBottom + 1) {\n      this._activeBuffer.y--;\n      this._bufferService.scroll(this._eraseAttrData());\n    } else if (this._activeBuffer.y >= this._bufferService.rows) {\n      this._activeBuffer.y = this._bufferService.rows - 1;\n    }\n    this._restrictCursor();\n    return true;\n  }\n\n  /**\n   * ESC H\n   * C1.HTS\n   *   DEC mnemonic: HTS (https://vt100.net/docs/vt510-rm/HTS.html)\n   *   Sets a horizontal tab stop at the column position indicated by\n   *   the value of the active column when the terminal receives an HTS.\n   *\n   * @vt: #Y   C1    HTS   \"Horizontal Tabulation Set\" \"\\x88\"    \"Places a tab stop at the current cursor position.\"\n   * @vt: #Y   ESC   HTS   \"Horizontal Tabulation Set\" \"ESC H\"   \"Places a tab stop at the current cursor position.\"\n   */\n  public tabSet(): boolean {\n    this._activeBuffer.tabs[this._activeBuffer.x] = true;\n    return true;\n  }\n\n  /**\n   * ESC M\n   * C1.RI\n   *   DEC mnemonic: HTS\n   *   Moves the cursor up one line in the same column. If the cursor is at the top margin,\n   *   the page scrolls down.\n   *\n   * @vt: #Y ESC  IR \"Reverse Index\" \"ESC M\"  \"Move the cursor one line up scrolling if needed.\"\n   */\n  public reverseIndex(): boolean {\n    this._restrictCursor();\n    if (this._activeBuffer.y === this._activeBuffer.scrollTop) {\n      // possibly move the code below to term.reverseScroll();\n      // test: echo -ne '\\e[1;1H\\e[44m\\eM\\e[0m'\n      // blankLine(true) is xterm/linux behavior\n      const scrollRegionHeight = this._activeBuffer.scrollBottom - this._activeBuffer.scrollTop;\n      this._activeBuffer.lines.shiftElements(this._activeBuffer.ybase + this._activeBuffer.y, scrollRegionHeight, 1);\n      this._activeBuffer.lines.set(this._activeBuffer.ybase + this._activeBuffer.y, this._activeBuffer.getBlankLine(this._eraseAttrData()));\n      this._dirtyRowService.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom);\n    } else {\n      this._activeBuffer.y--;\n      this._restrictCursor(); // quickfix to not run out of bounds\n    }\n    return true;\n  }\n\n  /**\n   * ESC c\n   *   DEC mnemonic: RIS (https://vt100.net/docs/vt510-rm/RIS.html)\n   *   Reset to initial state.\n   */\n  public fullReset(): boolean {\n    this._parser.reset();\n    this._onRequestReset.fire();\n    return true;\n  }\n\n  public reset(): void {\n    this._curAttrData = DEFAULT_ATTR_DATA.clone();\n    this._eraseAttrDataInternal = DEFAULT_ATTR_DATA.clone();\n  }\n\n  /**\n   * back_color_erase feature for xterm.\n   */\n  private _eraseAttrData(): IAttributeData {\n    this._eraseAttrDataInternal.bg &= ~(Attributes.CM_MASK | 0xFFFFFF);\n    this._eraseAttrDataInternal.bg |= this._curAttrData.bg & ~0xFC000000;\n    return this._eraseAttrDataInternal;\n  }\n\n  /**\n   * ESC n\n   * ESC o\n   * ESC |\n   * ESC }\n   * ESC ~\n   *   DEC mnemonic: LS (https://vt100.net/docs/vt510-rm/LS.html)\n   *   When you use a locking shift, the character set remains in GL or GR until\n   *   you use another locking shift. (partly supported)\n   */\n  public setgLevel(level: number): boolean {\n    this._charsetService.setgLevel(level);\n    return true;\n  }\n\n  /**\n   * ESC # 8\n   *   DEC mnemonic: DECALN (https://vt100.net/docs/vt510-rm/DECALN.html)\n   *   This control function fills the complete screen area with\n   *   a test pattern (E) used for adjusting screen alignment.\n   *\n   * @vt: #Y   ESC   DECALN   \"Screen Alignment Pattern\"  \"ESC # 8\"  \"Fill viewport with a test pattern (E).\"\n   */\n  public screenAlignmentPattern(): boolean {\n    // prepare cell data\n    const cell = new CellData();\n    cell.content = 1 << Content.WIDTH_SHIFT | 'E'.charCodeAt(0);\n    cell.fg = this._curAttrData.fg;\n    cell.bg = this._curAttrData.bg;\n\n\n    this._setCursor(0, 0);\n    for (let yOffset = 0; yOffset < this._bufferService.rows; ++yOffset) {\n      const row = this._activeBuffer.ybase + this._activeBuffer.y + yOffset;\n      const line = this._activeBuffer.lines.get(row);\n      if (line) {\n        line.fill(cell);\n        line.isWrapped = false;\n      }\n    }\n    this._dirtyRowService.markAllDirty();\n    this._setCursor(0, 0);\n    return true;\n  }\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IDisposable } from 'common/Types';\n\n/**\n * A base class that can be extended to provide convenience methods for managing the lifecycle of an\n * object and its components.\n */\nexport abstract class Disposable implements IDisposable {\n  protected _disposables: IDisposable[] = [];\n  protected _isDisposed: boolean = false;\n\n  constructor() {\n  }\n\n  /**\n   * Disposes the object, triggering the `dispose` method on all registered IDisposables.\n   */\n  public dispose(): void {\n    this._isDisposed = true;\n    for (const d of this._disposables) {\n      d.dispose();\n    }\n    this._disposables.length = 0;\n  }\n\n  /**\n   * Registers a disposable object.\n   * @param d The disposable to register.\n   * @returns The disposable.\n   */\n  public register<T extends IDisposable>(d: T): T {\n    this._disposables.push(d);\n    return d;\n  }\n\n  /**\n   * Unregisters a disposable object if it has been registered, if not do\n   * nothing.\n   * @param d The disposable to unregister.\n   */\n  public unregister<T extends IDisposable>(d: T): void {\n    const index = this._disposables.indexOf(d);\n    if (index !== -1) {\n      this._disposables.splice(index, 1);\n    }\n  }\n}\n\n/**\n * Dispose of all disposables in an array and set its length to 0.\n */\nexport function disposeArray(disposables: IDisposable[]): void {\n  for (const d of disposables) {\n    d.dispose();\n  }\n  disposables.length = 0;\n}\n\n/**\n * Creates a disposable that will dispose of an array of disposables when disposed.\n */\nexport function getDisposeArrayDisposable(array: IDisposable[]): IDisposable {\n  return { dispose: () => disposeArray(array) };\n}\n", "/**\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\ninterface INavigator {\n  userAgent: string;\n  language: string;\n  platform: string;\n}\n\n// We're declaring a navigator global here as we expect it in all runtimes (node and browser), but\n// we want this module to live in common.\ndeclare const navigator: INavigator;\n\nconst isNode = (typeof navigator === 'undefined') ? true : false;\nconst userAgent = (isNode) ? 'node' : navigator.userAgent;\nconst platform = (isNode) ? 'node' : navigator.platform;\n\nexport const isFirefox = userAgent.includes('Firefox');\nexport const isLegacyEdge = userAgent.includes('Edge');\nexport const isSafari = /^((?!chrome|android).)*safari/i.test(userAgent);\n\n// Find the users platform. We use this to interpret the meta key\n// and ISO third level shifts.\n// http://stackoverflow.com/q/19877924/577598\nexport const isMac = ['Macintosh', 'MacIntel', 'MacPPC', 'Mac68K'].includes(platform);\nexport const isIpad = platform === 'iPad';\nexport const isIphone = platform === 'iPhone';\nexport const isWindows = ['Windows', 'Win16', 'Win32', 'WinCE'].includes(platform);\nexport const isLinux = platform.indexOf('Linux') >= 0;\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nexport type TypedArray = Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Int8Array | Int16Array | Int32Array | Float32Array | Float64Array;\n\n\n/**\n * polyfill for TypedArray.fill\n * This is needed to support .fill in all safari versions and IE 11.\n */\nexport function fill<T extends TypedArray>(array: T, value: number, start?: number, end?: number): T {\n  // all modern engines that support .fill\n  if (array.fill) {\n    return array.fill(value, start, end) as T;\n  }\n  return fillFallback(array, value, start, end);\n}\n\nexport function fillFallback<T extends TypedArray>(array: T, value: number, start: number = 0, end: number = array.length): T {\n  // safari and IE 11\n  // since IE 11 does not support Array.prototype.fill either\n  // we cannot use the suggested polyfill from MDN\n  // instead we simply fall back to looping\n  if (start >= array.length) {\n    return array;\n  }\n  start = (array.length + start) % array.length;\n  if (end >= array.length) {\n    end = array.length;\n  } else {\n    end = (array.length + end) % array.length;\n  }\n  for (let i = start; i < end; ++i) {\n    array[i] = value;\n  }\n  return array;\n}\n\n/**\n * Concat two typed arrays `a` and `b`.\n * Returns a new typed array.\n */\nexport function concat<T extends TypedArray>(a: T, b: T): T {\n  const result = new (a.constructor as any)(a.length + b.length);\n  result.set(a);\n  result.set(b, a.length);\n  return result;\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { CHAR_DATA_CODE_INDEX, NULL_CELL_CODE, WHITESPACE_CELL_CODE } from 'common/buffer/Constants';\nimport { IBufferService } from 'common/services/Services';\n\nexport function updateWindowsModeWrappedState(bufferService: IBufferService): void {\n  // Winpty does not support wraparound mode which means that lines will never\n  // be marked as wrapped. This causes issues for things like copying a line\n  // retaining the wrapped new line characters or if consumers are listening\n  // in on the data stream.\n  //\n  // The workaround for this is to listen to every incoming line feed and mark\n  // the line as wrapped if the last character in the previous line is not a\n  // space. This is certainly not without its problems, but generally on\n  // Windows when text reaches the end of the terminal it's likely going to be\n  // wrapped.\n  const line = bufferService.buffer.lines.get(bufferService.buffer.ybase + bufferService.buffer.y - 1);\n  const lastChar = line?.get(bufferService.cols - 1);\n\n  const nextLine = bufferService.buffer.lines.get(bufferService.buffer.ybase + bufferService.buffer.y);\n  if (nextLine && lastChar) {\n    nextLine.isWrapped = (lastChar[CHAR_DATA_CODE_INDEX] !== NULL_CELL_CODE && lastChar[CHAR_DATA_CODE_INDEX] !== WHITESPACE_CELL_CODE);\n  }\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IAttributeData, IColorRGB, IExtendedAttrs } from 'common/Types';\nimport { Attributes, FgFlags, BgFlags, UnderlineStyle } from 'common/buffer/Constants';\n\nexport class AttributeData implements IAttributeData {\n  public static toColorRGB(value: number): IColorRGB {\n    return [\n      value >>> Attributes.RED_SHIFT & 255,\n      value >>> Attributes.GREEN_SHIFT & 255,\n      value & 255\n    ];\n  }\n\n  public static fromColorRGB(value: IColorRGB): number {\n    return (value[0] & 255) << Attributes.RED_SHIFT | (value[1] & 255) << Attributes.GREEN_SHIFT | value[2] & 255;\n  }\n\n  public clone(): IAttributeData {\n    const newObj = new AttributeData();\n    newObj.fg = this.fg;\n    newObj.bg = this.bg;\n    newObj.extended = this.extended.clone();\n    return newObj;\n  }\n\n  // data\n  public fg = 0;\n  public bg = 0;\n  public extended = new ExtendedAttrs();\n\n  // flags\n  public isInverse(): number       { return this.fg & FgFlags.INVERSE; }\n  public isBold(): number          { return this.fg & FgFlags.BOLD; }\n  public isUnderline(): number     { return this.fg & FgFlags.UNDERLINE; }\n  public isBlink(): number         { return this.fg & FgFlags.BLINK; }\n  public isInvisible(): number     { return this.fg & FgFlags.INVISIBLE; }\n  public isItalic(): number        { return this.bg & BgFlags.ITALIC; }\n  public isDim(): number           { return this.bg & BgFlags.DIM; }\n  public isStrikethrough(): number { return this.fg & FgFlags.STRIKETHROUGH; }\n\n  // color modes\n  public getFgColorMode(): number { return this.fg & Attributes.CM_MASK; }\n  public getBgColorMode(): number { return this.bg & Attributes.CM_MASK; }\n  public isFgRGB(): boolean       { return (this.fg & Attributes.CM_MASK) === Attributes.CM_RGB; }\n  public isBgRGB(): boolean       { return (this.bg & Attributes.CM_MASK) === Attributes.CM_RGB; }\n  public isFgPalette(): boolean   { return (this.fg & Attributes.CM_MASK) === Attributes.CM_P16 || (this.fg & Attributes.CM_MASK) === Attributes.CM_P256; }\n  public isBgPalette(): boolean   { return (this.bg & Attributes.CM_MASK) === Attributes.CM_P16 || (this.bg & Attributes.CM_MASK) === Attributes.CM_P256; }\n  public isFgDefault(): boolean   { return (this.fg & Attributes.CM_MASK) === 0; }\n  public isBgDefault(): boolean   { return (this.bg & Attributes.CM_MASK) === 0; }\n  public isAttributeDefault(): boolean { return this.fg === 0 && this.bg === 0; }\n\n  // colors\n  public getFgColor(): number {\n    switch (this.fg & Attributes.CM_MASK) {\n      case Attributes.CM_P16:\n      case Attributes.CM_P256:  return this.fg & Attributes.PCOLOR_MASK;\n      case Attributes.CM_RGB:   return this.fg & Attributes.RGB_MASK;\n      default:                  return -1;  // CM_DEFAULT defaults to -1\n    }\n  }\n  public getBgColor(): number {\n    switch (this.bg & Attributes.CM_MASK) {\n      case Attributes.CM_P16:\n      case Attributes.CM_P256:  return this.bg & Attributes.PCOLOR_MASK;\n      case Attributes.CM_RGB:   return this.bg & Attributes.RGB_MASK;\n      default:                  return -1;  // CM_DEFAULT defaults to -1\n    }\n  }\n\n  // extended attrs\n  public hasExtendedAttrs(): number {\n    return this.bg & BgFlags.HAS_EXTENDED;\n  }\n  public updateExtended(): void {\n    if (this.extended.isEmpty()) {\n      this.bg &= ~BgFlags.HAS_EXTENDED;\n    } else {\n      this.bg |= BgFlags.HAS_EXTENDED;\n    }\n  }\n  public getUnderlineColor(): number {\n    if ((this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor) {\n      switch (this.extended.underlineColor & Attributes.CM_MASK) {\n        case Attributes.CM_P16:\n        case Attributes.CM_P256:  return this.extended.underlineColor & Attributes.PCOLOR_MASK;\n        case Attributes.CM_RGB:   return this.extended.underlineColor & Attributes.RGB_MASK;\n        default:                  return this.getFgColor();\n      }\n    }\n    return this.getFgColor();\n  }\n  public getUnderlineColorMode(): number {\n    return (this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor\n      ? this.extended.underlineColor & Attributes.CM_MASK\n      : this.getFgColorMode();\n  }\n  public isUnderlineColorRGB(): boolean {\n    return (this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor\n      ? (this.extended.underlineColor & Attributes.CM_MASK) === Attributes.CM_RGB\n      : this.isFgRGB();\n  }\n  public isUnderlineColorPalette(): boolean {\n    return (this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor\n      ? (this.extended.underlineColor & Attributes.CM_MASK) === Attributes.CM_P16\n          || (this.extended.underlineColor & Attributes.CM_MASK) === Attributes.CM_P256\n      : this.isFgPalette();\n  }\n  public isUnderlineColorDefault(): boolean {\n    return (this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor\n      ? (this.extended.underlineColor & Attributes.CM_MASK) === 0\n      : this.isFgDefault();\n  }\n  public getUnderlineStyle(): UnderlineStyle {\n    return this.fg & FgFlags.UNDERLINE\n      ? (this.bg & BgFlags.HAS_EXTENDED ? this.extended.underlineStyle : UnderlineStyle.SINGLE)\n      : UnderlineStyle.NONE;\n  }\n}\n\n\n/**\n * Extended attributes for a cell.\n * Holds information about different underline styles and color.\n */\nexport class ExtendedAttrs implements IExtendedAttrs {\n  constructor(\n    // underline style, NONE is empty\n    public underlineStyle: UnderlineStyle = UnderlineStyle.NONE,\n    // underline color, -1 is empty (same as FG)\n    public underlineColor: number = -1\n  ) {}\n\n  public clone(): IExtendedAttrs {\n    return new ExtendedAttrs(this.underlineStyle, this.underlineColor);\n  }\n\n  /**\n   * Convenient method to indicate whether the object holds no additional information,\n   * that needs to be persistant in the buffer.\n   */\n  public isEmpty(): boolean {\n    return this.underlineStyle === UnderlineStyle.NONE;\n  }\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { CircularList, IInsertEvent } from 'common/CircularList';\nimport { IBuffer, BufferIndex, IBufferStringIterator, IBufferStringIteratorResult } from 'common/buffer/Types';\nimport { IBufferLine, ICellData, IAttributeData, ICharset } from 'common/Types';\nimport { BufferLine, DEFAULT_ATTR_DATA } from 'common/buffer/BufferLine';\nimport { CellData } from 'common/buffer/CellData';\nimport { NULL_CELL_CHAR, NULL_CELL_WIDTH, NULL_CELL_CODE, WHITESPACE_CELL_CHAR, WHITESPACE_CELL_WIDTH, WHITESPACE_CELL_CODE, CHAR_DATA_WIDTH_INDEX, CHAR_DATA_CHAR_INDEX } from 'common/buffer/Constants';\nimport { reflowLargerApplyNewLayout, reflowLargerCreateNewLayout, reflowLargerGetLinesToRemove, reflowSmallerGetNewLineLengths, getWrappedLineTrimmedLength } from 'common/buffer/BufferReflow';\nimport { Marker } from 'common/buffer/Marker';\nimport { IOptionsService, IBufferService } from 'common/services/Services';\nimport { DEFAULT_CHARSET } from 'common/data/Charsets';\nimport { ExtendedAttrs } from 'common/buffer/AttributeData';\n\nexport const MAX_BUFFER_SIZE = 4294967295; // 2^32 - 1\n\n/**\n * This class represents a terminal buffer (an internal state of the terminal), where the\n * following information is stored (in high-level):\n *   - text content of this particular buffer\n *   - cursor position\n *   - scroll position\n */\nexport class Buffer implements IBuffer {\n  public lines: CircularList<IBufferLine>;\n  public ydisp: number = 0;\n  public ybase: number = 0;\n  public y: number = 0;\n  public x: number = 0;\n  public scrollBottom: number;\n  public scrollTop: number;\n  // TODO: Type me\n  public tabs: any;\n  public savedY: number = 0;\n  public savedX: number = 0;\n  public savedCurAttrData = DEFAULT_ATTR_DATA.clone();\n  public savedCharset: ICharset | undefined = DEFAULT_CHARSET;\n  public markers: Marker[] = [];\n  private _nullCell: ICellData = CellData.fromCharData([0, NULL_CELL_CHAR, NULL_CELL_WIDTH, NULL_CELL_CODE]);\n  private _whitespaceCell: ICellData = CellData.fromCharData([0, WHITESPACE_CELL_CHAR, WHITESPACE_CELL_WIDTH, WHITESPACE_CELL_CODE]);\n  private _cols: number;\n  private _rows: number;\n\n  constructor(\n    private _hasScrollback: boolean,\n    private _optionsService: IOptionsService,\n    private _bufferService: IBufferService\n  ) {\n    this._cols = this._bufferService.cols;\n    this._rows = this._bufferService.rows;\n    this.lines = new CircularList<IBufferLine>(this._getCorrectBufferLength(this._rows));\n    this.scrollTop = 0;\n    this.scrollBottom = this._rows - 1;\n    this.setupTabStops();\n  }\n\n  public getNullCell(attr?: IAttributeData): ICellData {\n    if (attr) {\n      this._nullCell.fg = attr.fg;\n      this._nullCell.bg = attr.bg;\n      this._nullCell.extended = attr.extended;\n    } else {\n      this._nullCell.fg = 0;\n      this._nullCell.bg = 0;\n      this._nullCell.extended = new ExtendedAttrs();\n    }\n    return this._nullCell;\n  }\n\n  public getWhitespaceCell(attr?: IAttributeData): ICellData {\n    if (attr) {\n      this._whitespaceCell.fg = attr.fg;\n      this._whitespaceCell.bg = attr.bg;\n      this._whitespaceCell.extended = attr.extended;\n    } else {\n      this._whitespaceCell.fg = 0;\n      this._whitespaceCell.bg = 0;\n      this._whitespaceCell.extended = new ExtendedAttrs();\n    }\n    return this._whitespaceCell;\n  }\n\n  public getBlankLine(attr: IAttributeData, isWrapped?: boolean): IBufferLine {\n    return new BufferLine(this._bufferService.cols, this.getNullCell(attr), isWrapped);\n  }\n\n  public get hasScrollback(): boolean {\n    return this._hasScrollback && this.lines.maxLength > this._rows;\n  }\n\n  public get isCursorInViewport(): boolean {\n    const absoluteY = this.ybase + this.y;\n    const relativeY = absoluteY - this.ydisp;\n    return (relativeY >= 0 && relativeY < this._rows);\n  }\n\n  /**\n   * Gets the correct buffer length based on the rows provided, the terminal's\n   * scrollback and whether this buffer is flagged to have scrollback or not.\n   * @param rows The terminal rows to use in the calculation.\n   */\n  private _getCorrectBufferLength(rows: number): number {\n    if (!this._hasScrollback) {\n      return rows;\n    }\n\n    const correctBufferLength = rows + this._optionsService.rawOptions.scrollback;\n\n    return correctBufferLength > MAX_BUFFER_SIZE ? MAX_BUFFER_SIZE : correctBufferLength;\n  }\n\n  /**\n   * Fills the buffer's viewport with blank lines.\n   */\n  public fillViewportRows(fillAttr?: IAttributeData): void {\n    if (this.lines.length === 0) {\n      if (fillAttr === undefined) {\n        fillAttr = DEFAULT_ATTR_DATA;\n      }\n      let i = this._rows;\n      while (i--) {\n        this.lines.push(this.getBlankLine(fillAttr));\n      }\n    }\n  }\n\n  /**\n   * Clears the buffer to it's initial state, discarding all previous data.\n   */\n  public clear(): void {\n    this.ydisp = 0;\n    this.ybase = 0;\n    this.y = 0;\n    this.x = 0;\n    this.lines = new CircularList<IBufferLine>(this._getCorrectBufferLength(this._rows));\n    this.scrollTop = 0;\n    this.scrollBottom = this._rows - 1;\n    this.setupTabStops();\n  }\n\n  /**\n   * Resizes the buffer, adjusting its data accordingly.\n   * @param newCols The new number of columns.\n   * @param newRows The new number of rows.\n   */\n  public resize(newCols: number, newRows: number): void {\n    // store reference to null cell with default attrs\n    const nullCell = this.getNullCell(DEFAULT_ATTR_DATA);\n\n    // Increase max length if needed before adjustments to allow space to fill\n    // as required.\n    const newMaxLength = this._getCorrectBufferLength(newRows);\n    if (newMaxLength > this.lines.maxLength) {\n      this.lines.maxLength = newMaxLength;\n    }\n\n    // The following adjustments should only happen if the buffer has been\n    // initialized/filled.\n    if (this.lines.length > 0) {\n      // Deal with columns increasing (reducing needs to happen after reflow)\n      if (this._cols < newCols) {\n        for (let i = 0; i < this.lines.length; i++) {\n          this.lines.get(i)!.resize(newCols, nullCell);\n        }\n      }\n\n      // Resize rows in both directions as needed\n      let addToY = 0;\n      if (this._rows < newRows) {\n        for (let y = this._rows; y < newRows; y++) {\n          if (this.lines.length < newRows + this.ybase) {\n            if (this._optionsService.rawOptions.windowsMode) {\n              // Just add the new missing rows on Windows as conpty reprints the screen with it's\n              // view of the world. Once a line enters scrollback for conpty it remains there\n              this.lines.push(new BufferLine(newCols, nullCell));\n            } else {\n              if (this.ybase > 0 && this.lines.length <= this.ybase + this.y + addToY + 1) {\n                // There is room above the buffer and there are no empty elements below the line,\n                // scroll up\n                this.ybase--;\n                addToY++;\n                if (this.ydisp > 0) {\n                  // Viewport is at the top of the buffer, must increase downwards\n                  this.ydisp--;\n                }\n              } else {\n                // Add a blank line if there is no buffer left at the top to scroll to, or if there\n                // are blank lines after the cursor\n                this.lines.push(new BufferLine(newCols, nullCell));\n              }\n            }\n          }\n        }\n      } else { // (this._rows >= newRows)\n        for (let y = this._rows; y > newRows; y--) {\n          if (this.lines.length > newRows + this.ybase) {\n            if (this.lines.length > this.ybase + this.y + 1) {\n              // The line is a blank line below the cursor, remove it\n              this.lines.pop();\n            } else {\n              // The line is the cursor, scroll down\n              this.ybase++;\n              this.ydisp++;\n            }\n          }\n        }\n      }\n\n      // Reduce max length if needed after adjustments, this is done after as it\n      // would otherwise cut data from the bottom of the buffer.\n      if (newMaxLength < this.lines.maxLength) {\n        // Trim from the top of the buffer and adjust ybase and ydisp.\n        const amountToTrim = this.lines.length - newMaxLength;\n        if (amountToTrim > 0) {\n          this.lines.trimStart(amountToTrim);\n          this.ybase = Math.max(this.ybase - amountToTrim, 0);\n          this.ydisp = Math.max(this.ydisp - amountToTrim, 0);\n          this.savedY = Math.max(this.savedY - amountToTrim, 0);\n        }\n        this.lines.maxLength = newMaxLength;\n      }\n\n      // Make sure that the cursor stays on screen\n      this.x = Math.min(this.x, newCols - 1);\n      this.y = Math.min(this.y, newRows - 1);\n      if (addToY) {\n        this.y += addToY;\n      }\n      this.savedX = Math.min(this.savedX, newCols - 1);\n\n      this.scrollTop = 0;\n    }\n\n    this.scrollBottom = newRows - 1;\n\n    if (this._isReflowEnabled) {\n      this._reflow(newCols, newRows);\n\n      // Trim the end of the line off if cols shrunk\n      if (this._cols > newCols) {\n        for (let i = 0; i < this.lines.length; i++) {\n          this.lines.get(i)!.resize(newCols, nullCell);\n        }\n      }\n    }\n\n    this._cols = newCols;\n    this._rows = newRows;\n  }\n\n  private get _isReflowEnabled(): boolean {\n    return this._hasScrollback && !this._optionsService.rawOptions.windowsMode;\n  }\n\n  private _reflow(newCols: number, newRows: number): void {\n    if (this._cols === newCols) {\n      return;\n    }\n\n    // Iterate through rows, ignore the last one as it cannot be wrapped\n    if (newCols > this._cols) {\n      this._reflowLarger(newCols, newRows);\n    } else {\n      this._reflowSmaller(newCols, newRows);\n    }\n  }\n\n  private _reflowLarger(newCols: number, newRows: number): void {\n    const toRemove: number[] = reflowLargerGetLinesToRemove(this.lines, this._cols, newCols, this.ybase + this.y, this.getNullCell(DEFAULT_ATTR_DATA));\n    if (toRemove.length > 0) {\n      const newLayoutResult = reflowLargerCreateNewLayout(this.lines, toRemove);\n      reflowLargerApplyNewLayout(this.lines, newLayoutResult.layout);\n      this._reflowLargerAdjustViewport(newCols, newRows, newLayoutResult.countRemoved);\n    }\n  }\n\n  private _reflowLargerAdjustViewport(newCols: number, newRows: number, countRemoved: number): void {\n    const nullCell = this.getNullCell(DEFAULT_ATTR_DATA);\n    // Adjust viewport based on number of items removed\n    let viewportAdjustments = countRemoved;\n    while (viewportAdjustments-- > 0) {\n      if (this.ybase === 0) {\n        if (this.y > 0) {\n          this.y--;\n        }\n        if (this.lines.length < newRows) {\n          // Add an extra row at the bottom of the viewport\n          this.lines.push(new BufferLine(newCols, nullCell));\n        }\n      } else {\n        if (this.ydisp === this.ybase) {\n          this.ydisp--;\n        }\n        this.ybase--;\n      }\n    }\n    this.savedY = Math.max(this.savedY - countRemoved, 0);\n  }\n\n  private _reflowSmaller(newCols: number, newRows: number): void {\n    const nullCell = this.getNullCell(DEFAULT_ATTR_DATA);\n    // Gather all BufferLines that need to be inserted into the Buffer here so that they can be\n    // batched up and only committed once\n    const toInsert = [];\n    let countToInsert = 0;\n    // Go backwards as many lines may be trimmed and this will avoid considering them\n    for (let y = this.lines.length - 1; y >= 0; y--) {\n      // Check whether this line is a problem\n      let nextLine = this.lines.get(y) as BufferLine;\n      if (!nextLine || !nextLine.isWrapped && nextLine.getTrimmedLength() <= newCols) {\n        continue;\n      }\n\n      // Gather wrapped lines and adjust y to be the starting line\n      const wrappedLines: BufferLine[] = [nextLine];\n      while (nextLine.isWrapped && y > 0) {\n        nextLine = this.lines.get(--y) as BufferLine;\n        wrappedLines.unshift(nextLine);\n      }\n\n      // If these lines contain the cursor don't touch them, the program will handle fixing up\n      // wrapped lines with the cursor\n      const absoluteY = this.ybase + this.y;\n      if (absoluteY >= y && absoluteY < y + wrappedLines.length) {\n        continue;\n      }\n\n      const lastLineLength = wrappedLines[wrappedLines.length - 1].getTrimmedLength();\n      const destLineLengths = reflowSmallerGetNewLineLengths(wrappedLines, this._cols, newCols);\n      const linesToAdd = destLineLengths.length - wrappedLines.length;\n      let trimmedLines: number;\n      if (this.ybase === 0 && this.y !== this.lines.length - 1) {\n        // If the top section of the buffer is not yet filled\n        trimmedLines = Math.max(0, this.y - this.lines.maxLength + linesToAdd);\n      } else {\n        trimmedLines = Math.max(0, this.lines.length - this.lines.maxLength + linesToAdd);\n      }\n\n      // Add the new lines\n      const newLines: BufferLine[] = [];\n      for (let i = 0; i < linesToAdd; i++) {\n        const newLine = this.getBlankLine(DEFAULT_ATTR_DATA, true) as BufferLine;\n        newLines.push(newLine);\n      }\n      if (newLines.length > 0) {\n        toInsert.push({\n          // countToInsert here gets the actual index, taking into account other inserted items.\n          // using this we can iterate through the list forwards\n          start: y + wrappedLines.length + countToInsert,\n          newLines\n        });\n        countToInsert += newLines.length;\n      }\n      wrappedLines.push(...newLines);\n\n      // Copy buffer data to new locations, this needs to happen backwards to do in-place\n      let destLineIndex = destLineLengths.length - 1; // Math.floor(cellsNeeded / newCols);\n      let destCol = destLineLengths[destLineIndex]; // cellsNeeded % newCols;\n      if (destCol === 0) {\n        destLineIndex--;\n        destCol = destLineLengths[destLineIndex];\n      }\n      let srcLineIndex = wrappedLines.length - linesToAdd - 1;\n      let srcCol = lastLineLength;\n      while (srcLineIndex >= 0) {\n        const cellsToCopy = Math.min(srcCol, destCol);\n        if (wrappedLines[destLineIndex] === undefined) {\n          // Sanity check that the line exists, this has been known to fail for an unknown reason\n          // which would stop the reflow from happening if an exception would throw.\n          break;\n        }\n        wrappedLines[destLineIndex].copyCellsFrom(wrappedLines[srcLineIndex], srcCol - cellsToCopy, destCol - cellsToCopy, cellsToCopy, true);\n        destCol -= cellsToCopy;\n        if (destCol === 0) {\n          destLineIndex--;\n          destCol = destLineLengths[destLineIndex];\n        }\n        srcCol -= cellsToCopy;\n        if (srcCol === 0) {\n          srcLineIndex--;\n          const wrappedLinesIndex = Math.max(srcLineIndex, 0);\n          srcCol = getWrappedLineTrimmedLength(wrappedLines, wrappedLinesIndex, this._cols);\n        }\n      }\n\n      // Null out the end of the line ends if a wide character wrapped to the following line\n      for (let i = 0; i < wrappedLines.length; i++) {\n        if (destLineLengths[i] < newCols) {\n          wrappedLines[i].setCell(destLineLengths[i], nullCell);\n        }\n      }\n\n      // Adjust viewport as needed\n      let viewportAdjustments = linesToAdd - trimmedLines;\n      while (viewportAdjustments-- > 0) {\n        if (this.ybase === 0) {\n          if (this.y < newRows - 1) {\n            this.y++;\n            this.lines.pop();\n          } else {\n            this.ybase++;\n            this.ydisp++;\n          }\n        } else {\n          // Ensure ybase does not exceed its maximum value\n          if (this.ybase < Math.min(this.lines.maxLength, this.lines.length + countToInsert) - newRows) {\n            if (this.ybase === this.ydisp) {\n              this.ydisp++;\n            }\n            this.ybase++;\n          }\n        }\n      }\n      this.savedY = Math.min(this.savedY + linesToAdd, this.ybase + newRows - 1);\n    }\n\n    // Rearrange lines in the buffer if there are any insertions, this is done at the end rather\n    // than earlier so that it's a single O(n) pass through the buffer, instead of O(n^2) from many\n    // costly calls to CircularList.splice.\n    if (toInsert.length > 0) {\n      // Record buffer insert events and then play them back backwards so that the indexes are\n      // correct\n      const insertEvents: IInsertEvent[] = [];\n\n      // Record original lines so they don't get overridden when we rearrange the list\n      const originalLines: BufferLine[] = [];\n      for (let i = 0; i < this.lines.length; i++) {\n        originalLines.push(this.lines.get(i) as BufferLine);\n      }\n      const originalLinesLength = this.lines.length;\n\n      let originalLineIndex = originalLinesLength - 1;\n      let nextToInsertIndex = 0;\n      let nextToInsert = toInsert[nextToInsertIndex];\n      this.lines.length = Math.min(this.lines.maxLength, this.lines.length + countToInsert);\n      let countInsertedSoFar = 0;\n      for (let i = Math.min(this.lines.maxLength - 1, originalLinesLength + countToInsert - 1); i >= 0; i--) {\n        if (nextToInsert && nextToInsert.start > originalLineIndex + countInsertedSoFar) {\n          // Insert extra lines here, adjusting i as needed\n          for (let nextI = nextToInsert.newLines.length - 1; nextI >= 0; nextI--) {\n            this.lines.set(i--, nextToInsert.newLines[nextI]);\n          }\n          i++;\n\n          // Create insert events for later\n          insertEvents.push({\n            index: originalLineIndex + 1,\n            amount: nextToInsert.newLines.length\n          });\n\n          countInsertedSoFar += nextToInsert.newLines.length;\n          nextToInsert = toInsert[++nextToInsertIndex];\n        } else {\n          this.lines.set(i, originalLines[originalLineIndex--]);\n        }\n      }\n\n      // Update markers\n      let insertCountEmitted = 0;\n      for (let i = insertEvents.length - 1; i >= 0; i--) {\n        insertEvents[i].index += insertCountEmitted;\n        this.lines.onInsertEmitter.fire(insertEvents[i]);\n        insertCountEmitted += insertEvents[i].amount;\n      }\n      const amountToTrim = Math.max(0, originalLinesLength + countToInsert - this.lines.maxLength);\n      if (amountToTrim > 0) {\n        this.lines.onTrimEmitter.fire(amountToTrim);\n      }\n    }\n  }\n\n  // private _reflowSmallerGetLinesNeeded()\n\n  /**\n   * Translates a string index back to a BufferIndex.\n   * To get the correct buffer position the string must start at `startCol` 0\n   * (default in translateBufferLineToString).\n   * The method also works on wrapped line strings given rows were not trimmed.\n   * The method operates on the CharData string length, there are no\n   * additional content or boundary checks. Therefore the string and the buffer\n   * should not be altered in between.\n   * TODO: respect trim flag after fixing #1685\n   * @param lineIndex line index the string was retrieved from\n   * @param stringIndex index within the string\n   * @param startCol column offset the string was retrieved from\n   */\n  public stringIndexToBufferIndex(lineIndex: number, stringIndex: number, trimRight: boolean = false): BufferIndex {\n    while (stringIndex) {\n      const line = this.lines.get(lineIndex);\n      if (!line) {\n        return [-1, -1];\n      }\n      const length = (trimRight) ? line.getTrimmedLength() : line.length;\n      for (let i = 0; i < length; ++i) {\n        if (line.get(i)[CHAR_DATA_WIDTH_INDEX]) {\n          // empty cells report a string length of 0, but get replaced\n          // with a whitespace in translateToString, thus replace with 1\n          stringIndex -= line.get(i)[CHAR_DATA_CHAR_INDEX].length || 1;\n        }\n        if (stringIndex < 0) {\n          return [lineIndex, i];\n        }\n      }\n      lineIndex++;\n    }\n    return [lineIndex, 0];\n  }\n\n  /**\n   * Translates a buffer line to a string, with optional start and end columns.\n   * Wide characters will count as two columns in the resulting string. This\n   * function is useful for getting the actual text underneath the raw selection\n   * position.\n   * @param line The line being translated.\n   * @param trimRight Whether to trim whitespace to the right.\n   * @param startCol The column to start at.\n   * @param endCol The column to end at.\n   */\n  public translateBufferLineToString(lineIndex: number, trimRight: boolean, startCol: number = 0, endCol?: number): string {\n    const line = this.lines.get(lineIndex);\n    if (!line) {\n      return '';\n    }\n    return line.translateToString(trimRight, startCol, endCol);\n  }\n\n  public getWrappedRangeForLine(y: number): { first: number, last: number } {\n    let first = y;\n    let last = y;\n    // Scan upwards for wrapped lines\n    while (first > 0 && this.lines.get(first)!.isWrapped) {\n      first--;\n    }\n    // Scan downwards for wrapped lines\n    while (last + 1 < this.lines.length && this.lines.get(last + 1)!.isWrapped) {\n      last++;\n    }\n    return { first, last };\n  }\n\n  /**\n   * Setup the tab stops.\n   * @param i The index to start setting up tab stops from.\n   */\n  public setupTabStops(i?: number): void {\n    if (i !== null && i !== undefined) {\n      if (!this.tabs[i]) {\n        i = this.prevStop(i);\n      }\n    } else {\n      this.tabs = {};\n      i = 0;\n    }\n\n    for (; i < this._cols; i += this._optionsService.rawOptions.tabStopWidth) {\n      this.tabs[i] = true;\n    }\n  }\n\n  /**\n   * Move the cursor to the previous tab stop from the given position (default is current).\n   * @param x The position to move the cursor to the previous tab stop.\n   */\n  public prevStop(x?: number): number {\n    if (x === null || x === undefined) {\n      x = this.x;\n    }\n    while (!this.tabs[--x] && x > 0);\n    return x >= this._cols ? this._cols - 1 : x < 0 ? 0 : x;\n  }\n\n  /**\n   * Move the cursor one tab stop forward from the given position (default is current).\n   * @param x The position to move the cursor one tab stop forward.\n   */\n  public nextStop(x?: number): number {\n    if (x === null || x === undefined) {\n      x = this.x;\n    }\n    while (!this.tabs[++x] && x < this._cols);\n    return x >= this._cols ? this._cols - 1 : x < 0 ? 0 : x;\n  }\n\n  public addMarker(y: number): Marker {\n    const marker = new Marker(y);\n    this.markers.push(marker);\n    marker.register(this.lines.onTrim(amount => {\n      marker.line -= amount;\n      // The marker should be disposed when the line is trimmed from the buffer\n      if (marker.line < 0) {\n        marker.dispose();\n      }\n    }));\n    marker.register(this.lines.onInsert(event => {\n      if (marker.line >= event.index) {\n        marker.line += event.amount;\n      }\n    }));\n    marker.register(this.lines.onDelete(event => {\n      // Delete the marker if it's within the range\n      if (marker.line >= event.index && marker.line < event.index + event.amount) {\n        marker.dispose();\n      }\n\n      // Shift the marker if it's after the deleted range\n      if (marker.line > event.index) {\n        marker.line -= event.amount;\n      }\n    }));\n    marker.register(marker.onDispose(() => this._removeMarker(marker)));\n    return marker;\n  }\n\n  private _removeMarker(marker: Marker): void {\n    this.markers.splice(this.markers.indexOf(marker), 1);\n  }\n\n  public iterator(trimRight: boolean, startIndex?: number, endIndex?: number, startOverscan?: number, endOverscan?: number): IBufferStringIterator {\n    return new BufferStringIterator(this, trimRight, startIndex, endIndex, startOverscan, endOverscan);\n  }\n}\n\n/**\n * Iterator to get unwrapped content strings from the buffer.\n * The iterator returns at least the string data between the borders\n * `startIndex` and `endIndex` (exclusive) and will expand the lines\n * by `startOverscan` to the top and by `endOverscan` to the bottom,\n * if no new line was found in between.\n * It will never read/return string data beyond `startIndex - startOverscan`\n * or `endIndex + endOverscan`. Therefore the first and last line might be truncated.\n * It is possible to always get the full string for the first and last line as well\n * by setting the overscan values to the actual buffer length. This not recommended\n * since it might return the whole buffer within a single string in a worst case scenario.\n */\nexport class BufferStringIterator implements IBufferStringIterator {\n  private _current: number;\n\n  constructor (\n    private _buffer: IBuffer,\n    private _trimRight: boolean,\n    private _startIndex: number = 0,\n    private _endIndex: number = _buffer.lines.length,\n    private _startOverscan: number = 0,\n    private _endOverscan: number = 0\n  ) {\n    if (this._startIndex < 0) {\n      this._startIndex = 0;\n    }\n    if (this._endIndex > this._buffer.lines.length) {\n      this._endIndex = this._buffer.lines.length;\n    }\n    this._current = this._startIndex;\n  }\n\n  public hasNext(): boolean {\n    return this._current < this._endIndex;\n  }\n\n  public next(): IBufferStringIteratorResult {\n    const range = this._buffer.getWrappedRangeForLine(this._current);\n    // limit search window to overscan value at both borders\n    if (range.first < this._startIndex - this._startOverscan) {\n      range.first = this._startIndex - this._startOverscan;\n    }\n    if (range.last > this._endIndex + this._endOverscan) {\n      range.last = this._endIndex + this._endOverscan;\n    }\n    // limit to current buffer length\n    range.first = Math.max(range.first, 0);\n    range.last = Math.min(range.last, this._buffer.lines.length);\n    let content = '';\n    for (let i = range.first; i <= range.last; ++i) {\n      content += this._buffer.translateBufferLineToString(i, this._trimRight);\n    }\n    this._current = range.last + 1;\n    return { range, content };\n  }\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { CharData, IBufferLine, ICellData, IAttributeData, IExtendedAttrs } from 'common/Types';\nimport { stringFromCodePoint } from 'common/input/TextDecoder';\nimport { CHAR_DATA_CHAR_INDEX, CHAR_DATA_WIDTH_INDEX, CHAR_DATA_ATTR_INDEX, NULL_CELL_CHAR, NULL_CELL_WIDTH, NULL_CELL_CODE, WHITESPACE_CELL_CHAR, Content, BgFlags } from 'common/buffer/Constants';\nimport { CellData } from 'common/buffer/CellData';\nimport { AttributeData, ExtendedAttrs } from 'common/buffer/AttributeData';\n\n/**\n * buffer memory layout:\n *\n *   |             uint32_t             |        uint32_t         |        uint32_t         |\n *   |             `content`            |          `FG`           |          `BG`           |\n *   | wcwidth(2) comb(1) codepoint(21) | flags(8) R(8) G(8) B(8) | flags(8) R(8) G(8) B(8) |\n */\n\n\n/** typed array slots taken by one cell */\nconst CELL_SIZE = 3;\n\n/**\n * Cell member indices.\n *\n * Direct access:\n *    `content = data[column * CELL_SIZE + Cell.CONTENT];`\n *    `fg = data[column * CELL_SIZE + Cell.FG];`\n *    `bg = data[column * CELL_SIZE + Cell.BG];`\n */\nconst enum Cell {\n  CONTENT = 0,\n  FG = 1, // currently simply holds all known attrs\n  BG = 2  // currently unused\n}\n\nexport const DEFAULT_ATTR_DATA = Object.freeze(new AttributeData());\n\n/**\n * Typed array based bufferline implementation.\n *\n * There are 2 ways to insert data into the cell buffer:\n * - `setCellFromCodepoint` + `addCodepointToCell`\n *   Use these for data that is already UTF32.\n *   Used during normal input in `InputHandler` for faster buffer access.\n * - `setCell`\n *   This method takes a CellData object and stores the data in the buffer.\n *   Use `CellData.fromCharData` to create the CellData object (e.g. from JS string).\n *\n * To retrieve data from the buffer use either one of the primitive methods\n * (if only one particular value is needed) or `loadCell`. For `loadCell` in a loop\n * memory allocs / GC pressure can be greatly reduced by reusing the CellData object.\n */\nexport class BufferLine implements IBufferLine {\n  protected _data: Uint32Array;\n  protected _combined: {[index: number]: string} = {};\n  protected _extendedAttrs: {[index: number]: ExtendedAttrs} = {};\n  public length: number;\n\n  constructor(cols: number, fillCellData?: ICellData, public isWrapped: boolean = false) {\n    this._data = new Uint32Array(cols * CELL_SIZE);\n    const cell = fillCellData || CellData.fromCharData([0, NULL_CELL_CHAR, NULL_CELL_WIDTH, NULL_CELL_CODE]);\n    for (let i = 0; i < cols; ++i) {\n      this.setCell(i, cell);\n    }\n    this.length = cols;\n  }\n\n  /**\n   * Get cell data CharData.\n   * @deprecated\n   */\n  public get(index: number): CharData {\n    const content = this._data[index * CELL_SIZE + Cell.CONTENT];\n    const cp = content & Content.CODEPOINT_MASK;\n    return [\n      this._data[index * CELL_SIZE + Cell.FG],\n      (content & Content.IS_COMBINED_MASK)\n        ? this._combined[index]\n        : (cp) ? stringFromCodePoint(cp) : '',\n      content >> Content.WIDTH_SHIFT,\n      (content & Content.IS_COMBINED_MASK)\n        ? this._combined[index].charCodeAt(this._combined[index].length - 1)\n        : cp\n    ];\n  }\n\n  /**\n   * Set cell data from CharData.\n   * @deprecated\n   */\n  public set(index: number, value: CharData): void {\n    this._data[index * CELL_SIZE + Cell.FG] = value[CHAR_DATA_ATTR_INDEX];\n    if (value[CHAR_DATA_CHAR_INDEX].length > 1) {\n      this._combined[index] = value[1];\n      this._data[index * CELL_SIZE + Cell.CONTENT] = index | Content.IS_COMBINED_MASK | (value[CHAR_DATA_WIDTH_INDEX] << Content.WIDTH_SHIFT);\n    } else {\n      this._data[index * CELL_SIZE + Cell.CONTENT] = value[CHAR_DATA_CHAR_INDEX].charCodeAt(0) | (value[CHAR_DATA_WIDTH_INDEX] << Content.WIDTH_SHIFT);\n    }\n  }\n\n  /**\n   * primitive getters\n   * use these when only one value is needed, otherwise use `loadCell`\n   */\n  public getWidth(index: number): number {\n    return this._data[index * CELL_SIZE + Cell.CONTENT] >> Content.WIDTH_SHIFT;\n  }\n\n  /** Test whether content has width. */\n  public hasWidth(index: number): number {\n    return this._data[index * CELL_SIZE + Cell.CONTENT] & Content.WIDTH_MASK;\n  }\n\n  /** Get FG cell component. */\n  public getFg(index: number): number {\n    return this._data[index * CELL_SIZE + Cell.FG];\n  }\n\n  /** Get BG cell component. */\n  public getBg(index: number): number {\n    return this._data[index * CELL_SIZE + Cell.BG];\n  }\n\n  /**\n   * Test whether contains any chars.\n   * Basically an empty has no content, but other cells might differ in FG/BG\n   * from real empty cells.\n   * */\n  public hasContent(index: number): number {\n    return this._data[index * CELL_SIZE + Cell.CONTENT] & Content.HAS_CONTENT_MASK;\n  }\n\n  /**\n   * Get codepoint of the cell.\n   * To be in line with `code` in CharData this either returns\n   * a single UTF32 codepoint or the last codepoint of a combined string.\n   */\n  public getCodePoint(index: number): number {\n    const content = this._data[index * CELL_SIZE + Cell.CONTENT];\n    if (content & Content.IS_COMBINED_MASK) {\n      return this._combined[index].charCodeAt(this._combined[index].length - 1);\n    }\n    return content & Content.CODEPOINT_MASK;\n  }\n\n  /** Test whether the cell contains a combined string. */\n  public isCombined(index: number): number {\n    return this._data[index * CELL_SIZE + Cell.CONTENT] & Content.IS_COMBINED_MASK;\n  }\n\n  /** Returns the string content of the cell. */\n  public getString(index: number): string {\n    const content = this._data[index * CELL_SIZE + Cell.CONTENT];\n    if (content & Content.IS_COMBINED_MASK) {\n      return this._combined[index];\n    }\n    if (content & Content.CODEPOINT_MASK) {\n      return stringFromCodePoint(content & Content.CODEPOINT_MASK);\n    }\n    // return empty string for empty cells\n    return '';\n  }\n\n  /**\n   * Load data at `index` into `cell`. This is used to access cells in a way that's more friendly\n   * to GC as it significantly reduced the amount of new objects/references needed.\n   */\n  public loadCell(index: number, cell: ICellData): ICellData {\n    const startIndex = index * CELL_SIZE;\n    cell.content = this._data[startIndex + Cell.CONTENT];\n    cell.fg = this._data[startIndex + Cell.FG];\n    cell.bg = this._data[startIndex + Cell.BG];\n    if (cell.content & Content.IS_COMBINED_MASK) {\n      cell.combinedData = this._combined[index];\n    }\n    if (cell.bg & BgFlags.HAS_EXTENDED) {\n      cell.extended = this._extendedAttrs[index];\n    }\n    return cell;\n  }\n\n  /**\n   * Set data at `index` to `cell`.\n   */\n  public setCell(index: number, cell: ICellData): void {\n    if (cell.content & Content.IS_COMBINED_MASK) {\n      this._combined[index] = cell.combinedData;\n    }\n    if (cell.bg & BgFlags.HAS_EXTENDED) {\n      this._extendedAttrs[index] = cell.extended;\n    }\n    this._data[index * CELL_SIZE + Cell.CONTENT] = cell.content;\n    this._data[index * CELL_SIZE + Cell.FG] = cell.fg;\n    this._data[index * CELL_SIZE + Cell.BG] = cell.bg;\n  }\n\n  /**\n   * Set cell data from input handler.\n   * Since the input handler see the incoming chars as UTF32 codepoints,\n   * it gets an optimized access method.\n   */\n  public setCellFromCodePoint(index: number, codePoint: number, width: number, fg: number, bg: number, eAttrs: IExtendedAttrs): void {\n    if (bg & BgFlags.HAS_EXTENDED) {\n      this._extendedAttrs[index] = eAttrs;\n    }\n    this._data[index * CELL_SIZE + Cell.CONTENT] = codePoint | (width << Content.WIDTH_SHIFT);\n    this._data[index * CELL_SIZE + Cell.FG] = fg;\n    this._data[index * CELL_SIZE + Cell.BG] = bg;\n  }\n\n  /**\n   * Add a codepoint to a cell from input handler.\n   * During input stage combining chars with a width of 0 follow and stack\n   * onto a leading char. Since we already set the attrs\n   * by the previous `setDataFromCodePoint` call, we can omit it here.\n   */\n  public addCodepointToCell(index: number, codePoint: number): void {\n    let content = this._data[index * CELL_SIZE + Cell.CONTENT];\n    if (content & Content.IS_COMBINED_MASK) {\n      // we already have a combined string, simply add\n      this._combined[index] += stringFromCodePoint(codePoint);\n    } else {\n      if (content & Content.CODEPOINT_MASK) {\n        // normal case for combining chars:\n        //  - move current leading char + new one into combined string\n        //  - set combined flag\n        this._combined[index] = stringFromCodePoint(content & Content.CODEPOINT_MASK) + stringFromCodePoint(codePoint);\n        content &= ~Content.CODEPOINT_MASK; // set codepoint in buffer to 0\n        content |= Content.IS_COMBINED_MASK;\n      } else {\n        // should not happen - we actually have no data in the cell yet\n        // simply set the data in the cell buffer with a width of 1\n        content = codePoint | (1 << Content.WIDTH_SHIFT);\n      }\n      this._data[index * CELL_SIZE + Cell.CONTENT] = content;\n    }\n  }\n\n  public insertCells(pos: number, n: number, fillCellData: ICellData, eraseAttr?: IAttributeData): void {\n    pos %= this.length;\n\n    // handle fullwidth at pos: reset cell one to the left if pos is second cell of a wide char\n    if (pos && this.getWidth(pos - 1) === 2) {\n      this.setCellFromCodePoint(pos - 1, 0, 1, eraseAttr?.fg || 0, eraseAttr?.bg || 0, eraseAttr?.extended || new ExtendedAttrs());\n    }\n\n    if (n < this.length - pos) {\n      const cell = new CellData();\n      for (let i = this.length - pos - n - 1; i >= 0; --i) {\n        this.setCell(pos + n + i, this.loadCell(pos + i, cell));\n      }\n      for (let i = 0; i < n; ++i) {\n        this.setCell(pos + i, fillCellData);\n      }\n    } else {\n      for (let i = pos; i < this.length; ++i) {\n        this.setCell(i, fillCellData);\n      }\n    }\n\n    // handle fullwidth at line end: reset last cell if it is first cell of a wide char\n    if (this.getWidth(this.length - 1) === 2) {\n      this.setCellFromCodePoint(this.length - 1, 0, 1, eraseAttr?.fg || 0, eraseAttr?.bg || 0, eraseAttr?.extended || new ExtendedAttrs());\n    }\n  }\n\n  public deleteCells(pos: number, n: number, fillCellData: ICellData, eraseAttr?: IAttributeData): void {\n    pos %= this.length;\n    if (n < this.length - pos) {\n      const cell = new CellData();\n      for (let i = 0; i < this.length - pos - n; ++i) {\n        this.setCell(pos + i, this.loadCell(pos + n + i, cell));\n      }\n      for (let i = this.length - n; i < this.length; ++i) {\n        this.setCell(i, fillCellData);\n      }\n    } else {\n      for (let i = pos; i < this.length; ++i) {\n        this.setCell(i, fillCellData);\n      }\n    }\n\n    // handle fullwidth at pos:\n    // - reset pos-1 if wide char\n    // - reset pos if width==0 (previous second cell of a wide char)\n    if (pos && this.getWidth(pos - 1) === 2) {\n      this.setCellFromCodePoint(pos - 1, 0, 1, eraseAttr?.fg || 0, eraseAttr?.bg || 0, eraseAttr?.extended || new ExtendedAttrs());\n    }\n    if (this.getWidth(pos) === 0 && !this.hasContent(pos)) {\n      this.setCellFromCodePoint(pos, 0, 1, eraseAttr?.fg || 0, eraseAttr?.bg || 0, eraseAttr?.extended || new ExtendedAttrs());\n    }\n  }\n\n  public replaceCells(start: number, end: number, fillCellData: ICellData, eraseAttr?: IAttributeData): void {\n    // handle fullwidth at start: reset cell one to the left if start is second cell of a wide char\n    if (start && this.getWidth(start - 1) === 2) {\n      this.setCellFromCodePoint(start - 1, 0, 1, eraseAttr?.fg || 0, eraseAttr?.bg || 0, eraseAttr?.extended || new ExtendedAttrs());\n    }\n    // handle fullwidth at last cell + 1: reset to empty cell if it is second part of a wide char\n    if (end < this.length && this.getWidth(end - 1) === 2) {\n      this.setCellFromCodePoint(end, 0, 1, eraseAttr?.fg || 0, eraseAttr?.bg || 0, eraseAttr?.extended || new ExtendedAttrs());\n    }\n\n    while (start < end  && start < this.length) {\n      this.setCell(start++, fillCellData);\n    }\n  }\n\n  public resize(cols: number, fillCellData: ICellData): void {\n    if (cols === this.length) {\n      return;\n    }\n    if (cols > this.length) {\n      const data = new Uint32Array(cols * CELL_SIZE);\n      if (this.length) {\n        if (cols * CELL_SIZE < this._data.length) {\n          data.set(this._data.subarray(0, cols * CELL_SIZE));\n        } else {\n          data.set(this._data);\n        }\n      }\n      this._data = data;\n      for (let i = this.length; i < cols; ++i) {\n        this.setCell(i, fillCellData);\n      }\n    } else {\n      if (cols) {\n        const data = new Uint32Array(cols * CELL_SIZE);\n        data.set(this._data.subarray(0, cols * CELL_SIZE));\n        this._data = data;\n        // Remove any cut off combined data, FIXME: repeat this for extended attrs\n        const keys = Object.keys(this._combined);\n        for (let i = 0; i < keys.length; i++) {\n          const key = parseInt(keys[i], 10);\n          if (key >= cols) {\n            delete this._combined[key];\n          }\n        }\n      } else {\n        this._data = new Uint32Array(0);\n        this._combined = {};\n      }\n    }\n    this.length = cols;\n  }\n\n  /** fill a line with fillCharData */\n  public fill(fillCellData: ICellData): void {\n    this._combined = {};\n    this._extendedAttrs = {};\n    for (let i = 0; i < this.length; ++i) {\n      this.setCell(i, fillCellData);\n    }\n  }\n\n  /** alter to a full copy of line  */\n  public copyFrom(line: BufferLine): void {\n    if (this.length !== line.length) {\n      this._data = new Uint32Array(line._data);\n    } else {\n      // use high speed copy if lengths are equal\n      this._data.set(line._data);\n    }\n    this.length = line.length;\n    this._combined = {};\n    for (const el in line._combined) {\n      this._combined[el] = line._combined[el];\n    }\n    this._extendedAttrs = {};\n    for (const el in line._extendedAttrs) {\n      this._extendedAttrs[el] = line._extendedAttrs[el];\n    }\n    this.isWrapped = line.isWrapped;\n  }\n\n  /** create a new clone */\n  public clone(): IBufferLine {\n    const newLine = new BufferLine(0);\n    newLine._data = new Uint32Array(this._data);\n    newLine.length = this.length;\n    for (const el in this._combined) {\n      newLine._combined[el] = this._combined[el];\n    }\n    for (const el in this._extendedAttrs) {\n      newLine._extendedAttrs[el] = this._extendedAttrs[el];\n    }\n    newLine.isWrapped = this.isWrapped;\n    return newLine;\n  }\n\n  public getTrimmedLength(): number {\n    for (let i = this.length - 1; i >= 0; --i) {\n      if ((this._data[i * CELL_SIZE + Cell.CONTENT] & Content.HAS_CONTENT_MASK)) {\n        return i + (this._data[i * CELL_SIZE + Cell.CONTENT] >> Content.WIDTH_SHIFT);\n      }\n    }\n    return 0;\n  }\n\n  public copyCellsFrom(src: BufferLine, srcCol: number, destCol: number, length: number, applyInReverse: boolean): void {\n    const srcData = src._data;\n    if (applyInReverse) {\n      for (let cell = length - 1; cell >= 0; cell--) {\n        for (let i = 0; i < CELL_SIZE; i++) {\n          this._data[(destCol + cell) * CELL_SIZE + i] = srcData[(srcCol + cell) * CELL_SIZE + i];\n        }\n      }\n    } else {\n      for (let cell = 0; cell < length; cell++) {\n        for (let i = 0; i < CELL_SIZE; i++) {\n          this._data[(destCol + cell) * CELL_SIZE + i] = srcData[(srcCol + cell) * CELL_SIZE + i];\n        }\n      }\n    }\n\n    // Move any combined data over as needed, FIXME: repeat for extended attrs\n    const srcCombinedKeys = Object.keys(src._combined);\n    for (let i = 0; i < srcCombinedKeys.length; i++) {\n      const key = parseInt(srcCombinedKeys[i], 10);\n      if (key >= srcCol) {\n        this._combined[key - srcCol + destCol] = src._combined[key];\n      }\n    }\n  }\n\n  public translateToString(trimRight: boolean = false, startCol: number = 0, endCol: number = this.length): string {\n    if (trimRight) {\n      endCol = Math.min(endCol, this.getTrimmedLength());\n    }\n    let result = '';\n    while (startCol < endCol) {\n      const content = this._data[startCol * CELL_SIZE + Cell.CONTENT];\n      const cp = content & Content.CODEPOINT_MASK;\n      result += (content & Content.IS_COMBINED_MASK) ? this._combined[startCol] : (cp) ? stringFromCodePoint(cp) : WHITESPACE_CELL_CHAR;\n      startCol += (content >> Content.WIDTH_SHIFT) || 1; // always advance by 1\n    }\n    return result;\n  }\n}\n", "/**\n * Copyright (c) 2021 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IBufferRange } from 'xterm';\n\nexport function getRangeLength(range: IBufferRange, bufferCols: number): number {\n  if (range.start.y > range.end.y) {\n    throw new Error(`Buffer range end (${range.end.x}, ${range.end.y}) cannot be before start (${range.start.x}, ${range.start.y})`);\n  }\n  return bufferCols * (range.end.y - range.start.y) + (range.end.x - range.start.x + 1);\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { BufferLine } from 'common/buffer/BufferLine';\nimport { CircularList } from 'common/CircularList';\nimport { IBufferLine, ICellData } from 'common/Types';\n\nexport interface INewLayoutResult {\n  layout: number[];\n  countRemoved: number;\n}\n\n/**\n * Evaluates and returns indexes to be removed after a reflow larger occurs. Lines will be removed\n * when a wrapped line unwraps.\n * @param lines The buffer lines.\n * @param newCols The columns after resize.\n */\nexport function reflowLargerGetLinesToRemove(lines: CircularList<IBufferLine>, oldCols: number, newCols: number, bufferAbsoluteY: number, nullCell: ICellData): number[] {\n  // Gather all BufferLines that need to be removed from the Buffer here so that they can be\n  // batched up and only committed once\n  const toRemove: number[] = [];\n\n  for (let y = 0; y < lines.length - 1; y++) {\n    // Check if this row is wrapped\n    let i = y;\n    let nextLine = lines.get(++i) as BufferLine;\n    if (!nextLine.isWrapped) {\n      continue;\n    }\n\n    // Check how many lines it's wrapped for\n    const wrappedLines: BufferLine[] = [lines.get(y) as BufferLine];\n    while (i < lines.length && nextLine.isWrapped) {\n      wrappedLines.push(nextLine);\n      nextLine = lines.get(++i) as BufferLine;\n    }\n\n    // If these lines contain the cursor don't touch them, the program will handle fixing up wrapped\n    // lines with the cursor\n    if (bufferAbsoluteY >= y && bufferAbsoluteY < i) {\n      y += wrappedLines.length - 1;\n      continue;\n    }\n\n    // Copy buffer data to new locations\n    let destLineIndex = 0;\n    let destCol = getWrappedLineTrimmedLength(wrappedLines, destLineIndex, oldCols);\n    let srcLineIndex = 1;\n    let srcCol = 0;\n    while (srcLineIndex < wrappedLines.length) {\n      const srcTrimmedTineLength = getWrappedLineTrimmedLength(wrappedLines, srcLineIndex, oldCols);\n      const srcRemainingCells = srcTrimmedTineLength - srcCol;\n      const destRemainingCells = newCols - destCol;\n      const cellsToCopy = Math.min(srcRemainingCells, destRemainingCells);\n\n      wrappedLines[destLineIndex].copyCellsFrom(wrappedLines[srcLineIndex], srcCol, destCol, cellsToCopy, false);\n\n      destCol += cellsToCopy;\n      if (destCol === newCols) {\n        destLineIndex++;\n        destCol = 0;\n      }\n      srcCol += cellsToCopy;\n      if (srcCol === srcTrimmedTineLength) {\n        srcLineIndex++;\n        srcCol = 0;\n      }\n\n      // Make sure the last cell isn't wide, if it is copy it to the current dest\n      if (destCol === 0 && destLineIndex !== 0) {\n        if (wrappedLines[destLineIndex - 1].getWidth(newCols - 1) === 2) {\n          wrappedLines[destLineIndex].copyCellsFrom(wrappedLines[destLineIndex - 1], newCols - 1, destCol++, 1, false);\n          // Null out the end of the last row\n          wrappedLines[destLineIndex - 1].setCell(newCols - 1, nullCell);\n        }\n      }\n    }\n\n    // Clear out remaining cells or fragments could remain;\n    wrappedLines[destLineIndex].replaceCells(destCol, newCols, nullCell);\n\n    // Work backwards and remove any rows at the end that only contain null cells\n    let countToRemove = 0;\n    for (let i = wrappedLines.length - 1; i > 0; i--) {\n      if (i > destLineIndex || wrappedLines[i].getTrimmedLength() === 0) {\n        countToRemove++;\n      } else {\n        break;\n      }\n    }\n\n    if (countToRemove > 0) {\n      toRemove.push(y + wrappedLines.length - countToRemove); // index\n      toRemove.push(countToRemove);\n    }\n\n    y += wrappedLines.length - 1;\n  }\n  return toRemove;\n}\n\n/**\n * Creates and return the new layout for lines given an array of indexes to be removed.\n * @param lines The buffer lines.\n * @param toRemove The indexes to remove.\n */\nexport function reflowLargerCreateNewLayout(lines: CircularList<IBufferLine>, toRemove: number[]): INewLayoutResult {\n  const layout: number[] = [];\n  // First iterate through the list and get the actual indexes to use for rows\n  let nextToRemoveIndex = 0;\n  let nextToRemoveStart = toRemove[nextToRemoveIndex];\n  let countRemovedSoFar = 0;\n  for (let i = 0; i < lines.length; i++) {\n    if (nextToRemoveStart === i) {\n      const countToRemove = toRemove[++nextToRemoveIndex];\n\n      // Tell markers that there was a deletion\n      lines.onDeleteEmitter.fire({\n        index: i - countRemovedSoFar,\n        amount: countToRemove\n      });\n\n      i += countToRemove - 1;\n      countRemovedSoFar += countToRemove;\n      nextToRemoveStart = toRemove[++nextToRemoveIndex];\n    } else {\n      layout.push(i);\n    }\n  }\n  return {\n    layout,\n    countRemoved: countRemovedSoFar\n  };\n}\n\n/**\n * Applies a new layout to the buffer. This essentially does the same as many splice calls but it's\n * done all at once in a single iteration through the list since splice is very expensive.\n * @param lines The buffer lines.\n * @param newLayout The new layout to apply.\n */\nexport function reflowLargerApplyNewLayout(lines: CircularList<IBufferLine>, newLayout: number[]): void {\n  // Record original lines so they don't get overridden when we rearrange the list\n  const newLayoutLines: BufferLine[] = [];\n  for (let i = 0; i < newLayout.length; i++) {\n    newLayoutLines.push(lines.get(newLayout[i]) as BufferLine);\n  }\n\n  // Rearrange the list\n  for (let i = 0; i < newLayoutLines.length; i++) {\n    lines.set(i, newLayoutLines[i]);\n  }\n  lines.length = newLayout.length;\n}\n\n/**\n * Gets the new line lengths for a given wrapped line. The purpose of this function it to pre-\n * compute the wrapping points since wide characters may need to be wrapped onto the following line.\n * This function will return an array of numbers of where each line wraps to, the resulting array\n * will only contain the values `newCols` (when the line does not end with a wide character) and\n * `newCols - 1` (when the line does end with a wide character), except for the last value which\n * will contain the remaining items to fill the line.\n *\n * Calling this with a `newCols` value of `1` will lock up.\n *\n * @param wrappedLines The wrapped lines to evaluate.\n * @param oldCols The columns before resize.\n * @param newCols The columns after resize.\n */\nexport function reflowSmallerGetNewLineLengths(wrappedLines: BufferLine[], oldCols: number, newCols: number): number[] {\n  const newLineLengths: number[] = [];\n  const cellsNeeded = wrappedLines.map((l, i) => getWrappedLineTrimmedLength(wrappedLines, i, oldCols)).reduce((p, c) => p + c);\n\n  // Use srcCol and srcLine to find the new wrapping point, use that to get the cellsAvailable and\n  // linesNeeded\n  let srcCol = 0;\n  let srcLine = 0;\n  let cellsAvailable = 0;\n  while (cellsAvailable < cellsNeeded) {\n    if (cellsNeeded - cellsAvailable < newCols) {\n      // Add the final line and exit the loop\n      newLineLengths.push(cellsNeeded - cellsAvailable);\n      break;\n    }\n    srcCol += newCols;\n    const oldTrimmedLength = getWrappedLineTrimmedLength(wrappedLines, srcLine, oldCols);\n    if (srcCol > oldTrimmedLength) {\n      srcCol -= oldTrimmedLength;\n      srcLine++;\n    }\n    const endsWithWide = wrappedLines[srcLine].getWidth(srcCol - 1) === 2;\n    if (endsWithWide) {\n      srcCol--;\n    }\n    const lineLength = endsWithWide ? newCols - 1 : newCols;\n    newLineLengths.push(lineLength);\n    cellsAvailable += lineLength;\n  }\n\n  return newLineLengths;\n}\n\nexport function getWrappedLineTrimmedLength(lines: BufferLine[], i: number, cols: number): number {\n  // If this is the last row in the wrapped line, get the actual trimmed length\n  if (i === lines.length - 1) {\n    return lines[i].getTrimmedLength();\n  }\n  // Detect whether the following line starts with a wide character and the end of the current line\n  // is null, if so then we can be pretty sure the null character should be excluded from the line\n  // length]\n  const endsInNull = !(lines[i].hasContent(cols - 1)) && lines[i].getWidth(cols - 1) === 1;\n  const followingLineStartsWithWide = lines[i + 1].getWidth(0) === 2;\n  if (endsInNull && followingLineStartsWithWide) {\n    return cols - 1;\n  }\n  return cols;\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IBuffer, IBufferSet } from 'common/buffer/Types';\nimport { IAttributeData } from 'common/Types';\nimport { Buffer } from 'common/buffer/Buffer';\nimport { EventEmitter, IEvent } from 'common/EventEmitter';\nimport { IOptionsService, IBufferService } from 'common/services/Services';\nimport { Disposable } from 'common/Lifecycle';\n\n/**\n * The BufferSet represents the set of two buffers used by xterm terminals (normal and alt) and\n * provides also utilities for working with them.\n */\nexport class BufferSet extends Disposable implements IBufferSet {\n  private _normal!: Buffer;\n  private _alt!: Buffer;\n  private _activeBuffer!: Buffer;\n\n  private _onBufferActivate = this.register(new EventEmitter<{activeBuffer: IBuffer, inactiveBuffer: IBuffer}>());\n  public get onBufferActivate(): IEvent<{activeBuffer: IBuffer, inactiveBuffer: IBuffer}> { return this._onBufferActivate.event; }\n\n  /**\n   * Create a new BufferSet for the given terminal.\n   * @param _terminal - The terminal the BufferSet will belong to\n   */\n  constructor(\n    private readonly _optionsService: IOptionsService,\n    private readonly _bufferService: IBufferService\n  ) {\n    super();\n    this.reset();\n  }\n\n  public reset(): void {\n    this._normal = new Buffer(true, this._optionsService, this._bufferService);\n    this._normal.fillViewportRows();\n\n    // The alt buffer should never have scrollback.\n    // See http://invisible-island.net/xterm/ctlseqs/ctlseqs.html#h2-The-Alternate-Screen-Buffer\n    this._alt = new Buffer(false, this._optionsService, this._bufferService);\n    this._activeBuffer = this._normal;\n    this._onBufferActivate.fire({\n      activeBuffer: this._normal,\n      inactiveBuffer: this._alt\n    });\n\n    this.setupTabStops();\n  }\n\n  /**\n   * Returns the alt Buffer of the BufferSet\n   */\n  public get alt(): Buffer {\n    return this._alt;\n  }\n\n  /**\n   * Returns the normal Buffer of the BufferSet\n   */\n  public get active(): Buffer {\n    return this._activeBuffer;\n  }\n\n  /**\n   * Returns the currently active Buffer of the BufferSet\n   */\n  public get normal(): Buffer {\n    return this._normal;\n  }\n\n  /**\n   * Sets the normal Buffer of the BufferSet as its currently active Buffer\n   */\n  public activateNormalBuffer(): void {\n    if (this._activeBuffer === this._normal) {\n      return;\n    }\n    this._normal.x = this._alt.x;\n    this._normal.y = this._alt.y;\n    // The alt buffer should always be cleared when we switch to the normal\n    // buffer. This frees up memory since the alt buffer should always be new\n    // when activated.\n    this._alt.clear();\n    this._activeBuffer = this._normal;\n    this._onBufferActivate.fire({\n      activeBuffer: this._normal,\n      inactiveBuffer: this._alt\n    });\n  }\n\n  /**\n   * Sets the alt Buffer of the BufferSet as its currently active Buffer\n   */\n  public activateAltBuffer(fillAttr?: IAttributeData): void {\n    if (this._activeBuffer === this._alt) {\n      return;\n    }\n    // Since the alt buffer is always cleared when the normal buffer is\n    // activated, we want to fill it when switching to it.\n    this._alt.fillViewportRows(fillAttr);\n    this._alt.x = this._normal.x;\n    this._alt.y = this._normal.y;\n    this._activeBuffer = this._alt;\n    this._onBufferActivate.fire({\n      activeBuffer: this._alt,\n      inactiveBuffer: this._normal\n    });\n  }\n\n  /**\n   * Resizes both normal and alt buffers, adjusting their data accordingly.\n   * @param newCols The new number of columns.\n   * @param newRows The new number of rows.\n   */\n  public resize(newCols: number, newRows: number): void {\n    this._normal.resize(newCols, newRows);\n    this._alt.resize(newCols, newRows);\n  }\n\n  /**\n   * Setup the tab stops.\n   * @param i The index to start setting up tab stops from.\n   */\n  public setupTabStops(i?: number): void {\n    this._normal.setupTabStops(i);\n    this._alt.setupTabStops(i);\n  }\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { CharData, ICellData, IExtendedAttrs } from 'common/Types';\nimport { stringFromCodePoint } from 'common/input/TextDecoder';\nimport { CHAR_DATA_CHAR_INDEX, CHAR_DATA_WIDTH_INDEX, CHAR_DATA_ATTR_INDEX, Content } from 'common/buffer/Constants';\nimport { AttributeData, ExtendedAttrs } from 'common/buffer/AttributeData';\n\n/**\n * CellData - represents a single Cell in the terminal buffer.\n */\nexport class CellData extends AttributeData implements ICellData {\n  /** Helper to create CellData from CharData. */\n  public static fromCharData(value: CharData): CellData {\n    const obj = new CellData();\n    obj.setFromCharData(value);\n    return obj;\n  }\n  /** Primitives from terminal buffer. */\n  public content = 0;\n  public fg = 0;\n  public bg = 0;\n  public extended: IExtendedAttrs = new ExtendedAttrs();\n  public combinedData = '';\n  /** Whether cell contains a combined string. */\n  public isCombined(): number {\n    return this.content & Content.IS_COMBINED_MASK;\n  }\n  /** Width of the cell. */\n  public getWidth(): number {\n    return this.content >> Content.WIDTH_SHIFT;\n  }\n  /** JS string of the content. */\n  public getChars(): string {\n    if (this.content & Content.IS_COMBINED_MASK) {\n      return this.combinedData;\n    }\n    if (this.content & Content.CODEPOINT_MASK) {\n      return stringFromCodePoint(this.content & Content.CODEPOINT_MASK);\n    }\n    return '';\n  }\n  /**\n   * Codepoint of cell\n   * Note this returns the UTF32 codepoint of single chars,\n   * if content is a combined string it returns the codepoint\n   * of the last char in string to be in line with code in CharData.\n   * */\n  public getCode(): number {\n    return (this.isCombined())\n      ? this.combinedData.charCodeAt(this.combinedData.length - 1)\n      : this.content & Content.CODEPOINT_MASK;\n  }\n  /** Set data from CharData */\n  public setFromCharData(value: CharData): void {\n    this.fg = value[CHAR_DATA_ATTR_INDEX];\n    this.bg = 0;\n    let combined = false;\n    // surrogates and combined strings need special treatment\n    if (value[CHAR_DATA_CHAR_INDEX].length > 2) {\n      combined = true;\n    }\n    else if (value[CHAR_DATA_CHAR_INDEX].length === 2) {\n      const code = value[CHAR_DATA_CHAR_INDEX].charCodeAt(0);\n      // if the 2-char string is a surrogate create single codepoint\n      // everything else is combined\n      if (0xD800 <= code && code <= 0xDBFF) {\n        const second = value[CHAR_DATA_CHAR_INDEX].charCodeAt(1);\n        if (0xDC00 <= second && second <= 0xDFFF) {\n          this.content = ((code - 0xD800) * 0x400 + second - 0xDC00 + 0x10000) | (value[CHAR_DATA_WIDTH_INDEX] << Content.WIDTH_SHIFT);\n        }\n        else {\n          combined = true;\n        }\n      }\n      else {\n        combined = true;\n      }\n    }\n    else {\n      this.content = value[CHAR_DATA_CHAR_INDEX].charCodeAt(0) | (value[CHAR_DATA_WIDTH_INDEX] << Content.WIDTH_SHIFT);\n    }\n    if (combined) {\n      this.combinedData = value[CHAR_DATA_CHAR_INDEX];\n      this.content = Content.IS_COMBINED_MASK | (value[CHAR_DATA_WIDTH_INDEX] << Content.WIDTH_SHIFT);\n    }\n  }\n  /** Get data as CharData. */\n  public getAsCharData(): CharData {\n    return [this.fg, this.getChars(), this.getWidth(), this.getCode()];\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nexport const DEFAULT_COLOR = 256;\nexport const DEFAULT_ATTR = (0 << 18) | (DEFAULT_COLOR << 9) | (256 << 0);\n\nexport const CHAR_DATA_ATTR_INDEX = 0;\nexport const CHAR_DATA_CHAR_INDEX = 1;\nexport const CHAR_DATA_WIDTH_INDEX = 2;\nexport const CHAR_DATA_CODE_INDEX = 3;\n\n/**\n * Null cell - a real empty cell (containing nothing).\n * Note that code should always be 0 for a null cell as\n * several test condition of the buffer line rely on this.\n */\nexport const NULL_CELL_CHAR = '';\nexport const NULL_CELL_WIDTH = 1;\nexport const NULL_CELL_CODE = 0;\n\n/**\n * Whitespace cell.\n * This is meant as a replacement for empty cells when needed\n * during rendering lines to preserve correct aligment.\n */\nexport const WHITESPACE_CELL_CHAR = ' ';\nexport const WHITESPACE_CELL_WIDTH = 1;\nexport const WHITESPACE_CELL_CODE = 32;\n\n/**\n * Bitmasks for accessing data in `content`.\n */\nexport const enum Content {\n  /**\n   * bit 1..21    codepoint, max allowed in UTF32 is 0x10FFFF (21 bits taken)\n   *              read:   `codepoint = content & Content.codepointMask;`\n   *              write:  `content |= codepoint & Content.codepointMask;`\n   *                      shortcut if precondition `codepoint <= 0x10FFFF` is met:\n   *                      `content |= codepoint;`\n   */\n  CODEPOINT_MASK = 0x1FFFFF,\n\n  /**\n   * bit 22       flag indication whether a cell contains combined content\n   *              read:   `isCombined = content & Content.isCombined;`\n   *              set:    `content |= Content.isCombined;`\n   *              clear:  `content &= ~Content.isCombined;`\n   */\n  IS_COMBINED_MASK = 0x200000,  // 1 << 21\n\n  /**\n   * bit 1..22    mask to check whether a cell contains any string data\n   *              we need to check for codepoint and isCombined bits to see\n   *              whether a cell contains anything\n   *              read:   `isEmpty = !(content & Content.hasContent)`\n   */\n  HAS_CONTENT_MASK = 0x3FFFFF,\n\n  /**\n   * bit 23..24   wcwidth value of cell, takes 2 bits (ranges from 0..2)\n   *              read:   `width = (content & Content.widthMask) >> Content.widthShift;`\n   *                      `hasWidth = content & Content.widthMask;`\n   *                      as long as wcwidth is highest value in `content`:\n   *                      `width = content >> Content.widthShift;`\n   *              write:  `content |= (width << Content.widthShift) & Content.widthMask;`\n   *                      shortcut if precondition `0 <= width <= 3` is met:\n   *                      `content |= width << Content.widthShift;`\n   */\n  WIDTH_MASK = 0xC00000,   // 3 << 22\n  WIDTH_SHIFT = 22\n}\n\nexport const enum Attributes {\n  /**\n   * bit 1..8     blue in RGB, color in P256 and P16\n   */\n  BLUE_MASK = 0xFF,\n  BLUE_SHIFT = 0,\n  PCOLOR_MASK = 0xFF,\n  PCOLOR_SHIFT = 0,\n\n  /**\n   * bit 9..16    green in RGB\n   */\n  GREEN_MASK = 0xFF00,\n  GREEN_SHIFT = 8,\n\n  /**\n   * bit 17..24   red in RGB\n   */\n  RED_MASK = 0xFF0000,\n  RED_SHIFT = 16,\n\n  /**\n   * bit 25..26   color mode: DEFAULT (0) | P16 (1) | P256 (2) | RGB (3)\n   */\n  CM_MASK = 0x3000000,\n  CM_DEFAULT = 0,\n  CM_P16 = 0x1000000,\n  CM_P256 = 0x2000000,\n  CM_RGB = 0x3000000,\n\n  /**\n   * bit 1..24  RGB room\n   */\n  RGB_MASK = 0xFFFFFF\n}\n\nexport const enum FgFlags {\n  /**\n   * bit 27..32\n   */\n  INVERSE = 0x4000000,\n  BOLD = 0x8000000,\n  UNDERLINE = 0x10000000,\n  BLINK = 0x20000000,\n  INVISIBLE = 0x40000000,\n  STRIKETHROUGH = 0x80000000,\n}\n\nexport const enum BgFlags {\n  /**\n   * bit 27..32 (upper 3 unused)\n   */\n  ITALIC = 0x4000000,\n  DIM = 0x8000000,\n  HAS_EXTENDED = 0x10000000\n}\n\nexport const enum UnderlineStyle {\n  NONE = 0,\n  SINGLE = 1,\n  DOUBLE = 2,\n  CURLY = 3,\n  DOTTED = 4,\n  DASHED = 5\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { EventEmitter, IEvent } from 'common/EventEmitter';\nimport { Disposable } from 'common/Lifecycle';\nimport { IMarker } from 'common/Types';\n\nexport class Marker extends Disposable implements IMarker {\n  private static _nextId = 1;\n\n  private _id: number = Marker._nextId++;\n  public isDisposed: boolean = false;\n\n  public get id(): number { return this._id; }\n\n  private _onDispose = new EventEmitter<void>();\n  public get onDispose(): IEvent<void> { return this._onDispose.event; }\n\n  constructor(\n    public line: number\n  ) {\n    super();\n  }\n\n  public dispose(): void {\n    if (this.isDisposed) {\n      return;\n    }\n    this.isDisposed = true;\n    this.line = -1;\n    // Emit before super.dispose such that dispose listeners get a change to react\n    this._onDispose.fire();\n    super.dispose();\n  }\n}\n", "/**\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ICharset } from 'common/Types';\n\n/**\n * The character sets supported by the terminal. These enable several languages\n * to be represented within the terminal with only 8-bit encoding. See ISO 2022\n * for a discussion on character sets. Only VT100 character sets are supported.\n */\nexport const CHARSETS: { [key: string]: ICharset | undefined } = {};\n\n/**\n * The default character set, US.\n */\nexport const DEFAULT_CHARSET: ICharset | undefined = CHARSETS['B'];\n\n/**\n * DEC Special Character and Line Drawing Set.\n * Reference: http://vt100.net/docs/vt102-ug/table5-13.html\n * A lot of curses apps use this if they see TERM=xterm.\n * testing: echo -e '\\e(0a\\e(B'\n * The xterm output sometimes seems to conflict with the\n * reference above. xterm seems in line with the reference\n * when running vttest however.\n * The table below now uses xterm's output from vttest.\n */\nCHARSETS['0'] = {\n  '`': '\\u25c6', // '\u25C6'\n  'a': '\\u2592', // '\u2592'\n  'b': '\\u2409', // '\u2409' (HT)\n  'c': '\\u240c', // '\u240C' (FF)\n  'd': '\\u240d', // '\u240D' (CR)\n  'e': '\\u240a', // '\u240A' (LF)\n  'f': '\\u00b0', // '\u00B0'\n  'g': '\\u00b1', // '\u00B1'\n  'h': '\\u2424', // '\u2424' (NL)\n  'i': '\\u240b', // '\u240B' (VT)\n  'j': '\\u2518', // '\u2518'\n  'k': '\\u2510', // '\u2510'\n  'l': '\\u250c', // '\u250C'\n  'm': '\\u2514', // '\u2514'\n  'n': '\\u253c', // '\u253C'\n  'o': '\\u23ba', // '\u23BA'\n  'p': '\\u23bb', // '\u23BB'\n  'q': '\\u2500', // '\u2500'\n  'r': '\\u23bc', // '\u23BC'\n  's': '\\u23bd', // '\u23BD'\n  't': '\\u251c', // '\u251C'\n  'u': '\\u2524', // '\u2524'\n  'v': '\\u2534', // '\u2534'\n  'w': '\\u252c', // '\u252C'\n  'x': '\\u2502', // '\u2502'\n  'y': '\\u2264', // '\u2264'\n  'z': '\\u2265', // '\u2265'\n  '{': '\\u03c0', // '\u03C0'\n  '|': '\\u2260', // '\u2260'\n  '}': '\\u00a3', // '\u00A3'\n  '~': '\\u00b7'  // '\u00B7'\n};\n\n/**\n * British character set\n * ESC (A\n * Reference: http://vt100.net/docs/vt220-rm/table2-5.html\n */\nCHARSETS['A'] = {\n  '#': '\u00A3'\n};\n\n/**\n * United States character set\n * ESC (B\n */\nCHARSETS['B'] = undefined;\n\n/**\n * Dutch character set\n * ESC (4\n * Reference: http://vt100.net/docs/vt220-rm/table2-6.html\n */\nCHARSETS['4'] = {\n  '#': '\u00A3',\n  '@': '\u00BE',\n  '[': 'ij',\n  '\\\\': '\u00BD',\n  ']': '|',\n  '{': '\u00A8',\n  '|': 'f',\n  '}': '\u00BC',\n  '~': '\u00B4'\n};\n\n/**\n * Finnish character set\n * ESC (C or ESC (5\n * Reference: http://vt100.net/docs/vt220-rm/table2-7.html\n */\nCHARSETS['C'] =\nCHARSETS['5'] = {\n  '[': '\u00C4',\n  '\\\\': '\u00D6',\n  ']': '\u00C5',\n  '^': '\u00DC',\n  '`': '\u00E9',\n  '{': '\u00E4',\n  '|': '\u00F6',\n  '}': '\u00E5',\n  '~': '\u00FC'\n};\n\n/**\n * French character set\n * ESC (R\n * Reference: http://vt100.net/docs/vt220-rm/table2-8.html\n */\nCHARSETS['R'] = {\n  '#': '\u00A3',\n  '@': '\u00E0',\n  '[': '\u00B0',\n  '\\\\': '\u00E7',\n  ']': '\u00A7',\n  '{': '\u00E9',\n  '|': '\u00F9',\n  '}': '\u00E8',\n  '~': '\u00A8'\n};\n\n/**\n * French Canadian character set\n * ESC (Q\n * Reference: http://vt100.net/docs/vt220-rm/table2-9.html\n */\nCHARSETS['Q'] = {\n  '@': '\u00E0',\n  '[': '\u00E2',\n  '\\\\': '\u00E7',\n  ']': '\u00EA',\n  '^': '\u00EE',\n  '`': '\u00F4',\n  '{': '\u00E9',\n  '|': '\u00F9',\n  '}': '\u00E8',\n  '~': '\u00FB'\n};\n\n/**\n * German character set\n * ESC (K\n * Reference: http://vt100.net/docs/vt220-rm/table2-10.html\n */\nCHARSETS['K'] = {\n  '@': '\u00A7',\n  '[': '\u00C4',\n  '\\\\': '\u00D6',\n  ']': '\u00DC',\n  '{': '\u00E4',\n  '|': '\u00F6',\n  '}': '\u00FC',\n  '~': '\u00DF'\n};\n\n/**\n * Italian character set\n * ESC (Y\n * Reference: http://vt100.net/docs/vt220-rm/table2-11.html\n */\nCHARSETS['Y'] = {\n  '#': '\u00A3',\n  '@': '\u00A7',\n  '[': '\u00B0',\n  '\\\\': '\u00E7',\n  ']': '\u00E9',\n  '`': '\u00F9',\n  '{': '\u00E0',\n  '|': '\u00F2',\n  '}': '\u00E8',\n  '~': '\u00EC'\n};\n\n/**\n * Norwegian/Danish character set\n * ESC (E or ESC (6\n * Reference: http://vt100.net/docs/vt220-rm/table2-12.html\n */\nCHARSETS['E'] =\nCHARSETS['6'] = {\n  '@': '\u00C4',\n  '[': '\u00C6',\n  '\\\\': '\u00D8',\n  ']': '\u00C5',\n  '^': '\u00DC',\n  '`': '\u00E4',\n  '{': '\u00E6',\n  '|': '\u00F8',\n  '}': '\u00E5',\n  '~': '\u00FC'\n};\n\n/**\n * Spanish character set\n * ESC (Z\n * Reference: http://vt100.net/docs/vt220-rm/table2-13.html\n */\nCHARSETS['Z'] = {\n  '#': '\u00A3',\n  '@': '\u00A7',\n  '[': '\u00A1',\n  '\\\\': '\u00D1',\n  ']': '\u00BF',\n  '{': '\u00B0',\n  '|': '\u00F1',\n  '}': '\u00E7'\n};\n\n/**\n * Swedish character set\n * ESC (H or ESC (7\n * Reference: http://vt100.net/docs/vt220-rm/table2-14.html\n */\nCHARSETS['H'] =\nCHARSETS['7'] = {\n  '@': '\u00C9',\n  '[': '\u00C4',\n  '\\\\': '\u00D6',\n  ']': '\u00C5',\n  '^': '\u00DC',\n  '`': '\u00E9',\n  '{': '\u00E4',\n  '|': '\u00F6',\n  '}': '\u00E5',\n  '~': '\u00FC'\n};\n\n/**\n * Swiss character set\n * ESC (=\n * Reference: http://vt100.net/docs/vt220-rm/table2-15.html\n */\nCHARSETS['='] = {\n  '#': '\u00F9',\n  '@': '\u00E0',\n  '[': '\u00E9',\n  '\\\\': '\u00E7',\n  ']': '\u00EA',\n  '^': '\u00EE',\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  '_': '\u00E8',\n  '`': '\u00F4',\n  '{': '\u00E4',\n  '|': '\u00F6',\n  '}': '\u00FC',\n  '~': '\u00FB'\n};\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\n/**\n * C0 control codes\n * See = https://en.wikipedia.org/wiki/C0_and_C1_control_codes\n */\nexport namespace C0 {\n  /** Null (Caret = ^@, C = \\0) */\n  export const NUL = '\\x00';\n  /** Start of Heading (Caret = ^A) */\n  export const SOH = '\\x01';\n  /** Start of Text (Caret = ^B) */\n  export const STX = '\\x02';\n  /** End of Text (Caret = ^C) */\n  export const ETX = '\\x03';\n  /** End of Transmission (Caret = ^D) */\n  export const EOT = '\\x04';\n  /** Enquiry (Caret = ^E) */\n  export const ENQ = '\\x05';\n  /** Acknowledge (Caret = ^F) */\n  export const ACK = '\\x06';\n  /** Bell (Caret = ^G, C = \\a) */\n  export const BEL = '\\x07';\n  /** Backspace (Caret = ^H, C = \\b) */\n  export const BS  = '\\x08';\n  /** Character Tabulation, Horizontal Tabulation (Caret = ^I, C = \\t) */\n  export const HT  = '\\x09';\n  /** Line Feed (Caret = ^J, C = \\n) */\n  export const LF  = '\\x0a';\n  /** Line Tabulation, Vertical Tabulation (Caret = ^K, C = \\v) */\n  export const VT  = '\\x0b';\n  /** Form Feed (Caret = ^L, C = \\f) */\n  export const FF  = '\\x0c';\n  /** Carriage Return (Caret = ^M, C = \\r) */\n  export const CR  = '\\x0d';\n  /** Shift Out (Caret = ^N) */\n  export const SO  = '\\x0e';\n  /** Shift In (Caret = ^O) */\n  export const SI  = '\\x0f';\n  /** Data Link Escape (Caret = ^P) */\n  export const DLE = '\\x10';\n  /** Device Control One (XON) (Caret = ^Q) */\n  export const DC1 = '\\x11';\n  /** Device Control Two (Caret = ^R) */\n  export const DC2 = '\\x12';\n  /** Device Control Three (XOFF) (Caret = ^S) */\n  export const DC3 = '\\x13';\n  /** Device Control Four (Caret = ^T) */\n  export const DC4 = '\\x14';\n  /** Negative Acknowledge (Caret = ^U) */\n  export const NAK = '\\x15';\n  /** Synchronous Idle (Caret = ^V) */\n  export const SYN = '\\x16';\n  /** End of Transmission Block (Caret = ^W) */\n  export const ETB = '\\x17';\n  /** Cancel (Caret = ^X) */\n  export const CAN = '\\x18';\n  /** End of Medium (Caret = ^Y) */\n  export const EM  = '\\x19';\n  /** Substitute (Caret = ^Z) */\n  export const SUB = '\\x1a';\n  /** Escape (Caret = ^[, C = \\e) */\n  export const ESC = '\\x1b';\n  /** File Separator (Caret = ^\\) */\n  export const FS  = '\\x1c';\n  /** Group Separator (Caret = ^]) */\n  export const GS  = '\\x1d';\n  /** Record Separator (Caret = ^^) */\n  export const RS  = '\\x1e';\n  /** Unit Separator (Caret = ^_) */\n  export const US  = '\\x1f';\n  /** Space */\n  export const SP  = '\\x20';\n  /** Delete (Caret = ^?) */\n  export const DEL = '\\x7f';\n}\n\n/**\n * C1 control codes\n * See = https://en.wikipedia.org/wiki/C0_and_C1_control_codes\n */\nexport namespace C1 {\n  /** padding character */\n  export const PAD = '\\x80';\n  /** High Octet Preset */\n  export const HOP = '\\x81';\n  /** Break Permitted Here */\n  export const BPH = '\\x82';\n  /** No Break Here */\n  export const NBH = '\\x83';\n  /** Index */\n  export const IND = '\\x84';\n  /** Next Line */\n  export const NEL = '\\x85';\n  /** Start of Selected Area */\n  export const SSA = '\\x86';\n  /** End of Selected Area */\n  export const ESA = '\\x87';\n  /** Horizontal Tabulation Set */\n  export const HTS = '\\x88';\n  /** Horizontal Tabulation With Justification */\n  export const HTJ = '\\x89';\n  /** Vertical Tabulation Set */\n  export const VTS = '\\x8a';\n  /** Partial Line Down */\n  export const PLD = '\\x8b';\n  /** Partial Line Up */\n  export const PLU = '\\x8c';\n  /** Reverse Index */\n  export const RI = '\\x8d';\n  /** Single-Shift 2 */\n  export const SS2 = '\\x8e';\n  /** Single-Shift 3 */\n  export const SS3 = '\\x8f';\n  /** Device Control String */\n  export const DCS = '\\x90';\n  /** Private Use 1 */\n  export const PU1 = '\\x91';\n  /** Private Use 2 */\n  export const PU2 = '\\x92';\n  /** Set Transmit State */\n  export const STS = '\\x93';\n  /** Destructive backspace, intended to eliminate ambiguity about meaning of BS. */\n  export const CCH = '\\x94';\n  /** Message Waiting */\n  export const MW = '\\x95';\n  /** Start of Protected Area */\n  export const SPA = '\\x96';\n  /** End of Protected Area */\n  export const EPA = '\\x97';\n  /** Start of String */\n  export const SOS = '\\x98';\n  /** Single Graphic Character Introducer */\n  export const SGCI = '\\x99';\n  /** Single Character Introducer */\n  export const SCI = '\\x9a';\n  /** Control Sequence Introducer */\n  export const CSI = '\\x9b';\n  /** String Terminator */\n  export const ST = '\\x9c';\n  /** Operating System Command */\n  export const OSC = '\\x9d';\n  /** Privacy Message */\n  export const PM = '\\x9e';\n  /** Application Program Command */\n  export const APC = '\\x9f';\n}\n", "/**\n * Copyright (c) 2014 The xterm.js authors. All rights reserved.\n * Copyright (c) 2012-2013, Christopher Jeffrey (MIT License)\n * @license MIT\n */\n\nimport { IKeyboardEvent, IKeyboardResult, KeyboardResultType } from 'common/Types';\nimport { C0 } from 'common/data/EscapeSequences';\n\n// reg + shift key mappings for digits and special chars\nconst KEYCODE_KEY_MAPPINGS: { [key: number]: [string, string]} = {\n  // digits 0-9\n  48: ['0', ')'],\n  49: ['1', '!'],\n  50: ['2', '@'],\n  51: ['3', '#'],\n  52: ['4', '$'],\n  53: ['5', '%'],\n  54: ['6', '^'],\n  55: ['7', '&'],\n  56: ['8', '*'],\n  57: ['9', '('],\n\n  // special chars\n  186: [';', ':'],\n  187: ['=', '+'],\n  188: [',', '<'],\n  189: ['-', '_'],\n  190: ['.', '>'],\n  191: ['/', '?'],\n  192: ['`', '~'],\n  219: ['[', '{'],\n  220: ['\\\\', '|'],\n  221: [']', '}'],\n  222: ['\\'', '\"']\n};\n\nexport function evaluateKeyboardEvent(\n  ev: IKeyboardEvent,\n  applicationCursorMode: boolean,\n  isMac: boolean,\n  macOptionIsMeta: boolean\n): IKeyboardResult {\n  const result: IKeyboardResult = {\n    type: KeyboardResultType.SEND_KEY,\n    // Whether to cancel event propagation (NOTE: this may not be needed since the event is\n    // canceled at the end of keyDown\n    cancel: false,\n    // The new key even to emit\n    key: undefined\n  };\n  const modifiers = (ev.shiftKey ? 1 : 0) | (ev.altKey ? 2 : 0) | (ev.ctrlKey ? 4 : 0) | (ev.metaKey ? 8 : 0);\n  switch (ev.keyCode) {\n    case 0:\n      if (ev.key === 'UIKeyInputUpArrow') {\n        if (applicationCursorMode) {\n          result.key = C0.ESC + 'OA';\n        } else {\n          result.key = C0.ESC + '[A';\n        }\n      }\n      else if (ev.key === 'UIKeyInputLeftArrow') {\n        if (applicationCursorMode) {\n          result.key = C0.ESC + 'OD';\n        } else {\n          result.key = C0.ESC + '[D';\n        }\n      }\n      else if (ev.key === 'UIKeyInputRightArrow') {\n        if (applicationCursorMode) {\n          result.key = C0.ESC + 'OC';\n        } else {\n          result.key = C0.ESC + '[C';\n        }\n      }\n      else if (ev.key === 'UIKeyInputDownArrow') {\n        if (applicationCursorMode) {\n          result.key = C0.ESC + 'OB';\n        } else {\n          result.key = C0.ESC + '[B';\n        }\n      }\n      break;\n    case 8:\n      // backspace\n      if (ev.shiftKey) {\n        result.key = C0.BS; // ^H\n        break;\n      } else if (ev.altKey) {\n        result.key = C0.ESC + C0.DEL; // \\e ^?\n        break;\n      }\n      result.key = C0.DEL; // ^?\n      break;\n    case 9:\n      // tab\n      if (ev.shiftKey) {\n        result.key = C0.ESC + '[Z';\n        break;\n      }\n      result.key = C0.HT;\n      result.cancel = true;\n      break;\n    case 13:\n      // return/enter\n      result.key = ev.altKey ? C0.ESC + C0.CR : C0.CR;\n      result.cancel = true;\n      break;\n    case 27:\n      // escape\n      result.key = C0.ESC;\n      if (ev.altKey) {\n        result.key = C0.ESC + C0.ESC;\n      }\n      result.cancel = true;\n      break;\n    case 37:\n      // left-arrow\n      if (ev.metaKey) {\n        break;\n      }\n      if (modifiers) {\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'D';\n        // HACK: Make Alt + left-arrow behave like Ctrl + left-arrow: move one word backwards\n        // http://unix.stackexchange.com/a/108106\n        // macOS uses different escape sequences than linux\n        if (result.key === C0.ESC + '[1;3D') {\n          result.key = C0.ESC + (isMac ? 'b' : '[1;5D');\n        }\n      } else if (applicationCursorMode) {\n        result.key = C0.ESC + 'OD';\n      } else {\n        result.key = C0.ESC + '[D';\n      }\n      break;\n    case 39:\n      // right-arrow\n      if (ev.metaKey) {\n        break;\n      }\n      if (modifiers) {\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'C';\n        // HACK: Make Alt + right-arrow behave like Ctrl + right-arrow: move one word forward\n        // http://unix.stackexchange.com/a/108106\n        // macOS uses different escape sequences than linux\n        if (result.key === C0.ESC + '[1;3C') {\n          result.key = C0.ESC + (isMac ? 'f' : '[1;5C');\n        }\n      } else if (applicationCursorMode) {\n        result.key = C0.ESC + 'OC';\n      } else {\n        result.key = C0.ESC + '[C';\n      }\n      break;\n    case 38:\n      // up-arrow\n      if (ev.metaKey) {\n        break;\n      }\n      if (modifiers) {\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'A';\n        // HACK: Make Alt + up-arrow behave like Ctrl + up-arrow\n        // http://unix.stackexchange.com/a/108106\n        // macOS uses different escape sequences than linux\n        if (!isMac && result.key === C0.ESC + '[1;3A') {\n          result.key = C0.ESC + '[1;5A';\n        }\n      } else if (applicationCursorMode) {\n        result.key = C0.ESC + 'OA';\n      } else {\n        result.key = C0.ESC + '[A';\n      }\n      break;\n    case 40:\n      // down-arrow\n      if (ev.metaKey) {\n        break;\n      }\n      if (modifiers) {\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'B';\n        // HACK: Make Alt + down-arrow behave like Ctrl + down-arrow\n        // http://unix.stackexchange.com/a/108106\n        // macOS uses different escape sequences than linux\n        if (!isMac && result.key === C0.ESC + '[1;3B') {\n          result.key = C0.ESC + '[1;5B';\n        }\n      } else if (applicationCursorMode) {\n        result.key = C0.ESC + 'OB';\n      } else {\n        result.key = C0.ESC + '[B';\n      }\n      break;\n    case 45:\n      // insert\n      if (!ev.shiftKey && !ev.ctrlKey) {\n        // <Ctrl> or <Shift> + <Insert> are used to\n        // copy-paste on some systems.\n        result.key = C0.ESC + '[2~';\n      }\n      break;\n    case 46:\n      // delete\n      if (modifiers) {\n        result.key = C0.ESC + '[3;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[3~';\n      }\n      break;\n    case 36:\n      // home\n      if (modifiers) {\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'H';\n      } else if (applicationCursorMode) {\n        result.key = C0.ESC + 'OH';\n      } else {\n        result.key = C0.ESC + '[H';\n      }\n      break;\n    case 35:\n      // end\n      if (modifiers) {\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'F';\n      } else if (applicationCursorMode) {\n        result.key = C0.ESC + 'OF';\n      } else {\n        result.key = C0.ESC + '[F';\n      }\n      break;\n    case 33:\n      // page up\n      if (ev.shiftKey) {\n        result.type = KeyboardResultType.PAGE_UP;\n      } else {\n        result.key = C0.ESC + '[5~';\n      }\n      break;\n    case 34:\n      // page down\n      if (ev.shiftKey) {\n        result.type = KeyboardResultType.PAGE_DOWN;\n      } else {\n        result.key = C0.ESC + '[6~';\n      }\n      break;\n    case 112:\n      // F1-F12\n      if (modifiers) {\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'P';\n      } else {\n        result.key = C0.ESC + 'OP';\n      }\n      break;\n    case 113:\n      if (modifiers) {\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'Q';\n      } else {\n        result.key = C0.ESC + 'OQ';\n      }\n      break;\n    case 114:\n      if (modifiers) {\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'R';\n      } else {\n        result.key = C0.ESC + 'OR';\n      }\n      break;\n    case 115:\n      if (modifiers) {\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'S';\n      } else {\n        result.key = C0.ESC + 'OS';\n      }\n      break;\n    case 116:\n      if (modifiers) {\n        result.key = C0.ESC + '[15;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[15~';\n      }\n      break;\n    case 117:\n      if (modifiers) {\n        result.key = C0.ESC + '[17;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[17~';\n      }\n      break;\n    case 118:\n      if (modifiers) {\n        result.key = C0.ESC + '[18;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[18~';\n      }\n      break;\n    case 119:\n      if (modifiers) {\n        result.key = C0.ESC + '[19;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[19~';\n      }\n      break;\n    case 120:\n      if (modifiers) {\n        result.key = C0.ESC + '[20;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[20~';\n      }\n      break;\n    case 121:\n      if (modifiers) {\n        result.key = C0.ESC + '[21;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[21~';\n      }\n      break;\n    case 122:\n      if (modifiers) {\n        result.key = C0.ESC + '[23;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[23~';\n      }\n      break;\n    case 123:\n      if (modifiers) {\n        result.key = C0.ESC + '[24;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[24~';\n      }\n      break;\n    default:\n      // a-z and space\n      if (ev.ctrlKey && !ev.shiftKey && !ev.altKey && !ev.metaKey) {\n        if (ev.keyCode >= 65 && ev.keyCode <= 90) {\n          result.key = String.fromCharCode(ev.keyCode - 64);\n        } else if (ev.keyCode === 32) {\n          result.key = C0.NUL;\n        } else if (ev.keyCode >= 51 && ev.keyCode <= 55) {\n          // escape, file sep, group sep, record sep, unit sep\n          result.key = String.fromCharCode(ev.keyCode - 51 + 27);\n        } else if (ev.keyCode === 56) {\n          result.key = C0.DEL;\n        } else if (ev.keyCode === 219) {\n          result.key = C0.ESC;\n        } else if (ev.keyCode === 220) {\n          result.key = C0.FS;\n        } else if (ev.keyCode === 221) {\n          result.key = C0.GS;\n        }\n      } else if ((!isMac || macOptionIsMeta) && ev.altKey && !ev.metaKey) {\n        // On macOS this is a third level shift when !macOptionIsMeta. Use <Esc> instead.\n        const keyMapping = KEYCODE_KEY_MAPPINGS[ev.keyCode];\n        const key = keyMapping?.[!ev.shiftKey ? 0 : 1];\n        if (key) {\n          result.key = C0.ESC + key;\n        } else if (ev.keyCode >= 65 && ev.keyCode <= 90) {\n          const keyCode = ev.ctrlKey ? ev.keyCode - 64 : ev.keyCode + 32;\n          result.key = C0.ESC + String.fromCharCode(keyCode);\n        }\n      } else if (isMac && !ev.altKey && !ev.ctrlKey && !ev.shiftKey && ev.metaKey) {\n        if (ev.keyCode === 65) { // cmd + a\n          result.type = KeyboardResultType.SELECT_ALL;\n        }\n      } else if (ev.key && !ev.ctrlKey && !ev.altKey && !ev.metaKey && ev.keyCode >= 48 && ev.key.length === 1) {\n        // Include only keys that that result in a _single_ character; don't include num lock, volume up, etc.\n        result.key = ev.key;\n      } else if (ev.key && ev.ctrlKey) {\n        if (ev.key === '_') { // ^_\n          result.key = C0.US;\n        }\n      }\n      break;\n  }\n\n  return result;\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\n/**\n * Polyfill - Convert UTF32 codepoint into JS string.\n * Note: The built-in String.fromCodePoint happens to be much slower\n *       due to additional sanity checks. We can avoid them since\n *       we always operate on legal UTF32 (granted by the input decoders)\n *       and use this faster version instead.\n */\nexport function stringFromCodePoint(codePoint: number): string {\n  if (codePoint > 0xFFFF) {\n    codePoint -= 0x10000;\n    return String.fromCharCode((codePoint >> 10) + 0xD800) + String.fromCharCode((codePoint % 0x400) + 0xDC00);\n  }\n  return String.fromCharCode(codePoint);\n}\n\n/**\n * Convert UTF32 char codes into JS string.\n * Basically the same as `stringFromCodePoint` but for multiple codepoints\n * in a loop (which is a lot faster).\n */\nexport function utf32ToString(data: Uint32Array, start: number = 0, end: number = data.length): string {\n  let result = '';\n  for (let i = start; i < end; ++i) {\n    let codepoint = data[i];\n    if (codepoint > 0xFFFF) {\n      // JS strings are encoded as UTF16, thus a non BMP codepoint gets converted into a surrogate pair\n      // conversion rules:\n      //  - subtract 0x10000 from code point, leaving a 20 bit number\n      //  - add high 10 bits to 0xD800  --> first surrogate\n      //  - add low 10 bits to 0xDC00   --> second surrogate\n      codepoint -= 0x10000;\n      result += String.fromCharCode((codepoint >> 10) + 0xD800) + String.fromCharCode((codepoint % 0x400) + 0xDC00);\n    } else {\n      result += String.fromCharCode(codepoint);\n    }\n  }\n  return result;\n}\n\n/**\n * StringToUtf32 - decodes UTF16 sequences into UTF32 codepoints.\n * To keep the decoder in line with JS strings it handles single surrogates as UCS2.\n */\nexport class StringToUtf32 {\n  private _interim: number = 0;\n\n  /**\n   * Clears interim and resets decoder to clean state.\n   */\n  public clear(): void {\n    this._interim = 0;\n  }\n\n  /**\n   * Decode JS string to UTF32 codepoints.\n   * The methods assumes stream input and will store partly transmitted\n   * surrogate pairs and decode them with the next data chunk.\n   * Note: The method does no bound checks for target, therefore make sure\n   * the provided input data does not exceed the size of `target`.\n   * Returns the number of written codepoints in `target`.\n   */\n  public decode(input: string, target: Uint32Array): number {\n    const length = input.length;\n\n    if (!length) {\n      return 0;\n    }\n\n    let size = 0;\n    let startPos = 0;\n\n    // handle leftover surrogate high\n    if (this._interim) {\n      const second = input.charCodeAt(startPos++);\n      if (0xDC00 <= second && second <= 0xDFFF) {\n        target[size++] = (this._interim - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n      } else {\n        // illegal codepoint (USC2 handling)\n        target[size++] = this._interim;\n        target[size++] = second;\n      }\n      this._interim = 0;\n    }\n\n    for (let i = startPos; i < length; ++i) {\n      const code = input.charCodeAt(i);\n      // surrogate pair first\n      if (0xD800 <= code && code <= 0xDBFF) {\n        if (++i >= length) {\n          this._interim = code;\n          return size;\n        }\n        const second = input.charCodeAt(i);\n        if (0xDC00 <= second && second <= 0xDFFF) {\n          target[size++] = (code - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n        } else {\n          // illegal codepoint (USC2 handling)\n          target[size++] = code;\n          target[size++] = second;\n        }\n        continue;\n      }\n      if (code === 0xFEFF) {\n        // BOM\n        continue;\n      }\n      target[size++] = code;\n    }\n    return size;\n  }\n}\n\n/**\n * Utf8Decoder - decodes UTF8 byte sequences into UTF32 codepoints.\n */\nexport class Utf8ToUtf32 {\n  public interim: Uint8Array = new Uint8Array(3);\n\n  /**\n   * Clears interim bytes and resets decoder to clean state.\n   */\n  public clear(): void {\n    this.interim.fill(0);\n  }\n\n  /**\n   * Decodes UTF8 byte sequences in `input` to UTF32 codepoints in `target`.\n   * The methods assumes stream input and will store partly transmitted bytes\n   * and decode them with the next data chunk.\n   * Note: The method does no bound checks for target, therefore make sure\n   * the provided data chunk does not exceed the size of `target`.\n   * Returns the number of written codepoints in `target`.\n   */\n  public decode(input: Uint8Array, target: Uint32Array): number {\n    const length = input.length;\n\n    if (!length) {\n      return 0;\n    }\n\n    let size = 0;\n    let byte1: number;\n    let byte2: number;\n    let byte3: number;\n    let byte4: number;\n    let codepoint = 0;\n    let startPos = 0;\n\n    // handle leftover bytes\n    if (this.interim[0]) {\n      let discardInterim = false;\n      let cp = this.interim[0];\n      cp &= ((((cp & 0xE0) === 0xC0)) ? 0x1F : (((cp & 0xF0) === 0xE0)) ? 0x0F : 0x07);\n      let pos = 0;\n      let tmp: number;\n      while ((tmp = this.interim[++pos] & 0x3F) && pos < 4) {\n        cp <<= 6;\n        cp |= tmp;\n      }\n      // missing bytes - read ahead from input\n      const type = (((this.interim[0] & 0xE0) === 0xC0)) ? 2 : (((this.interim[0] & 0xF0) === 0xE0)) ? 3 : 4;\n      const missing = type - pos;\n      while (startPos < missing) {\n        if (startPos >= length) {\n          return 0;\n        }\n        tmp = input[startPos++];\n        if ((tmp & 0xC0) !== 0x80) {\n          // wrong continuation, discard interim bytes completely\n          startPos--;\n          discardInterim = true;\n          break;\n        } else {\n          // need to save so we can continue short inputs in next call\n          this.interim[pos++] = tmp;\n          cp <<= 6;\n          cp |= tmp & 0x3F;\n        }\n      }\n      if (!discardInterim) {\n        // final test is type dependent\n        if (type === 2) {\n          if (cp < 0x80) {\n            // wrong starter byte\n            startPos--;\n          } else {\n            target[size++] = cp;\n          }\n        } else if (type === 3) {\n          if (cp < 0x0800 || (cp >= 0xD800 && cp <= 0xDFFF) || cp === 0xFEFF) {\n            // illegal codepoint or BOM\n          } else {\n            target[size++] = cp;\n          }\n        } else {\n          if (cp < 0x010000 || cp > 0x10FFFF) {\n            // illegal codepoint\n          } else {\n            target[size++] = cp;\n          }\n        }\n      }\n      this.interim.fill(0);\n    }\n\n    // loop through input\n    const fourStop = length - 4;\n    let i = startPos;\n    while (i < length) {\n      /**\n       * ASCII shortcut with loop unrolled to 4 consecutive ASCII chars.\n       * This is a compromise between speed gain for ASCII\n       * and penalty for non ASCII:\n       * For best ASCII performance the char should be stored directly into target,\n       * but even a single attempt to write to target and compare afterwards\n       * penalizes non ASCII really bad (-50%), thus we load the char into byteX first,\n       * which reduces ASCII performance by ~15%.\n       * This trial for ASCII reduces non ASCII performance by ~10% which seems acceptible\n       * compared to the gains.\n       * Note that this optimization only takes place for 4 consecutive ASCII chars,\n       * for any shorter it bails out. Worst case - all 4 bytes being read but\n       * thrown away due to the last being a non ASCII char (-10% performance).\n       */\n      while (i < fourStop\n        && !((byte1 = input[i]) & 0x80)\n        && !((byte2 = input[i + 1]) & 0x80)\n        && !((byte3 = input[i + 2]) & 0x80)\n        && !((byte4 = input[i + 3]) & 0x80))\n      {\n        target[size++] = byte1;\n        target[size++] = byte2;\n        target[size++] = byte3;\n        target[size++] = byte4;\n        i += 4;\n      }\n\n      // reread byte1\n      byte1 = input[i++];\n\n      // 1 byte\n      if (byte1 < 0x80) {\n        target[size++] = byte1;\n\n        // 2 bytes\n      } else if ((byte1 & 0xE0) === 0xC0) {\n        if (i >= length) {\n          this.interim[0] = byte1;\n          return size;\n        }\n        byte2 = input[i++];\n        if ((byte2 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        codepoint = (byte1 & 0x1F) << 6 | (byte2 & 0x3F);\n        if (codepoint < 0x80) {\n          // wrong starter byte\n          i--;\n          continue;\n        }\n        target[size++] = codepoint;\n\n        // 3 bytes\n      } else if ((byte1 & 0xF0) === 0xE0) {\n        if (i >= length) {\n          this.interim[0] = byte1;\n          return size;\n        }\n        byte2 = input[i++];\n        if ((byte2 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        if (i >= length) {\n          this.interim[0] = byte1;\n          this.interim[1] = byte2;\n          return size;\n        }\n        byte3 = input[i++];\n        if ((byte3 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        codepoint = (byte1 & 0x0F) << 12 | (byte2 & 0x3F) << 6 | (byte3 & 0x3F);\n        if (codepoint < 0x0800 || (codepoint >= 0xD800 && codepoint <= 0xDFFF) || codepoint === 0xFEFF) {\n          // illegal codepoint or BOM, no i-- here\n          continue;\n        }\n        target[size++] = codepoint;\n\n        // 4 bytes\n      } else if ((byte1 & 0xF8) === 0xF0) {\n        if (i >= length) {\n          this.interim[0] = byte1;\n          return size;\n        }\n        byte2 = input[i++];\n        if ((byte2 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        if (i >= length) {\n          this.interim[0] = byte1;\n          this.interim[1] = byte2;\n          return size;\n        }\n        byte3 = input[i++];\n        if ((byte3 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        if (i >= length) {\n          this.interim[0] = byte1;\n          this.interim[1] = byte2;\n          this.interim[2] = byte3;\n          return size;\n        }\n        byte4 = input[i++];\n        if ((byte4 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        codepoint = (byte1 & 0x07) << 18 | (byte2 & 0x3F) << 12 | (byte3 & 0x3F) << 6 | (byte4 & 0x3F);\n        if (codepoint < 0x010000 || codepoint > 0x10FFFF) {\n          // illegal codepoint, no i-- here\n          continue;\n        }\n        target[size++] = codepoint;\n      } else {\n        // illegal byte, just skip\n      }\n    }\n    return size;\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\nimport { IUnicodeVersionProvider } from 'common/services/Services';\nimport { fill } from 'common/TypedArrayUtils';\n\ntype CharWidth = 0 | 1 | 2;\n\nconst BMP_COMBINING = [\n  [0x0300, 0x036F], [0x0483, 0x0486], [0x0488, 0x0489],\n  [0x0591, 0x05BD], [0x05BF, 0x05BF], [0x05C1, 0x05C2],\n  [0x05C4, 0x05C5], [0x05C7, 0x05C7], [0x0600, 0x0603],\n  [0x0610, 0x0615], [0x064B, 0x065E], [0x0670, 0x0670],\n  [0x06D6, 0x06E4], [0x06E7, 0x06E8], [0x06EA, 0x06ED],\n  [0x070F, 0x070F], [0x0711, 0x0711], [0x0730, 0x074A],\n  [0x07A6, 0x07B0], [0x07EB, 0x07F3], [0x0901, 0x0902],\n  [0x093C, 0x093C], [0x0941, 0x0948], [0x094D, 0x094D],\n  [0x0951, 0x0954], [0x0962, 0x0963], [0x0981, 0x0981],\n  [0x09BC, 0x09BC], [0x09C1, 0x09C4], [0x09CD, 0x09CD],\n  [0x09E2, 0x09E3], [0x0A01, 0x0A02], [0x0A3C, 0x0A3C],\n  [0x0A41, 0x0A42], [0x0A47, 0x0A48], [0x0A4B, 0x0A4D],\n  [0x0A70, 0x0A71], [0x0A81, 0x0A82], [0x0ABC, 0x0ABC],\n  [0x0AC1, 0x0AC5], [0x0AC7, 0x0AC8], [0x0ACD, 0x0ACD],\n  [0x0AE2, 0x0AE3], [0x0B01, 0x0B01], [0x0B3C, 0x0B3C],\n  [0x0B3F, 0x0B3F], [0x0B41, 0x0B43], [0x0B4D, 0x0B4D],\n  [0x0B56, 0x0B56], [0x0B82, 0x0B82], [0x0BC0, 0x0BC0],\n  [0x0BCD, 0x0BCD], [0x0C3E, 0x0C40], [0x0C46, 0x0C48],\n  [0x0C4A, 0x0C4D], [0x0C55, 0x0C56], [0x0CBC, 0x0CBC],\n  [0x0CBF, 0x0CBF], [0x0CC6, 0x0CC6], [0x0CCC, 0x0CCD],\n  [0x0CE2, 0x0CE3], [0x0D41, 0x0D43], [0x0D4D, 0x0D4D],\n  [0x0DCA, 0x0DCA], [0x0DD2, 0x0DD4], [0x0DD6, 0x0DD6],\n  [0x0E31, 0x0E31], [0x0E34, 0x0E3A], [0x0E47, 0x0E4E],\n  [0x0EB1, 0x0EB1], [0x0EB4, 0x0EB9], [0x0EBB, 0x0EBC],\n  [0x0EC8, 0x0ECD], [0x0F18, 0x0F19], [0x0F35, 0x0F35],\n  [0x0F37, 0x0F37], [0x0F39, 0x0F39], [0x0F71, 0x0F7E],\n  [0x0F80, 0x0F84], [0x0F86, 0x0F87], [0x0F90, 0x0F97],\n  [0x0F99, 0x0FBC], [0x0FC6, 0x0FC6], [0x102D, 0x1030],\n  [0x1032, 0x1032], [0x1036, 0x1037], [0x1039, 0x1039],\n  [0x1058, 0x1059], [0x1160, 0x11FF], [0x135F, 0x135F],\n  [0x1712, 0x1714], [0x1732, 0x1734], [0x1752, 0x1753],\n  [0x1772, 0x1773], [0x17B4, 0x17B5], [0x17B7, 0x17BD],\n  [0x17C6, 0x17C6], [0x17C9, 0x17D3], [0x17DD, 0x17DD],\n  [0x180B, 0x180D], [0x18A9, 0x18A9], [0x1920, 0x1922],\n  [0x1927, 0x1928], [0x1932, 0x1932], [0x1939, 0x193B],\n  [0x1A17, 0x1A18], [0x1B00, 0x1B03], [0x1B34, 0x1B34],\n  [0x1B36, 0x1B3A], [0x1B3C, 0x1B3C], [0x1B42, 0x1B42],\n  [0x1B6B, 0x1B73], [0x1DC0, 0x1DCA], [0x1DFE, 0x1DFF],\n  [0x200B, 0x200F], [0x202A, 0x202E], [0x2060, 0x2063],\n  [0x206A, 0x206F], [0x20D0, 0x20EF], [0x302A, 0x302F],\n  [0x3099, 0x309A], [0xA806, 0xA806], [0xA80B, 0xA80B],\n  [0xA825, 0xA826], [0xFB1E, 0xFB1E], [0xFE00, 0xFE0F],\n  [0xFE20, 0xFE23], [0xFEFF, 0xFEFF], [0xFFF9, 0xFFFB]\n];\nconst HIGH_COMBINING = [\n  [0x10A01, 0x10A03], [0x10A05, 0x10A06], [0x10A0C, 0x10A0F],\n  [0x10A38, 0x10A3A], [0x10A3F, 0x10A3F], [0x1D167, 0x1D169],\n  [0x1D173, 0x1D182], [0x1D185, 0x1D18B], [0x1D1AA, 0x1D1AD],\n  [0x1D242, 0x1D244], [0xE0001, 0xE0001], [0xE0020, 0xE007F],\n  [0xE0100, 0xE01EF]\n];\n\n// BMP lookup table, lazy initialized during first addon loading\nlet table: Uint8Array;\n\nfunction bisearch(ucs: number, data: number[][]): boolean {\n  let min = 0;\n  let max = data.length - 1;\n  let mid;\n  if (ucs < data[0][0] || ucs > data[max][1]) {\n    return false;\n  }\n  while (max >= min) {\n    mid = (min + max) >> 1;\n    if (ucs > data[mid][1]) {\n      min = mid + 1;\n    } else if (ucs < data[mid][0]) {\n      max = mid - 1;\n    } else {\n      return true;\n    }\n  }\n  return false;\n}\n\nexport class UnicodeV6 implements IUnicodeVersionProvider {\n  public readonly version = '6';\n\n  constructor() {\n    // init lookup table once\n    if (!table) {\n      table = new Uint8Array(65536);\n      fill(table, 1);\n      table[0] = 0;\n      // control chars\n      fill(table, 0, 1, 32);\n      fill(table, 0, 0x7f, 0xa0);\n\n      // apply wide char rules first\n      // wide chars\n      fill(table, 2, 0x1100, 0x1160);\n      table[0x2329] = 2;\n      table[0x232a] = 2;\n      fill(table, 2, 0x2e80, 0xa4d0);\n      table[0x303f] = 1;  // wrongly in last line\n\n      fill(table, 2, 0xac00, 0xd7a4);\n      fill(table, 2, 0xf900, 0xfb00);\n      fill(table, 2, 0xfe10, 0xfe1a);\n      fill(table, 2, 0xfe30, 0xfe70);\n      fill(table, 2, 0xff00, 0xff61);\n      fill(table, 2, 0xffe0, 0xffe7);\n\n      // apply combining last to ensure we overwrite\n      // wrongly wide set chars:\n      //    the original algo evals combining first and falls\n      //    through to wide check so we simply do here the opposite\n      // combining 0\n      for (let r = 0; r < BMP_COMBINING.length; ++r) {\n        fill(table, 0, BMP_COMBINING[r][0], BMP_COMBINING[r][1] + 1);\n      }\n    }\n  }\n\n  public wcwidth(num: number): CharWidth {\n    if (num < 32) return 0;\n    if (num < 127) return 1;\n    if (num < 65536) return table[num] as CharWidth;\n    if (bisearch(num, HIGH_COMBINING)) return 0;\n    if ((num >= 0x20000 && num <= 0x2fffd) || (num >= 0x30000 && num <= 0x3fffd)) return 2;\n    return 1;\n  }\n}\n", "\n/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\ndeclare const setTimeout: (handler: () => void, timeout?: number) => void;\n\n/**\n * Safety watermark to avoid memory exhaustion and browser engine crash on fast data input.\n * Enable flow control to avoid this limit and make sure that your backend correctly\n * propagates this to the underlying pty. (see docs for further instructions)\n * Since this limit is meant as a safety parachute to prevent browser crashs,\n * it is set to a very high number. Typically xterm.js gets unresponsive with\n * a 100 times lower number (>500 kB).\n */\nconst DISCARD_WATERMARK = 50000000; // ~50 MB\n\n/**\n * The max number of ms to spend on writes before allowing the renderer to\n * catch up with a 0ms setTimeout. A value of < 33 to keep us close to\n * 30fps, and a value of < 16 to try to run at 60fps. Of course, the real FPS\n * depends on the time it takes for the renderer to draw the frame.\n */\nconst WRITE_TIMEOUT_MS = 12;\n\n/**\n * Threshold of max held chunks in the write buffer, that were already processed.\n * This is a tradeoff between extensive write buffer shifts (bad runtime) and high\n * memory consumption by data thats not used anymore.\n */\nconst WRITE_BUFFER_LENGTH_THRESHOLD = 50;\n\n// queueMicrotask polyfill for nodejs < v11\nconst qmt: (cb: () => void) => void = (typeof queueMicrotask === 'undefined')\n  ? (cb: () => void) => { Promise.resolve().then(cb); }\n  : queueMicrotask;\n\n\nexport class WriteBuffer {\n  private _writeBuffer: (string | Uint8Array)[] = [];\n  private _callbacks: ((() => void) | undefined)[] = [];\n  private _pendingData = 0;\n  private _bufferOffset = 0;\n  private _isSyncWriting = false;\n  private _syncCalls = 0;\n\n  constructor(private _action: (data: string | Uint8Array, promiseResult?: boolean) => void | Promise<boolean>) { }\n\n  /**\n   * @deprecated Unreliable, to be removed soon.\n   */\n  public writeSync(data: string | Uint8Array, maxSubsequentCalls?: number): void {\n    // stop writeSync recursions with maxSubsequentCalls argument\n    // This is dangerous to use as it will lose the current data chunk\n    // and return immediately.\n    if (maxSubsequentCalls !== undefined && this._syncCalls > maxSubsequentCalls) {\n      // comment next line if a whole loop block should only contain x `writeSync` calls\n      // (total flat vs. deep nested limit)\n      this._syncCalls = 0;\n      return;\n    }\n    // append chunk to buffer\n    this._pendingData += data.length;\n    this._writeBuffer.push(data);\n    this._callbacks.push(undefined);\n\n    // increase recursion counter\n    this._syncCalls++;\n    // exit early if another writeSync loop is active\n    if (this._isSyncWriting) {\n      return;\n    }\n    this._isSyncWriting = true;\n\n    // force sync processing on pending data chunks to avoid in-band data scrambling\n    // does the same as innerWrite but without event loop\n    // we have to do it here as single loop steps to not corrupt loop subject\n    // by another writeSync call triggered from _action\n    let chunk: string | Uint8Array | undefined;\n    while (chunk = this._writeBuffer.shift()) {\n      this._action(chunk);\n      const cb = this._callbacks.shift();\n      if (cb) cb();\n    }\n    // reset to avoid reprocessing of chunks with scheduled innerWrite call\n    // stopping scheduled innerWrite by offset > length condition\n    this._pendingData = 0;\n    this._bufferOffset = 0x7FFFFFFF;\n\n    // allow another writeSync to loop\n    this._isSyncWriting = false;\n    this._syncCalls = 0;\n  }\n\n  public write(data: string | Uint8Array, callback?: () => void): void {\n    if (this._pendingData > DISCARD_WATERMARK) {\n      throw new Error('write data discarded, use flow control to avoid losing data');\n    }\n\n    // schedule chunk processing for next event loop run\n    if (!this._writeBuffer.length) {\n      this._bufferOffset = 0;\n      setTimeout(() => this._innerWrite());\n    }\n\n    this._pendingData += data.length;\n    this._writeBuffer.push(data);\n    this._callbacks.push(callback);\n  }\n\n  /**\n   * Inner write call, that enters the sliced chunk processing by timing.\n   *\n   * `lastTime` indicates, when the last _innerWrite call had started.\n   * It is used to aggregate async handler execution under a timeout constraint\n   * effectively lowering the redrawing needs, schematically:\n   *\n   *   macroTask _innerWrite:\n   *     if (Date.now() - (lastTime | 0) < WRITE_TIMEOUT_MS):\n   *        schedule microTask _innerWrite(lastTime)\n   *     else:\n   *        schedule macroTask _innerWrite(0)\n   *\n   *   overall execution order on task queues:\n   *\n   *   macrotasks:  [...]  -->  _innerWrite(0)  -->  [...]  -->  screenUpdate  -->  [...]\n   *         m  t:                    |\n   *         i  a:                  [...]\n   *         c  s:                    |\n   *         r  k:              while < timeout:\n   *         o  s:                _innerWrite(timeout)\n   *\n   * `promiseResult` depicts the promise resolve value of an async handler.\n   * This value gets carried forward through all saved stack states of the\n   * paused parser for proper continuation.\n   *\n   * Note, for pure sync code `lastTime` and `promiseResult` have no meaning.\n   */\n  protected _innerWrite(lastTime: number = 0, promiseResult: boolean = true): void {\n    const startTime = lastTime || Date.now();\n    while (this._writeBuffer.length > this._bufferOffset) {\n      const data = this._writeBuffer[this._bufferOffset];\n      const result = this._action(data, promiseResult);\n      if (result) {\n        /**\n         * If we get a promise as return value, we re-schedule the continuation\n         * as thenable on the promise and exit right away.\n         *\n         * The exit here means, that we block input processing at the current active chunk,\n         * the exact execution position within the chunk is preserved by the saved\n         * stack content in InputHandler and EscapeSequenceParser.\n         *\n         * Resuming happens automatically from that saved stack state.\n         * Also the resolved promise value is passed along the callstack to\n         * `EscapeSequenceParser.parse` to correctly resume the stopped handler loop.\n         *\n         * Exceptions on async handlers will be logged to console async, but do not interrupt\n         * the input processing (continues with next handler at the current input position).\n         */\n\n        /**\n         * If a promise takes long to resolve, we should schedule continuation behind setTimeout.\n         * This might already be too late, if our .then enters really late (executor + prev thens took very long).\n         * This cannot be solved here for the handler itself (it is the handlers responsibility to slice hard work),\n         * but we can at least schedule a screen update as we gain control.\n         */\n        const continuation: (r: boolean) => void = (r: boolean) => Date.now() - startTime >= WRITE_TIMEOUT_MS\n          ? setTimeout(() => this._innerWrite(0, r))\n          : this._innerWrite(startTime, r);\n\n        /**\n         * Optimization considerations:\n         * The continuation above favors FPS over throughput by eval'ing `startTime` on resolve.\n         * This might schedule too many screen updates with bad throughput drops (in case a slow\n         * resolving handler sliced its work properly behind setTimeout calls). We cannot spot\n         * this condition here, also the renderer has no way to spot nonsense updates either.\n         * FIXME: A proper fix for this would track the FPS at the renderer entry level separately.\n         *\n         * If favoring of FPS shows bad throughtput impact, use the following instead. It favors\n         * throughput by eval'ing `startTime` upfront pulling at least one more chunk into the\n         * current microtask queue (executed before setTimeout).\n         */\n        // const continuation: (r: boolean) => void = Date.now() - startTime >= WRITE_TIMEOUT_MS\n        //   ? r => setTimeout(() => this._innerWrite(0, r))\n        //   : r => this._innerWrite(startTime, r);\n\n        // Handle exceptions synchronously to current band position, idea:\n        // 1. spawn a single microtask which we allow to throw hard\n        // 2. spawn a promise immediately resolving to `true`\n        // (executed on the same queue, thus properly aligned before continuation happens)\n        result.catch(err => {\n          qmt(() => {throw err;});\n          return Promise.resolve(false);\n        }).then(continuation);\n        return;\n      }\n\n      const cb = this._callbacks[this._bufferOffset];\n      if (cb) cb();\n      this._bufferOffset++;\n      this._pendingData -= data.length;\n\n      if (Date.now() - startTime >= WRITE_TIMEOUT_MS) {\n        break;\n      }\n    }\n    if (this._writeBuffer.length > this._bufferOffset) {\n      // Allow renderer to catch up before processing the next batch\n      // trim already processed chunks if we are above threshold\n      if (this._bufferOffset > WRITE_BUFFER_LENGTH_THRESHOLD) {\n        this._writeBuffer = this._writeBuffer.slice(this._bufferOffset);\n        this._callbacks = this._callbacks.slice(this._bufferOffset);\n        this._bufferOffset = 0;\n      }\n      setTimeout(() => this._innerWrite());\n    } else {\n      this._writeBuffer.length = 0;\n      this._callbacks.length = 0;\n      this._pendingData = 0;\n      this._bufferOffset = 0;\n    }\n  }\n}\n", "/**\n * Copyright (c) 2021 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\n\n// 'rgb:' rule - matching: r/g/b | rr/gg/bb | rrr/ggg/bbb | rrrr/gggg/bbbb (hex digits)\nconst RGB_REX = /^([\\da-f]{1})\\/([\\da-f]{1})\\/([\\da-f]{1})$|^([\\da-f]{2})\\/([\\da-f]{2})\\/([\\da-f]{2})$|^([\\da-f]{3})\\/([\\da-f]{3})\\/([\\da-f]{3})$|^([\\da-f]{4})\\/([\\da-f]{4})\\/([\\da-f]{4})$/;\n// '#...' rule - matching any hex digits\nconst HASH_REX = /^[\\da-f]+$/;\n\n/**\n * Parse color spec to RGB values (8 bit per channel).\n * See `man xparsecolor` for details about certain format specifications.\n *\n * Supported formats:\n * - rgb:<red>/<green>/<blue> with <red>, <green>, <blue> in h | hh | hhh | hhhh\n * - #RGB, #RRGGBB, #RRRGGGBBB, #RRRRGGGGBBBB\n *\n * All other formats like rgbi: or device-independent string specifications\n * with float numbering are not supported.\n */\nexport function parseColor(data: string): [number, number, number] | undefined {\n  if (!data) return;\n  // also handle uppercases\n  let low = data.toLowerCase();\n  if (low.indexOf('rgb:') === 0) {\n    // 'rgb:' specifier\n    low = low.slice(4);\n    const m = RGB_REX.exec(low);\n    if (m) {\n      const base = m[1] ? 15 : m[4] ? 255 : m[7] ? 4095 : 65535;\n      return [\n        Math.round(parseInt(m[1] || m[4] || m[7] || m[10], 16) / base * 255),\n        Math.round(parseInt(m[2] || m[5] || m[8] || m[11], 16) / base * 255),\n        Math.round(parseInt(m[3] || m[6] || m[9] || m[12], 16) / base * 255)\n      ];\n    }\n  } else if (low.indexOf('#') === 0) {\n    // '#' specifier\n    low = low.slice(1);\n    if (HASH_REX.exec(low) && [3, 6, 9, 12].includes(low.length)) {\n      const adv = low.length / 3;\n      const result: [number, number, number] = [0, 0, 0];\n      for (let i = 0; i < 3; ++i) {\n        const c = parseInt(low.slice(adv * i, adv * i + adv), 16);\n        result[i] = adv === 1 ? c << 4 : adv === 2 ? c : adv === 3 ? c >> 4 : c >> 8;\n      }\n      return result;\n    }\n  }\n\n  // Named colors are currently not supported due to the large addition to the xterm.js bundle size\n  // they would add. In order to support named colors, we would need some way of optionally loading\n  // additional payloads so startup/download time is not bloated (see #3530).\n}\n\n// pad hex output to requested bit width\nfunction pad(n: number, bits: number): string {\n  const s = n.toString(16);\n  const s2 = s.length < 2 ? '0' + s : s;\n  switch (bits) {\n    case 4:\n      return s[0];\n    case 8:\n      return s2;\n    case 12:\n      return (s2 + s2).slice(0, 3);\n    default:\n      return s2 + s2;\n  }\n}\n\n/**\n * Convert a given color to rgb:../../.. string of `bits` depth.\n */\nexport function toRgbString(color: [number, number, number], bits: number = 16): string {\n  const [r, g, b] = color;\n  return `rgb:${pad(r, bits)}/${pad(g, bits)}/${pad(b, bits)}`;\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\n/**\n * Internal states of EscapeSequenceParser.\n */\nexport const enum ParserState {\n  GROUND = 0,\n  ESCAPE = 1,\n  ESCAPE_INTERMEDIATE = 2,\n  CSI_ENTRY = 3,\n  CSI_PARAM = 4,\n  CSI_INTERMEDIATE = 5,\n  CSI_IGNORE = 6,\n  SOS_PM_APC_STRING = 7,\n  OSC_STRING = 8,\n  DCS_ENTRY = 9,\n  DCS_PARAM = 10,\n  DCS_IGNORE = 11,\n  DCS_INTERMEDIATE = 12,\n  DCS_PASSTHROUGH = 13\n}\n\n/**\n* Internal actions of EscapeSequenceParser.\n*/\nexport const enum ParserAction {\n  IGNORE = 0,\n  ERROR = 1,\n  PRINT = 2,\n  EXECUTE = 3,\n  OSC_START = 4,\n  OSC_PUT = 5,\n  OSC_END = 6,\n  CSI_DISPATCH = 7,\n  PARAM = 8,\n  COLLECT = 9,\n  ESC_DISPATCH = 10,\n  CLEAR = 11,\n  DCS_HOOK = 12,\n  DCS_PUT = 13,\n  DCS_UNHOOK = 14\n}\n\n/**\n * Internal states of OscParser.\n */\nexport const enum OscState {\n  START = 0,\n  ID = 1,\n  PAYLOAD = 2,\n  ABORT = 3\n}\n\n// payload limit for OSC and DCS\nexport const PAYLOAD_LIMIT = 10000000;\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IDisposable } from 'common/Types';\nimport { IDcsHandler, IParams, IHandlerCollection, IDcsParser, DcsFallbackHandlerType, ISubParserStackState } from 'common/parser/Types';\nimport { utf32ToString } from 'common/input/TextDecoder';\nimport { Params } from 'common/parser/Params';\nimport { PAYLOAD_LIMIT } from 'common/parser/Constants';\n\nconst EMPTY_HANDLERS: IDcsHandler[] = [];\n\nexport class DcsParser implements IDcsParser {\n  private _handlers: IHandlerCollection<IDcsHandler> = Object.create(null);\n  private _active: IDcsHandler[] = EMPTY_HANDLERS;\n  private _ident: number = 0;\n  private _handlerFb: DcsFallbackHandlerType = () => { };\n  private _stack: ISubParserStackState = {\n    paused: false,\n    loopPosition: 0,\n    fallThrough: false\n  };\n\n  public dispose(): void {\n    this._handlers = Object.create(null);\n    this._handlerFb = () => { };\n    this._active = EMPTY_HANDLERS;\n  }\n\n  public registerHandler(ident: number, handler: IDcsHandler): IDisposable {\n    if (this._handlers[ident] === undefined) {\n      this._handlers[ident] = [];\n    }\n    const handlerList = this._handlers[ident];\n    handlerList.push(handler);\n    return {\n      dispose: () => {\n        const handlerIndex = handlerList.indexOf(handler);\n        if (handlerIndex !== -1) {\n          handlerList.splice(handlerIndex, 1);\n        }\n      }\n    };\n  }\n\n  public clearHandler(ident: number): void {\n    if (this._handlers[ident]) delete this._handlers[ident];\n  }\n\n  public setHandlerFallback(handler: DcsFallbackHandlerType): void {\n    this._handlerFb = handler;\n  }\n\n  public reset(): void {\n    // force cleanup leftover handlers\n    if (this._active.length) {\n      for (let j = this._stack.paused ? this._stack.loopPosition - 1 : this._active.length - 1; j >= 0; --j) {\n        this._active[j].unhook(false);\n      }\n    }\n    this._stack.paused = false;\n    this._active = EMPTY_HANDLERS;\n    this._ident = 0;\n  }\n\n  public hook(ident: number, params: IParams): void {\n    // always reset leftover handlers\n    this.reset();\n    this._ident = ident;\n    this._active = this._handlers[ident] || EMPTY_HANDLERS;\n    if (!this._active.length) {\n      this._handlerFb(this._ident, 'HOOK', params);\n    } else {\n      for (let j = this._active.length - 1; j >= 0; j--) {\n        this._active[j].hook(params);\n      }\n    }\n  }\n\n  public put(data: Uint32Array, start: number, end: number): void {\n    if (!this._active.length) {\n      this._handlerFb(this._ident, 'PUT', utf32ToString(data, start, end));\n    } else {\n      for (let j = this._active.length - 1; j >= 0; j--) {\n        this._active[j].put(data, start, end);\n      }\n    }\n  }\n\n  public unhook(success: boolean, promiseResult: boolean = true): void | Promise<boolean> {\n    if (!this._active.length) {\n      this._handlerFb(this._ident, 'UNHOOK', success);\n    } else {\n      let handlerResult: boolean | Promise<boolean> = false;\n      let j = this._active.length - 1;\n      let fallThrough = false;\n      if (this._stack.paused) {\n        j = this._stack.loopPosition - 1;\n        handlerResult = promiseResult;\n        fallThrough = this._stack.fallThrough;\n        this._stack.paused = false;\n      }\n      if (!fallThrough && handlerResult === false) {\n        for (; j >= 0; j--) {\n          handlerResult = this._active[j].unhook(success);\n          if (handlerResult === true) {\n            break;\n          } else if (handlerResult instanceof Promise) {\n            this._stack.paused = true;\n            this._stack.loopPosition = j;\n            this._stack.fallThrough = false;\n            return handlerResult;\n          }\n        }\n        j--;\n      }\n      // cleanup left over handlers (fallThrough for async)\n      for (; j >= 0; j--) {\n        handlerResult = this._active[j].unhook(false);\n        if (handlerResult instanceof Promise) {\n          this._stack.paused = true;\n          this._stack.loopPosition = j;\n          this._stack.fallThrough = true;\n          return handlerResult;\n        }\n      }\n    }\n    this._active = EMPTY_HANDLERS;\n    this._ident = 0;\n  }\n}\n\n// predefine empty params as [0] (ZDM)\nconst EMPTY_PARAMS = new Params();\nEMPTY_PARAMS.addParam(0);\n\n/**\n * Convenient class to create a DCS handler from a single callback function.\n * Note: The payload is currently limited to 50 MB (hardcoded).\n */\nexport class DcsHandler implements IDcsHandler {\n  private _data = '';\n  private _params: IParams = EMPTY_PARAMS;\n  private _hitLimit: boolean = false;\n\n  constructor(private _handler: (data: string, params: IParams) => boolean | Promise<boolean>) { }\n\n  public hook(params: IParams): void {\n    // since we need to preserve params until `unhook`, we have to clone it\n    // (only borrowed from parser and spans multiple parser states)\n    // perf optimization:\n    // clone only, if we have non empty params, otherwise stick with default\n    this._params = (params.length > 1 || params.params[0]) ? params.clone() : EMPTY_PARAMS;\n    this._data = '';\n    this._hitLimit = false;\n  }\n\n  public put(data: Uint32Array, start: number, end: number): void {\n    if (this._hitLimit) {\n      return;\n    }\n    this._data += utf32ToString(data, start, end);\n    if (this._data.length > PAYLOAD_LIMIT) {\n      this._data = '';\n      this._hitLimit = true;\n    }\n  }\n\n  public unhook(success: boolean): boolean | Promise<boolean> {\n    let ret: boolean | Promise<boolean> = false;\n    if (this._hitLimit) {\n      ret = false;\n    } else if (success) {\n      ret = this._handler(this._data, this._params);\n      if (ret instanceof Promise) {\n        // need to hold data and params until `ret` got resolved\n        // dont care for errors, data will be freed anyway on next start\n        return ret.then(res => {\n          this._params = EMPTY_PARAMS;\n          this._data = '';\n          this._hitLimit = false;\n          return res;\n        });\n      }\n    }\n    this._params = EMPTY_PARAMS;\n    this._data = '';\n    this._hitLimit = false;\n    return ret;\n  }\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IParsingState, IDcsHandler, IEscapeSequenceParser, IParams, IOscHandler, IHandlerCollection, CsiHandlerType, OscFallbackHandlerType, IOscParser, EscHandlerType, IDcsParser, DcsFallbackHandlerType, IFunctionIdentifier, ExecuteFallbackHandlerType, CsiFallbackHandlerType, EscFallbackHandlerType, PrintHandlerType, PrintFallbackHandlerType, ExecuteHandlerType, IParserStackState, ParserStackType, ResumableHandlersType } from 'common/parser/Types';\nimport { ParserState, ParserAction } from 'common/parser/Constants';\nimport { Disposable } from 'common/Lifecycle';\nimport { IDisposable } from 'common/Types';\nimport { fill } from 'common/TypedArrayUtils';\nimport { Params } from 'common/parser/Params';\nimport { OscParser } from 'common/parser/OscParser';\nimport { DcsParser } from 'common/parser/DcsParser';\n\n/**\n * Table values are generated like this:\n *    index:  currentState << TableValue.INDEX_STATE_SHIFT | charCode\n *    value:  action << TableValue.TRANSITION_ACTION_SHIFT | nextState\n */\nconst enum TableAccess {\n  TRANSITION_ACTION_SHIFT = 4,\n  TRANSITION_STATE_MASK = 15,\n  INDEX_STATE_SHIFT = 8\n}\n\n/**\n * Transition table for EscapeSequenceParser.\n */\nexport class TransitionTable {\n  public table: Uint8Array;\n\n  constructor(length: number) {\n    this.table = new Uint8Array(length);\n  }\n\n  /**\n   * Set default transition.\n   * @param action default action\n   * @param next default next state\n   */\n  public setDefault(action: ParserAction, next: ParserState): void {\n    fill(this.table, action << TableAccess.TRANSITION_ACTION_SHIFT | next);\n  }\n\n  /**\n   * Add a transition to the transition table.\n   * @param code input character code\n   * @param state current parser state\n   * @param action parser action to be done\n   * @param next next parser state\n   */\n  public add(code: number, state: ParserState, action: ParserAction, next: ParserState): void {\n    this.table[state << TableAccess.INDEX_STATE_SHIFT | code] = action << TableAccess.TRANSITION_ACTION_SHIFT | next;\n  }\n\n  /**\n   * Add transitions for multiple input character codes.\n   * @param codes input character code array\n   * @param state current parser state\n   * @param action parser action to be done\n   * @param next next parser state\n   */\n  public addMany(codes: number[], state: ParserState, action: ParserAction, next: ParserState): void {\n    for (let i = 0; i < codes.length; i++) {\n      this.table[state << TableAccess.INDEX_STATE_SHIFT | codes[i]] = action << TableAccess.TRANSITION_ACTION_SHIFT | next;\n    }\n  }\n}\n\n\n// Pseudo-character placeholder for printable non-ascii characters (unicode).\nconst NON_ASCII_PRINTABLE = 0xA0;\n\n\n/**\n * VT500 compatible transition table.\n * Taken from https://vt100.net/emu/dec_ansi_parser.\n */\nexport const VT500_TRANSITION_TABLE = (function (): TransitionTable {\n  const table: TransitionTable = new TransitionTable(4095);\n\n  // range macro for byte\n  const BYTE_VALUES = 256;\n  const blueprint = Array.apply(null, Array(BYTE_VALUES)).map((unused: any, i: number) => i);\n  const r = (start: number, end: number): number[] => blueprint.slice(start, end);\n\n  // Default definitions.\n  const PRINTABLES = r(0x20, 0x7f); // 0x20 (SP) included, 0x7F (DEL) excluded\n  const EXECUTABLES = r(0x00, 0x18);\n  EXECUTABLES.push(0x19);\n  EXECUTABLES.push.apply(EXECUTABLES, r(0x1c, 0x20));\n\n  const states: number[] = r(ParserState.GROUND, ParserState.DCS_PASSTHROUGH + 1);\n  let state: any;\n\n  // set default transition\n  table.setDefault(ParserAction.ERROR, ParserState.GROUND);\n  // printables\n  table.addMany(PRINTABLES, ParserState.GROUND, ParserAction.PRINT, ParserState.GROUND);\n  // global anywhere rules\n  for (state in states) {\n    table.addMany([0x18, 0x1a, 0x99, 0x9a], state, ParserAction.EXECUTE, ParserState.GROUND);\n    table.addMany(r(0x80, 0x90), state, ParserAction.EXECUTE, ParserState.GROUND);\n    table.addMany(r(0x90, 0x98), state, ParserAction.EXECUTE, ParserState.GROUND);\n    table.add(0x9c, state, ParserAction.IGNORE, ParserState.GROUND); // ST as terminator\n    table.add(0x1b, state, ParserAction.CLEAR, ParserState.ESCAPE);  // ESC\n    table.add(0x9d, state, ParserAction.OSC_START, ParserState.OSC_STRING);  // OSC\n    table.addMany([0x98, 0x9e, 0x9f], state, ParserAction.IGNORE, ParserState.SOS_PM_APC_STRING);\n    table.add(0x9b, state, ParserAction.CLEAR, ParserState.CSI_ENTRY);  // CSI\n    table.add(0x90, state, ParserAction.CLEAR, ParserState.DCS_ENTRY);  // DCS\n  }\n  // rules for executables and 7f\n  table.addMany(EXECUTABLES, ParserState.GROUND, ParserAction.EXECUTE, ParserState.GROUND);\n  table.addMany(EXECUTABLES, ParserState.ESCAPE, ParserAction.EXECUTE, ParserState.ESCAPE);\n  table.add(0x7f, ParserState.ESCAPE, ParserAction.IGNORE, ParserState.ESCAPE);\n  table.addMany(EXECUTABLES, ParserState.OSC_STRING, ParserAction.IGNORE, ParserState.OSC_STRING);\n  table.addMany(EXECUTABLES, ParserState.CSI_ENTRY, ParserAction.EXECUTE, ParserState.CSI_ENTRY);\n  table.add(0x7f, ParserState.CSI_ENTRY, ParserAction.IGNORE, ParserState.CSI_ENTRY);\n  table.addMany(EXECUTABLES, ParserState.CSI_PARAM, ParserAction.EXECUTE, ParserState.CSI_PARAM);\n  table.add(0x7f, ParserState.CSI_PARAM, ParserAction.IGNORE, ParserState.CSI_PARAM);\n  table.addMany(EXECUTABLES, ParserState.CSI_IGNORE, ParserAction.EXECUTE, ParserState.CSI_IGNORE);\n  table.addMany(EXECUTABLES, ParserState.CSI_INTERMEDIATE, ParserAction.EXECUTE, ParserState.CSI_INTERMEDIATE);\n  table.add(0x7f, ParserState.CSI_INTERMEDIATE, ParserAction.IGNORE, ParserState.CSI_INTERMEDIATE);\n  table.addMany(EXECUTABLES, ParserState.ESCAPE_INTERMEDIATE, ParserAction.EXECUTE, ParserState.ESCAPE_INTERMEDIATE);\n  table.add(0x7f, ParserState.ESCAPE_INTERMEDIATE, ParserAction.IGNORE, ParserState.ESCAPE_INTERMEDIATE);\n  // osc\n  table.add(0x5d, ParserState.ESCAPE, ParserAction.OSC_START, ParserState.OSC_STRING);\n  table.addMany(PRINTABLES, ParserState.OSC_STRING, ParserAction.OSC_PUT, ParserState.OSC_STRING);\n  table.add(0x7f, ParserState.OSC_STRING, ParserAction.OSC_PUT, ParserState.OSC_STRING);\n  table.addMany([0x9c, 0x1b, 0x18, 0x1a, 0x07], ParserState.OSC_STRING, ParserAction.OSC_END, ParserState.GROUND);\n  table.addMany(r(0x1c, 0x20), ParserState.OSC_STRING, ParserAction.IGNORE, ParserState.OSC_STRING);\n  // sos/pm/apc does nothing\n  table.addMany([0x58, 0x5e, 0x5f], ParserState.ESCAPE, ParserAction.IGNORE, ParserState.SOS_PM_APC_STRING);\n  table.addMany(PRINTABLES, ParserState.SOS_PM_APC_STRING, ParserAction.IGNORE, ParserState.SOS_PM_APC_STRING);\n  table.addMany(EXECUTABLES, ParserState.SOS_PM_APC_STRING, ParserAction.IGNORE, ParserState.SOS_PM_APC_STRING);\n  table.add(0x9c, ParserState.SOS_PM_APC_STRING, ParserAction.IGNORE, ParserState.GROUND);\n  table.add(0x7f, ParserState.SOS_PM_APC_STRING, ParserAction.IGNORE, ParserState.SOS_PM_APC_STRING);\n  // csi entries\n  table.add(0x5b, ParserState.ESCAPE, ParserAction.CLEAR, ParserState.CSI_ENTRY);\n  table.addMany(r(0x40, 0x7f), ParserState.CSI_ENTRY, ParserAction.CSI_DISPATCH, ParserState.GROUND);\n  table.addMany(r(0x30, 0x3c), ParserState.CSI_ENTRY, ParserAction.PARAM, ParserState.CSI_PARAM);\n  table.addMany([0x3c, 0x3d, 0x3e, 0x3f], ParserState.CSI_ENTRY, ParserAction.COLLECT, ParserState.CSI_PARAM);\n  table.addMany(r(0x30, 0x3c), ParserState.CSI_PARAM, ParserAction.PARAM, ParserState.CSI_PARAM);\n  table.addMany(r(0x40, 0x7f), ParserState.CSI_PARAM, ParserAction.CSI_DISPATCH, ParserState.GROUND);\n  table.addMany([0x3c, 0x3d, 0x3e, 0x3f], ParserState.CSI_PARAM, ParserAction.IGNORE, ParserState.CSI_IGNORE);\n  table.addMany(r(0x20, 0x40), ParserState.CSI_IGNORE, ParserAction.IGNORE, ParserState.CSI_IGNORE);\n  table.add(0x7f, ParserState.CSI_IGNORE, ParserAction.IGNORE, ParserState.CSI_IGNORE);\n  table.addMany(r(0x40, 0x7f), ParserState.CSI_IGNORE, ParserAction.IGNORE, ParserState.GROUND);\n  table.addMany(r(0x20, 0x30), ParserState.CSI_ENTRY, ParserAction.COLLECT, ParserState.CSI_INTERMEDIATE);\n  table.addMany(r(0x20, 0x30), ParserState.CSI_INTERMEDIATE, ParserAction.COLLECT, ParserState.CSI_INTERMEDIATE);\n  table.addMany(r(0x30, 0x40), ParserState.CSI_INTERMEDIATE, ParserAction.IGNORE, ParserState.CSI_IGNORE);\n  table.addMany(r(0x40, 0x7f), ParserState.CSI_INTERMEDIATE, ParserAction.CSI_DISPATCH, ParserState.GROUND);\n  table.addMany(r(0x20, 0x30), ParserState.CSI_PARAM, ParserAction.COLLECT, ParserState.CSI_INTERMEDIATE);\n  // esc_intermediate\n  table.addMany(r(0x20, 0x30), ParserState.ESCAPE, ParserAction.COLLECT, ParserState.ESCAPE_INTERMEDIATE);\n  table.addMany(r(0x20, 0x30), ParserState.ESCAPE_INTERMEDIATE, ParserAction.COLLECT, ParserState.ESCAPE_INTERMEDIATE);\n  table.addMany(r(0x30, 0x7f), ParserState.ESCAPE_INTERMEDIATE, ParserAction.ESC_DISPATCH, ParserState.GROUND);\n  table.addMany(r(0x30, 0x50), ParserState.ESCAPE, ParserAction.ESC_DISPATCH, ParserState.GROUND);\n  table.addMany(r(0x51, 0x58), ParserState.ESCAPE, ParserAction.ESC_DISPATCH, ParserState.GROUND);\n  table.addMany([0x59, 0x5a, 0x5c], ParserState.ESCAPE, ParserAction.ESC_DISPATCH, ParserState.GROUND);\n  table.addMany(r(0x60, 0x7f), ParserState.ESCAPE, ParserAction.ESC_DISPATCH, ParserState.GROUND);\n  // dcs entry\n  table.add(0x50, ParserState.ESCAPE, ParserAction.CLEAR, ParserState.DCS_ENTRY);\n  table.addMany(EXECUTABLES, ParserState.DCS_ENTRY, ParserAction.IGNORE, ParserState.DCS_ENTRY);\n  table.add(0x7f, ParserState.DCS_ENTRY, ParserAction.IGNORE, ParserState.DCS_ENTRY);\n  table.addMany(r(0x1c, 0x20), ParserState.DCS_ENTRY, ParserAction.IGNORE, ParserState.DCS_ENTRY);\n  table.addMany(r(0x20, 0x30), ParserState.DCS_ENTRY, ParserAction.COLLECT, ParserState.DCS_INTERMEDIATE);\n  table.addMany(r(0x30, 0x3c), ParserState.DCS_ENTRY, ParserAction.PARAM, ParserState.DCS_PARAM);\n  table.addMany([0x3c, 0x3d, 0x3e, 0x3f], ParserState.DCS_ENTRY, ParserAction.COLLECT, ParserState.DCS_PARAM);\n  table.addMany(EXECUTABLES, ParserState.DCS_IGNORE, ParserAction.IGNORE, ParserState.DCS_IGNORE);\n  table.addMany(r(0x20, 0x80), ParserState.DCS_IGNORE, ParserAction.IGNORE, ParserState.DCS_IGNORE);\n  table.addMany(r(0x1c, 0x20), ParserState.DCS_IGNORE, ParserAction.IGNORE, ParserState.DCS_IGNORE);\n  table.addMany(EXECUTABLES, ParserState.DCS_PARAM, ParserAction.IGNORE, ParserState.DCS_PARAM);\n  table.add(0x7f, ParserState.DCS_PARAM, ParserAction.IGNORE, ParserState.DCS_PARAM);\n  table.addMany(r(0x1c, 0x20), ParserState.DCS_PARAM, ParserAction.IGNORE, ParserState.DCS_PARAM);\n  table.addMany(r(0x30, 0x3c), ParserState.DCS_PARAM, ParserAction.PARAM, ParserState.DCS_PARAM);\n  table.addMany([0x3c, 0x3d, 0x3e, 0x3f], ParserState.DCS_PARAM, ParserAction.IGNORE, ParserState.DCS_IGNORE);\n  table.addMany(r(0x20, 0x30), ParserState.DCS_PARAM, ParserAction.COLLECT, ParserState.DCS_INTERMEDIATE);\n  table.addMany(EXECUTABLES, ParserState.DCS_INTERMEDIATE, ParserAction.IGNORE, ParserState.DCS_INTERMEDIATE);\n  table.add(0x7f, ParserState.DCS_INTERMEDIATE, ParserAction.IGNORE, ParserState.DCS_INTERMEDIATE);\n  table.addMany(r(0x1c, 0x20), ParserState.DCS_INTERMEDIATE, ParserAction.IGNORE, ParserState.DCS_INTERMEDIATE);\n  table.addMany(r(0x20, 0x30), ParserState.DCS_INTERMEDIATE, ParserAction.COLLECT, ParserState.DCS_INTERMEDIATE);\n  table.addMany(r(0x30, 0x40), ParserState.DCS_INTERMEDIATE, ParserAction.IGNORE, ParserState.DCS_IGNORE);\n  table.addMany(r(0x40, 0x7f), ParserState.DCS_INTERMEDIATE, ParserAction.DCS_HOOK, ParserState.DCS_PASSTHROUGH);\n  table.addMany(r(0x40, 0x7f), ParserState.DCS_PARAM, ParserAction.DCS_HOOK, ParserState.DCS_PASSTHROUGH);\n  table.addMany(r(0x40, 0x7f), ParserState.DCS_ENTRY, ParserAction.DCS_HOOK, ParserState.DCS_PASSTHROUGH);\n  table.addMany(EXECUTABLES, ParserState.DCS_PASSTHROUGH, ParserAction.DCS_PUT, ParserState.DCS_PASSTHROUGH);\n  table.addMany(PRINTABLES, ParserState.DCS_PASSTHROUGH, ParserAction.DCS_PUT, ParserState.DCS_PASSTHROUGH);\n  table.add(0x7f, ParserState.DCS_PASSTHROUGH, ParserAction.IGNORE, ParserState.DCS_PASSTHROUGH);\n  table.addMany([0x1b, 0x9c, 0x18, 0x1a], ParserState.DCS_PASSTHROUGH, ParserAction.DCS_UNHOOK, ParserState.GROUND);\n  // special handling of unicode chars\n  table.add(NON_ASCII_PRINTABLE, ParserState.GROUND, ParserAction.PRINT, ParserState.GROUND);\n  table.add(NON_ASCII_PRINTABLE, ParserState.OSC_STRING, ParserAction.OSC_PUT, ParserState.OSC_STRING);\n  table.add(NON_ASCII_PRINTABLE, ParserState.CSI_IGNORE, ParserAction.IGNORE, ParserState.CSI_IGNORE);\n  table.add(NON_ASCII_PRINTABLE, ParserState.DCS_IGNORE, ParserAction.IGNORE, ParserState.DCS_IGNORE);\n  table.add(NON_ASCII_PRINTABLE, ParserState.DCS_PASSTHROUGH, ParserAction.DCS_PUT, ParserState.DCS_PASSTHROUGH);\n  return table;\n})();\n\n\n/**\n * EscapeSequenceParser.\n * This class implements the ANSI/DEC compatible parser described by\n * Paul Williams (https://vt100.net/emu/dec_ansi_parser).\n *\n * To implement custom ANSI compliant escape sequences it is not needed to\n * alter this parser, instead consider registering a custom handler.\n * For non ANSI compliant sequences change the transition table with\n * the optional `transitions` constructor argument and\n * reimplement the `parse` method.\n *\n * This parser is currently hardcoded to operate in ZDM (Zero Default Mode)\n * as suggested by the original parser, thus empty parameters are set to 0.\n * This this is not in line with the latest ECMA-48 specification\n * (ZDM was part of the early specs and got completely removed later on).\n *\n * Other than the original parser from vt100.net this parser supports\n * sub parameters in digital parameters separated by colons. Empty sub parameters\n * are set to -1 (no ZDM for sub parameters).\n *\n * About prefix and intermediate bytes:\n * This parser follows the assumptions of the vt100.net parser with these restrictions:\n * - only one prefix byte is allowed as first parameter byte, byte range 0x3c .. 0x3f\n * - max. two intermediates are respected, byte range 0x20 .. 0x2f\n * Note that this is not in line with ECMA-48 which does not limit either of those.\n * Furthermore ECMA-48 allows the prefix byte range at any param byte position. Currently\n * there are no known sequences that follow the broader definition of the specification.\n *\n * TODO: implement error recovery hook via error handler return values\n */\nexport class EscapeSequenceParser extends Disposable implements IEscapeSequenceParser {\n  public initialState: number;\n  public currentState: number;\n  public precedingCodepoint: number;\n\n  // buffers over several parse calls\n  protected _params: Params;\n  protected _collect: number;\n\n  // handler lookup containers\n  protected _printHandler: PrintHandlerType;\n  protected _executeHandlers: { [flag: number]: ExecuteHandlerType };\n  protected _csiHandlers: IHandlerCollection<CsiHandlerType>;\n  protected _escHandlers: IHandlerCollection<EscHandlerType>;\n  protected _oscParser: IOscParser;\n  protected _dcsParser: IDcsParser;\n  protected _errorHandler: (state: IParsingState) => IParsingState;\n\n  // fallback handlers\n  protected _printHandlerFb: PrintFallbackHandlerType;\n  protected _executeHandlerFb: ExecuteFallbackHandlerType;\n  protected _csiHandlerFb: CsiFallbackHandlerType;\n  protected _escHandlerFb: EscFallbackHandlerType;\n  protected _errorHandlerFb: (state: IParsingState) => IParsingState;\n\n  // parser stack save for async handler support\n  protected _parseStack: IParserStackState = {\n    state: ParserStackType.NONE,\n    handlers: [],\n    handlerPos: 0,\n    transition: 0,\n    chunkPos: 0\n  };\n\n  constructor(\n    protected readonly _transitions: TransitionTable = VT500_TRANSITION_TABLE\n  ) {\n    super();\n\n    this.initialState = ParserState.GROUND;\n    this.currentState = this.initialState;\n    this._params = new Params(); // defaults to 32 storable params/subparams\n    this._params.addParam(0);    // ZDM\n    this._collect = 0;\n    this.precedingCodepoint = 0;\n\n    // set default fallback handlers and handler lookup containers\n    this._printHandlerFb = (data, start, end): void => { };\n    this._executeHandlerFb = (code: number): void => { };\n    this._csiHandlerFb = (ident: number, params: IParams): void => { };\n    this._escHandlerFb = (ident: number): void => { };\n    this._errorHandlerFb = (state: IParsingState): IParsingState => state;\n    this._printHandler = this._printHandlerFb;\n    this._executeHandlers = Object.create(null);\n    this._csiHandlers = Object.create(null);\n    this._escHandlers = Object.create(null);\n    this._oscParser = new OscParser();\n    this._dcsParser = new DcsParser();\n    this._errorHandler = this._errorHandlerFb;\n\n    // swallow 7bit ST (ESC+\\)\n    this.registerEscHandler({ final: '\\\\' }, () => true);\n  }\n\n  protected _identifier(id: IFunctionIdentifier, finalRange: number[] = [0x40, 0x7e]): number {\n    let res = 0;\n    if (id.prefix) {\n      if (id.prefix.length > 1) {\n        throw new Error('only one byte as prefix supported');\n      }\n      res = id.prefix.charCodeAt(0);\n      if (res && 0x3c > res || res > 0x3f) {\n        throw new Error('prefix must be in range 0x3c .. 0x3f');\n      }\n    }\n    if (id.intermediates) {\n      if (id.intermediates.length > 2) {\n        throw new Error('only two bytes as intermediates are supported');\n      }\n      for (let i = 0; i < id.intermediates.length; ++i) {\n        const intermediate = id.intermediates.charCodeAt(i);\n        if (0x20 > intermediate || intermediate > 0x2f) {\n          throw new Error('intermediate must be in range 0x20 .. 0x2f');\n        }\n        res <<= 8;\n        res |= intermediate;\n      }\n    }\n    if (id.final.length !== 1) {\n      throw new Error('final must be a single byte');\n    }\n    const finalCode = id.final.charCodeAt(0);\n    if (finalRange[0] > finalCode || finalCode > finalRange[1]) {\n      throw new Error(`final must be in range ${finalRange[0]} .. ${finalRange[1]}`);\n    }\n    res <<= 8;\n    res |= finalCode;\n\n    return res;\n  }\n\n  public identToString(ident: number): string {\n    const res: string[] = [];\n    while (ident) {\n      res.push(String.fromCharCode(ident & 0xFF));\n      ident >>= 8;\n    }\n    return res.reverse().join('');\n  }\n\n  public dispose(): void {\n    this._csiHandlers = Object.create(null);\n    this._executeHandlers = Object.create(null);\n    this._escHandlers = Object.create(null);\n    this._oscParser.dispose();\n    this._dcsParser.dispose();\n  }\n\n  public setPrintHandler(handler: PrintHandlerType): void {\n    this._printHandler = handler;\n  }\n  public clearPrintHandler(): void {\n    this._printHandler = this._printHandlerFb;\n  }\n\n  public registerEscHandler(id: IFunctionIdentifier, handler: EscHandlerType): IDisposable {\n    const ident = this._identifier(id, [0x30, 0x7e]);\n    if (this._escHandlers[ident] === undefined) {\n      this._escHandlers[ident] = [];\n    }\n    const handlerList = this._escHandlers[ident];\n    handlerList.push(handler);\n    return {\n      dispose: () => {\n        const handlerIndex = handlerList.indexOf(handler);\n        if (handlerIndex !== -1) {\n          handlerList.splice(handlerIndex, 1);\n        }\n      }\n    };\n  }\n  public clearEscHandler(id: IFunctionIdentifier): void {\n    if (this._escHandlers[this._identifier(id, [0x30, 0x7e])]) delete this._escHandlers[this._identifier(id, [0x30, 0x7e])];\n  }\n  public setEscHandlerFallback(handler: EscFallbackHandlerType): void {\n    this._escHandlerFb = handler;\n  }\n\n  public setExecuteHandler(flag: string, handler: ExecuteHandlerType): void {\n    this._executeHandlers[flag.charCodeAt(0)] = handler;\n  }\n  public clearExecuteHandler(flag: string): void {\n    if (this._executeHandlers[flag.charCodeAt(0)]) delete this._executeHandlers[flag.charCodeAt(0)];\n  }\n  public setExecuteHandlerFallback(handler: ExecuteFallbackHandlerType): void {\n    this._executeHandlerFb = handler;\n  }\n\n  public registerCsiHandler(id: IFunctionIdentifier, handler: CsiHandlerType): IDisposable {\n    const ident = this._identifier(id);\n    if (this._csiHandlers[ident] === undefined) {\n      this._csiHandlers[ident] = [];\n    }\n    const handlerList = this._csiHandlers[ident];\n    handlerList.push(handler);\n    return {\n      dispose: () => {\n        const handlerIndex = handlerList.indexOf(handler);\n        if (handlerIndex !== -1) {\n          handlerList.splice(handlerIndex, 1);\n        }\n      }\n    };\n  }\n  public clearCsiHandler(id: IFunctionIdentifier): void {\n    if (this._csiHandlers[this._identifier(id)]) delete this._csiHandlers[this._identifier(id)];\n  }\n  public setCsiHandlerFallback(callback: (ident: number, params: IParams) => void): void {\n    this._csiHandlerFb = callback;\n  }\n\n  public registerDcsHandler(id: IFunctionIdentifier, handler: IDcsHandler): IDisposable {\n    return this._dcsParser.registerHandler(this._identifier(id), handler);\n  }\n  public clearDcsHandler(id: IFunctionIdentifier): void {\n    this._dcsParser.clearHandler(this._identifier(id));\n  }\n  public setDcsHandlerFallback(handler: DcsFallbackHandlerType): void {\n    this._dcsParser.setHandlerFallback(handler);\n  }\n\n  public registerOscHandler(ident: number, handler: IOscHandler): IDisposable {\n    return this._oscParser.registerHandler(ident, handler);\n  }\n  public clearOscHandler(ident: number): void {\n    this._oscParser.clearHandler(ident);\n  }\n  public setOscHandlerFallback(handler: OscFallbackHandlerType): void {\n    this._oscParser.setHandlerFallback(handler);\n  }\n\n  public setErrorHandler(callback: (state: IParsingState) => IParsingState): void {\n    this._errorHandler = callback;\n  }\n  public clearErrorHandler(): void {\n    this._errorHandler = this._errorHandlerFb;\n  }\n\n  /**\n   * Reset parser to initial values.\n   *\n   * This can also be used to lift the improper continuation error condition\n   * when dealing with async handlers. Use this only as a last resort to silence\n   * that error when the terminal has no pending data to be processed. Note that\n   * the interrupted async handler might continue its work in the future messing\n   * up the terminal state even further.\n   */\n  public reset(): void {\n    this.currentState = this.initialState;\n    this._oscParser.reset();\n    this._dcsParser.reset();\n    this._params.reset();\n    this._params.addParam(0); // ZDM\n    this._collect = 0;\n    this.precedingCodepoint = 0;\n    // abort pending continuation from async handler\n    // Here the RESET type indicates, that the next parse call will\n    // ignore any saved stack, instead continues sync with next codepoint from GROUND\n    if (this._parseStack.state !== ParserStackType.NONE) {\n      this._parseStack.state = ParserStackType.RESET;\n      this._parseStack.handlers = []; // also release handlers ref\n    }\n  }\n\n  /**\n   * Async parse support.\n   */\n  protected _preserveStack(\n    state: ParserStackType,\n    handlers: ResumableHandlersType,\n    handlerPos: number,\n    transition: number,\n    chunkPos: number\n  ): void {\n    this._parseStack.state = state;\n    this._parseStack.handlers = handlers;\n    this._parseStack.handlerPos = handlerPos;\n    this._parseStack.transition = transition;\n    this._parseStack.chunkPos = chunkPos;\n  }\n\n  /**\n   * Parse UTF32 codepoints in `data` up to `length`.\n   *\n   * Note: For several actions with high data load the parsing is optimized\n   * by using local read ahead loops with hardcoded conditions to\n   * avoid costly table lookups. Make sure that any change of table values\n   * will be reflected in the loop conditions as well and vice versa.\n   * Affected states/actions:\n   * - GROUND:PRINT\n   * - CSI_PARAM:PARAM\n   * - DCS_PARAM:PARAM\n   * - OSC_STRING:OSC_PUT\n   * - DCS_PASSTHROUGH:DCS_PUT\n   *\n   * Note on asynchronous handler support:\n   * Any handler returning a promise will be treated as asynchronous.\n   * To keep the in-band blocking working for async handlers, `parse` pauses execution,\n   * creates a stack save and returns the promise to the caller.\n   * For proper continuation of the paused state it is important\n   * to await the promise resolving. On resolve the parse must be repeated\n   * with the same chunk of data and the resolved value in `promiseResult`\n   * until no promise is returned.\n   *\n   * Important: With only sync handlers defined, parsing is completely synchronous as well.\n   * As soon as an async handler is involved, synchronous parsing is not possible anymore.\n   *\n   * Boilerplate for proper parsing of multiple chunks with async handlers:\n   *\n   * ```typescript\n   * async function parseMultipleChunks(chunks: Uint32Array[]): Promise<void> {\n   *   for (const chunk of chunks) {\n   *     let result: void | Promise<boolean>;\n   *     let prev: boolean | undefined;\n   *     while (result = parser.parse(chunk, chunk.length, prev)) {\n   *       prev = await result;\n   *     }\n   *   }\n   *   // finished parsing all chunks...\n   * }\n   * ```\n   */\n  public parse(data: Uint32Array, length: number, promiseResult?: boolean): void | Promise<boolean> {\n    let code = 0;\n    let transition = 0;\n    let start = 0;\n    let handlerResult: void | boolean | Promise<boolean>;\n\n    // resume from async handler\n    if (this._parseStack.state) {\n      // allow sync parser reset even in continuation mode\n      // Note: can be used to recover parser from improper continuation error below\n      if (this._parseStack.state === ParserStackType.RESET) {\n        this._parseStack.state = ParserStackType.NONE;\n        start = this._parseStack.chunkPos + 1; // continue with next codepoint in GROUND\n      } else {\n        if (promiseResult === undefined || this._parseStack.state === ParserStackType.FAIL) {\n          /**\n           * Reject further parsing on improper continuation after pausing.\n           * This is a really bad condition with screwed up execution order and prolly messed up\n           * terminal state, therefore we exit hard with an exception and reject any further parsing.\n           *\n           * Note: With `Terminal.write` usage this exception should never occur, as the top level\n           * calls are guaranteed to handle async conditions properly. If you ever encounter this\n           * exception in your terminal integration it indicates, that you injected data chunks to\n           * `InputHandler.parse` or `EscapeSequenceParser.parse` synchronously without waiting for\n           * continuation of a running async handler.\n           *\n           * It is possible to get rid of this error by calling `reset`. But dont rely on that,\n           * as the pending async handler still might mess up the terminal later. Instead fix the faulty\n           * async handling, so this error will not be thrown anymore.\n           */\n          this._parseStack.state = ParserStackType.FAIL;\n          throw new Error('improper continuation due to previous async handler, giving up parsing');\n        }\n\n        // we have to resume the old handler loop if:\n        // - return value of the promise was `false`\n        // - handlers are not exhausted yet\n        const handlers = this._parseStack.handlers;\n        let handlerPos = this._parseStack.handlerPos - 1;\n        switch (this._parseStack.state) {\n          case ParserStackType.CSI:\n            if (promiseResult === false && handlerPos > -1) {\n              for (; handlerPos >= 0; handlerPos--) {\n                handlerResult = (handlers as CsiHandlerType[])[handlerPos](this._params);\n                if (handlerResult === true) {\n                  break;\n                } else if (handlerResult instanceof Promise) {\n                  this._parseStack.handlerPos = handlerPos;\n                  return handlerResult;\n                }\n              }\n            }\n            this._parseStack.handlers = [];\n            break;\n          case ParserStackType.ESC:\n            if (promiseResult === false && handlerPos > -1) {\n              for (; handlerPos >= 0; handlerPos--) {\n                handlerResult = (handlers as EscHandlerType[])[handlerPos]();\n                if (handlerResult === true) {\n                  break;\n                } else if (handlerResult instanceof Promise) {\n                  this._parseStack.handlerPos = handlerPos;\n                  return handlerResult;\n                }\n              }\n            }\n            this._parseStack.handlers = [];\n            break;\n          case ParserStackType.DCS:\n            code = data[this._parseStack.chunkPos];\n            handlerResult = this._dcsParser.unhook(code !== 0x18 && code !== 0x1a, promiseResult);\n            if (handlerResult) {\n              return handlerResult;\n            }\n            if (code === 0x1b) this._parseStack.transition |= ParserState.ESCAPE;\n            this._params.reset();\n            this._params.addParam(0); // ZDM\n            this._collect = 0;\n            break;\n          case ParserStackType.OSC:\n            code = data[this._parseStack.chunkPos];\n            handlerResult = this._oscParser.end(code !== 0x18 && code !== 0x1a, promiseResult);\n            if (handlerResult) {\n              return handlerResult;\n            }\n            if (code === 0x1b) this._parseStack.transition |= ParserState.ESCAPE;\n            this._params.reset();\n            this._params.addParam(0); // ZDM\n            this._collect = 0;\n            break;\n        }\n        // cleanup before continuing with the main sync loop\n        this._parseStack.state = ParserStackType.NONE;\n        start = this._parseStack.chunkPos + 1;\n        this.precedingCodepoint = 0;\n        this.currentState = this._parseStack.transition & TableAccess.TRANSITION_STATE_MASK;\n      }\n    }\n\n    // continue with main sync loop\n\n    // process input string\n    for (let i = start; i < length; ++i) {\n      code = data[i];\n\n      // normal transition & action lookup\n      transition = this._transitions.table[this.currentState << TableAccess.INDEX_STATE_SHIFT | (code < 0xa0 ? code : NON_ASCII_PRINTABLE)];\n      switch (transition >> TableAccess.TRANSITION_ACTION_SHIFT) {\n        case ParserAction.PRINT:\n          // read ahead with loop unrolling\n          // Note: 0x20 (SP) is included, 0x7F (DEL) is excluded\n          for (let j = i + 1; ; ++j) {\n            if (j >= length || (code = data[j]) < 0x20 || (code > 0x7e && code < NON_ASCII_PRINTABLE)) {\n              this._printHandler(data, i, j);\n              i = j - 1;\n              break;\n            }\n            if (++j >= length || (code = data[j]) < 0x20 || (code > 0x7e && code < NON_ASCII_PRINTABLE)) {\n              this._printHandler(data, i, j);\n              i = j - 1;\n              break;\n            }\n            if (++j >= length || (code = data[j]) < 0x20 || (code > 0x7e && code < NON_ASCII_PRINTABLE)) {\n              this._printHandler(data, i, j);\n              i = j - 1;\n              break;\n            }\n            if (++j >= length || (code = data[j]) < 0x20 || (code > 0x7e && code < NON_ASCII_PRINTABLE)) {\n              this._printHandler(data, i, j);\n              i = j - 1;\n              break;\n            }\n          }\n          break;\n        case ParserAction.EXECUTE:\n          if (this._executeHandlers[code]) this._executeHandlers[code]();\n          else this._executeHandlerFb(code);\n          this.precedingCodepoint = 0;\n          break;\n        case ParserAction.IGNORE:\n          break;\n        case ParserAction.ERROR:\n          const inject: IParsingState = this._errorHandler(\n            {\n              position: i,\n              code,\n              currentState: this.currentState,\n              collect: this._collect,\n              params: this._params,\n              abort: false\n            });\n          if (inject.abort) return;\n          // inject values: currently not implemented\n          break;\n        case ParserAction.CSI_DISPATCH:\n          // Trigger CSI Handler\n          const handlers = this._csiHandlers[this._collect << 8 | code];\n          let j = handlers ? handlers.length - 1 : -1;\n          for (; j >= 0; j--) {\n            // true means success and to stop bubbling\n            // a promise indicates an async handler that needs to finish before progressing\n            handlerResult = handlers[j](this._params);\n            if (handlerResult === true) {\n              break;\n            } else if (handlerResult instanceof Promise) {\n              this._preserveStack(ParserStackType.CSI, handlers, j, transition, i);\n              return handlerResult;\n            }\n          }\n          if (j < 0) {\n            this._csiHandlerFb(this._collect << 8 | code, this._params);\n          }\n          this.precedingCodepoint = 0;\n          break;\n        case ParserAction.PARAM:\n          // inner loop: digits (0x30 - 0x39) and ; (0x3b) and : (0x3a)\n          do {\n            switch (code) {\n              case 0x3b:\n                this._params.addParam(0);  // ZDM\n                break;\n              case 0x3a:\n                this._params.addSubParam(-1);\n                break;\n              default:  // 0x30 - 0x39\n                this._params.addDigit(code - 48);\n            }\n          } while (++i < length && (code = data[i]) > 0x2f && code < 0x3c);\n          i--;\n          break;\n        case ParserAction.COLLECT:\n          this._collect <<= 8;\n          this._collect |= code;\n          break;\n        case ParserAction.ESC_DISPATCH:\n          const handlersEsc = this._escHandlers[this._collect << 8 | code];\n          let jj = handlersEsc ? handlersEsc.length - 1 : -1;\n          for (; jj >= 0; jj--) {\n            // true means success and to stop bubbling\n            // a promise indicates an async handler that needs to finish before progressing\n            handlerResult = handlersEsc[jj]();\n            if (handlerResult === true) {\n              break;\n            } else if (handlerResult instanceof Promise) {\n              this._preserveStack(ParserStackType.ESC, handlersEsc, jj, transition, i);\n              return handlerResult;\n            }\n          }\n          if (jj < 0) {\n            this._escHandlerFb(this._collect << 8 | code);\n          }\n          this.precedingCodepoint = 0;\n          break;\n        case ParserAction.CLEAR:\n          this._params.reset();\n          this._params.addParam(0); // ZDM\n          this._collect = 0;\n          break;\n        case ParserAction.DCS_HOOK:\n          this._dcsParser.hook(this._collect << 8 | code, this._params);\n          break;\n        case ParserAction.DCS_PUT:\n          // inner loop - exit DCS_PUT: 0x18, 0x1a, 0x1b, 0x7f, 0x80 - 0x9f\n          // unhook triggered by: 0x1b, 0x9c (success) and 0x18, 0x1a (abort)\n          for (let j = i + 1; ; ++j) {\n            if (j >= length || (code = data[j]) === 0x18 || code === 0x1a || code === 0x1b || (code > 0x7f && code < NON_ASCII_PRINTABLE)) {\n              this._dcsParser.put(data, i, j);\n              i = j - 1;\n              break;\n            }\n          }\n          break;\n        case ParserAction.DCS_UNHOOK:\n          handlerResult = this._dcsParser.unhook(code !== 0x18 && code !== 0x1a);\n          if (handlerResult) {\n            this._preserveStack(ParserStackType.DCS, [], 0, transition, i);\n            return handlerResult;\n          }\n          if (code === 0x1b) transition |= ParserState.ESCAPE;\n          this._params.reset();\n          this._params.addParam(0); // ZDM\n          this._collect = 0;\n          this.precedingCodepoint = 0;\n          break;\n        case ParserAction.OSC_START:\n          this._oscParser.start();\n          break;\n        case ParserAction.OSC_PUT:\n          // inner loop: 0x20 (SP) included, 0x7F (DEL) included\n          for (let j = i + 1; ; j++) {\n            if (j >= length || (code = data[j]) < 0x20 || (code > 0x7f && code < NON_ASCII_PRINTABLE)) {\n              this._oscParser.put(data, i, j);\n              i = j - 1;\n              break;\n            }\n          }\n          break;\n        case ParserAction.OSC_END:\n          handlerResult = this._oscParser.end(code !== 0x18 && code !== 0x1a);\n          if (handlerResult) {\n            this._preserveStack(ParserStackType.OSC, [], 0, transition, i);\n            return handlerResult;\n          }\n          if (code === 0x1b) transition |= ParserState.ESCAPE;\n          this._params.reset();\n          this._params.addParam(0); // ZDM\n          this._collect = 0;\n          this.precedingCodepoint = 0;\n          break;\n      }\n      this.currentState = transition & TableAccess.TRANSITION_STATE_MASK;\n    }\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IOscHandler, IHandlerCollection, OscFallbackHandlerType, IOscParser, ISubParserStackState } from 'common/parser/Types';\nimport { OscState, PAYLOAD_LIMIT } from 'common/parser/Constants';\nimport { utf32ToString } from 'common/input/TextDecoder';\nimport { IDisposable } from 'common/Types';\n\nconst EMPTY_HANDLERS: IOscHandler[] = [];\n\nexport class OscParser implements IOscParser {\n  private _state = OscState.START;\n  private _active = EMPTY_HANDLERS;\n  private _id = -1;\n  private _handlers: IHandlerCollection<IOscHandler> = Object.create(null);\n  private _handlerFb: OscFallbackHandlerType = () => { };\n  private _stack: ISubParserStackState = {\n    paused: false,\n    loopPosition: 0,\n    fallThrough: false\n  };\n\n  public registerHandler(ident: number, handler: IOscHandler): IDisposable {\n    if (this._handlers[ident] === undefined) {\n      this._handlers[ident] = [];\n    }\n    const handlerList = this._handlers[ident];\n    handlerList.push(handler);\n    return {\n      dispose: () => {\n        const handlerIndex = handlerList.indexOf(handler);\n        if (handlerIndex !== -1) {\n          handlerList.splice(handlerIndex, 1);\n        }\n      }\n    };\n  }\n  public clearHandler(ident: number): void {\n    if (this._handlers[ident]) delete this._handlers[ident];\n  }\n  public setHandlerFallback(handler: OscFallbackHandlerType): void {\n    this._handlerFb = handler;\n  }\n\n  public dispose(): void {\n    this._handlers = Object.create(null);\n    this._handlerFb = () => { };\n    this._active = EMPTY_HANDLERS;\n  }\n\n  public reset(): void {\n    // force cleanup handlers if payload was already sent\n    if (this._state === OscState.PAYLOAD) {\n      for (let j = this._stack.paused ? this._stack.loopPosition - 1 : this._active.length - 1; j >= 0; --j) {\n        this._active[j].end(false);\n      }\n    }\n    this._stack.paused = false;\n    this._active = EMPTY_HANDLERS;\n    this._id = -1;\n    this._state = OscState.START;\n  }\n\n  private _start(): void {\n    this._active = this._handlers[this._id] || EMPTY_HANDLERS;\n    if (!this._active.length) {\n      this._handlerFb(this._id, 'START');\n    } else {\n      for (let j = this._active.length - 1; j >= 0; j--) {\n        this._active[j].start();\n      }\n    }\n  }\n\n  private _put(data: Uint32Array, start: number, end: number): void {\n    if (!this._active.length) {\n      this._handlerFb(this._id, 'PUT', utf32ToString(data, start, end));\n    } else {\n      for (let j = this._active.length - 1; j >= 0; j--) {\n        this._active[j].put(data, start, end);\n      }\n    }\n  }\n\n  public start(): void {\n    // always reset leftover handlers\n    this.reset();\n    this._state = OscState.ID;\n  }\n\n  /**\n   * Put data to current OSC command.\n   * Expects the identifier of the OSC command in the form\n   * OSC id ; payload ST/BEL\n   * Payload chunks are not further processed and get\n   * directly passed to the handlers.\n   */\n  public put(data: Uint32Array, start: number, end: number): void {\n    if (this._state === OscState.ABORT) {\n      return;\n    }\n    if (this._state === OscState.ID) {\n      while (start < end) {\n        const code = data[start++];\n        if (code === 0x3b) {\n          this._state = OscState.PAYLOAD;\n          this._start();\n          break;\n        }\n        if (code < 0x30 || 0x39 < code) {\n          this._state = OscState.ABORT;\n          return;\n        }\n        if (this._id === -1) {\n          this._id = 0;\n        }\n        this._id = this._id * 10 + code - 48;\n      }\n    }\n    if (this._state === OscState.PAYLOAD && end - start > 0) {\n      this._put(data, start, end);\n    }\n  }\n\n  /**\n   * Indicates end of an OSC command.\n   * Whether the OSC got aborted or finished normally\n   * is indicated by `success`.\n   */\n  public end(success: boolean, promiseResult: boolean = true): void | Promise<boolean> {\n    if (this._state === OscState.START) {\n      return;\n    }\n    // do nothing if command was faulty\n    if (this._state !== OscState.ABORT) {\n      // if we are still in ID state and get an early end\n      // means that the command has no payload thus we still have\n      // to announce START and send END right after\n      if (this._state === OscState.ID) {\n        this._start();\n      }\n\n      if (!this._active.length) {\n        this._handlerFb(this._id, 'END', success);\n      } else {\n        let handlerResult: boolean | Promise<boolean> = false;\n        let j = this._active.length - 1;\n        let fallThrough = false;\n        if (this._stack.paused) {\n          j = this._stack.loopPosition - 1;\n          handlerResult = promiseResult;\n          fallThrough = this._stack.fallThrough;\n          this._stack.paused = false;\n        }\n        if (!fallThrough && handlerResult === false) {\n          for (; j >= 0; j--) {\n            handlerResult = this._active[j].end(success);\n            if (handlerResult === true) {\n              break;\n            } else if (handlerResult instanceof Promise) {\n              this._stack.paused = true;\n              this._stack.loopPosition = j;\n              this._stack.fallThrough = false;\n              return handlerResult;\n            }\n          }\n          j--;\n        }\n        // cleanup left over handlers\n        // we always have to call .end for proper cleanup,\n        // here we use `success` to indicate whether a handler should execute\n        for (; j >= 0; j--) {\n          handlerResult = this._active[j].end(false);\n          if (handlerResult instanceof Promise) {\n            this._stack.paused = true;\n            this._stack.loopPosition = j;\n            this._stack.fallThrough = true;\n            return handlerResult;\n          }\n        }\n      }\n\n    }\n    this._active = EMPTY_HANDLERS;\n    this._id = -1;\n    this._state = OscState.START;\n  }\n}\n\n/**\n * Convenient class to allow attaching string based handler functions\n * as OSC handlers.\n */\nexport class OscHandler implements IOscHandler {\n  private _data = '';\n  private _hitLimit: boolean = false;\n\n  constructor(private _handler: (data: string) => boolean | Promise<boolean>) { }\n\n  public start(): void {\n    this._data = '';\n    this._hitLimit = false;\n  }\n\n  public put(data: Uint32Array, start: number, end: number): void {\n    if (this._hitLimit) {\n      return;\n    }\n    this._data += utf32ToString(data, start, end);\n    if (this._data.length > PAYLOAD_LIMIT) {\n      this._data = '';\n      this._hitLimit = true;\n    }\n  }\n\n  public end(success: boolean): boolean | Promise<boolean> {\n    let ret: boolean | Promise<boolean> = false;\n    if (this._hitLimit) {\n      ret = false;\n    } else if (success) {\n      ret = this._handler(this._data);\n      if (ret instanceof Promise) {\n        // need to hold data until `ret` got resolved\n        // dont care for errors, data will be freed anyway on next start\n        return ret.then(res => {\n          this._data = '';\n          this._hitLimit = false;\n          return res;\n        });\n      }\n    }\n    this._data = '';\n    this._hitLimit = false;\n    return ret;\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\nimport { IParams, ParamsArray } from 'common/parser/Types';\n\n// max value supported for a single param/subparam (clamped to positive int32 range)\nconst MAX_VALUE = 0x7FFFFFFF;\n// max allowed subparams for a single sequence (hardcoded limitation)\nconst MAX_SUBPARAMS = 256;\n\n/**\n * Params storage class.\n * This type is used by the parser to accumulate sequence parameters and sub parameters\n * and transmit them to the input handler actions.\n *\n * NOTES:\n *  - params object for action handlers is borrowed, use `.toArray` or `.clone` to get a copy\n *  - never read beyond `params.length - 1` (likely to contain arbitrary data)\n *  - `.getSubParams` returns a borrowed typed array, use `.getSubParamsAll` for cloned sub params\n *  - hardcoded limitations:\n *    - max. value for a single (sub) param is 2^31 - 1 (greater values are clamped to that)\n *    - max. 256 sub params possible\n *    - negative values are not allowed beside -1 (placeholder for default value)\n *\n * About ZDM (Zero Default Mode):\n * ZDM is not orchestrated by this class. If the parser is in ZDM,\n * it should add 0 for empty params, otherwise -1. This does not apply\n * to subparams, empty subparams should always be added with -1.\n */\nexport class Params implements IParams {\n  // params store and length\n  public params: Int32Array;\n  public length: number;\n\n  // sub params store and length\n  protected _subParams: Int32Array;\n  protected _subParamsLength: number;\n\n  // sub params offsets from param: param idx --> [start, end] offset\n  private _subParamsIdx: Uint16Array;\n  private _rejectDigits: boolean;\n  private _rejectSubDigits: boolean;\n  private _digitIsSub: boolean;\n\n  /**\n   * Create a `Params` type from JS array representation.\n   */\n  public static fromArray(values: ParamsArray): Params {\n    const params = new Params();\n    if (!values.length) {\n      return params;\n    }\n    // skip leading sub params\n    for (let i = (Array.isArray(values[0])) ? 1 : 0; i < values.length; ++i) {\n      const value = values[i];\n      if (Array.isArray(value)) {\n        for (let k = 0; k < value.length; ++k) {\n          params.addSubParam(value[k]);\n        }\n      } else {\n        params.addParam(value);\n      }\n    }\n    return params;\n  }\n\n  /**\n   * @param maxLength max length of storable parameters\n   * @param maxSubParamsLength max length of storable sub parameters\n   */\n  constructor(public maxLength: number = 32, public maxSubParamsLength: number = 32) {\n    if (maxSubParamsLength > MAX_SUBPARAMS) {\n      throw new Error('maxSubParamsLength must not be greater than 256');\n    }\n    this.params = new Int32Array(maxLength);\n    this.length = 0;\n    this._subParams = new Int32Array(maxSubParamsLength);\n    this._subParamsLength = 0;\n    this._subParamsIdx = new Uint16Array(maxLength);\n    this._rejectDigits = false;\n    this._rejectSubDigits = false;\n    this._digitIsSub = false;\n  }\n\n  /**\n   * Clone object.\n   */\n  public clone(): Params {\n    const newParams = new Params(this.maxLength, this.maxSubParamsLength);\n    newParams.params.set(this.params);\n    newParams.length = this.length;\n    newParams._subParams.set(this._subParams);\n    newParams._subParamsLength = this._subParamsLength;\n    newParams._subParamsIdx.set(this._subParamsIdx);\n    newParams._rejectDigits = this._rejectDigits;\n    newParams._rejectSubDigits = this._rejectSubDigits;\n    newParams._digitIsSub = this._digitIsSub;\n    return newParams;\n  }\n\n  /**\n   * Get a JS array representation of the current parameters and sub parameters.\n   * The array is structured as follows:\n   *    sequence: \"1;2:3:4;5::6\"\n   *    array   : [1, 2, [3, 4], 5, [-1, 6]]\n   */\n  public toArray(): ParamsArray {\n    const res: ParamsArray = [];\n    for (let i = 0; i < this.length; ++i) {\n      res.push(this.params[i]);\n      const start = this._subParamsIdx[i] >> 8;\n      const end = this._subParamsIdx[i] & 0xFF;\n      if (end - start > 0) {\n        res.push(Array.prototype.slice.call(this._subParams, start, end));\n      }\n    }\n    return res;\n  }\n\n  /**\n   * Reset to initial empty state.\n   */\n  public reset(): void {\n    this.length = 0;\n    this._subParamsLength = 0;\n    this._rejectDigits = false;\n    this._rejectSubDigits = false;\n    this._digitIsSub = false;\n  }\n\n  /**\n   * Add a parameter value.\n   * `Params` only stores up to `maxLength` parameters, any later\n   * parameter will be ignored.\n   * Note: VT devices only stored up to 16 values, xterm seems to\n   * store up to 30.\n   */\n  public addParam(value: number): void {\n    this._digitIsSub = false;\n    if (this.length >= this.maxLength) {\n      this._rejectDigits = true;\n      return;\n    }\n    if (value < -1) {\n      throw new Error('values lesser than -1 are not allowed');\n    }\n    this._subParamsIdx[this.length] = this._subParamsLength << 8 | this._subParamsLength;\n    this.params[this.length++] = value > MAX_VALUE ? MAX_VALUE : value;\n  }\n\n  /**\n   * Add a sub parameter value.\n   * The sub parameter is automatically associated with the last parameter value.\n   * Thus it is not possible to add a subparameter without any parameter added yet.\n   * `Params` only stores up to `subParamsLength` sub parameters, any later\n   * sub parameter will be ignored.\n   */\n  public addSubParam(value: number): void {\n    this._digitIsSub = true;\n    if (!this.length) {\n      return;\n    }\n    if (this._rejectDigits || this._subParamsLength >= this.maxSubParamsLength) {\n      this._rejectSubDigits = true;\n      return;\n    }\n    if (value < -1) {\n      throw new Error('values lesser than -1 are not allowed');\n    }\n    this._subParams[this._subParamsLength++] = value > MAX_VALUE ? MAX_VALUE : value;\n    this._subParamsIdx[this.length - 1]++;\n  }\n\n  /**\n   * Whether parameter at index `idx` has sub parameters.\n   */\n  public hasSubParams(idx: number): boolean {\n    return ((this._subParamsIdx[idx] & 0xFF) - (this._subParamsIdx[idx] >> 8) > 0);\n  }\n\n  /**\n   * Return sub parameters for parameter at index `idx`.\n   * Note: The values are borrowed, thus you need to copy\n   * the values if you need to hold them in nonlocal scope.\n   */\n  public getSubParams(idx: number): Int32Array | null {\n    const start = this._subParamsIdx[idx] >> 8;\n    const end = this._subParamsIdx[idx] & 0xFF;\n    if (end - start > 0) {\n      return this._subParams.subarray(start, end);\n    }\n    return null;\n  }\n\n  /**\n   * Return all sub parameters as {idx: subparams} mapping.\n   * Note: The values are not borrowed.\n   */\n  public getSubParamsAll(): {[idx: number]: Int32Array} {\n    const result: {[idx: number]: Int32Array} = {};\n    for (let i = 0; i < this.length; ++i) {\n      const start = this._subParamsIdx[i] >> 8;\n      const end = this._subParamsIdx[i] & 0xFF;\n      if (end - start > 0) {\n        result[i] = this._subParams.slice(start, end);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Add a single digit value to current parameter.\n   * This is used by the parser to account digits on a char by char basis.\n   */\n  public addDigit(value: number): void {\n    let length;\n    if (this._rejectDigits\n      || !(length = this._digitIsSub ? this._subParamsLength : this.length)\n      || (this._digitIsSub && this._rejectSubDigits)\n    ) {\n      return;\n    }\n\n    const store = this._digitIsSub ? this._subParams : this.params;\n    const cur = store[length - 1];\n    store[length - 1] = ~cur ? Math.min(cur * 10 + value, MAX_VALUE) : value;\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ITerminalAddon, IDisposable, Terminal } from 'xterm';\n\nexport interface ILoadedAddon {\n  instance: ITerminalAddon;\n  dispose: () => void;\n  isDisposed: boolean;\n}\n\nexport class AddonManager implements IDisposable {\n  protected _addons: ILoadedAddon[] = [];\n\n  constructor() {\n  }\n\n  public dispose(): void {\n    for (let i = this._addons.length - 1; i >= 0; i--) {\n      this._addons[i].instance.dispose();\n    }\n  }\n\n  public loadAddon(terminal: Terminal, instance: ITerminalAddon): void {\n    const loadedAddon: ILoadedAddon = {\n      instance,\n      dispose: instance.dispose,\n      isDisposed: false\n    };\n    this._addons.push(loadedAddon);\n    instance.dispose = () => this._wrappedAddonDispose(loadedAddon);\n    instance.activate(terminal as any);\n  }\n\n  private _wrappedAddonDispose(loadedAddon: ILoadedAddon): void {\n    if (loadedAddon.isDisposed) {\n      // Do nothing if already disposed\n      return;\n    }\n    let index = -1;\n    for (let i = 0; i < this._addons.length; i++) {\n      if (this._addons[i] === loadedAddon) {\n        index = i;\n        break;\n      }\n    }\n    if (index === -1) {\n      throw new Error('Could not dispose an addon that has not been loaded');\n    }\n    loadedAddon.isDisposed = true;\n    loadedAddon.dispose.apply(loadedAddon.instance);\n    this._addons.splice(index, 1);\n  }\n}\n", "/**\n * Copyright (c) 2021 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IBuffer as IBufferApi, IBufferLine as IBufferLineApi, IBufferCell as IBufferCellApi } from 'xterm';\nimport { IBuffer } from 'common/buffer/Types';\nimport { BufferLineApiView } from 'common/public/BufferLineApiView';\nimport { CellData } from 'common/buffer/CellData';\n\nexport class BufferApiView implements IBufferApi {\n  constructor(\n    private _buffer: IBuffer,\n    public readonly type: 'normal' | 'alternate'\n  ) { }\n\n  public init(buffer: IBuffer): BufferApiView {\n    this._buffer = buffer;\n    return this;\n  }\n\n  public get cursorY(): number { return this._buffer.y; }\n  public get cursorX(): number { return this._buffer.x; }\n  public get viewportY(): number { return this._buffer.ydisp; }\n  public get baseY(): number { return this._buffer.ybase; }\n  public get length(): number { return this._buffer.lines.length; }\n  public getLine(y: number): IBufferLineApi | undefined {\n    const line = this._buffer.lines.get(y);\n    if (!line) {\n      return undefined;\n    }\n    return new BufferLineApiView(line);\n  }\n  public getNullCell(): IBufferCellApi { return new CellData(); }\n}\n", "/**\n * Copyright (c) 2021 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { CellData } from 'common/buffer/CellData';\nimport { IBufferLine, ICellData } from 'common/Types';\nimport { IBufferCell as IBufferCellApi, IBufferLine as IBufferLineApi } from 'xterm';\n\nexport class BufferLineApiView implements IBufferLineApi {\n  constructor(private _line: IBufferLine) { }\n\n  public get isWrapped(): boolean { return this._line.isWrapped; }\n  public get length(): number { return this._line.length; }\n  public getCell(x: number, cell?: IBufferCellApi): IBufferCellApi | undefined {\n    if (x < 0 || x >= this._line.length) {\n      return undefined;\n    }\n\n    if (cell) {\n      this._line.loadCell(x, cell as ICellData);\n      return cell;\n    }\n    return this._line.loadCell(x, new CellData());\n  }\n  public translateToString(trimRight?: boolean, startColumn?: number, endColumn?: number): string {\n    return this._line.translateToString(trimRight, startColumn, endColumn);\n  }\n}\n", "/**\n * Copyright (c) 2021 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IBuffer as IBufferApi, IBufferNamespace as IBufferNamespaceApi } from 'xterm';\nimport { BufferApiView } from 'common/public/BufferApiView';\nimport { IEvent, EventEmitter } from 'common/EventEmitter';\nimport { ICoreTerminal } from 'common/Types';\n\nexport class BufferNamespaceApi implements IBufferNamespaceApi {\n  private _normal: BufferApiView;\n  private _alternate: BufferApiView;\n  private _onBufferChange = new EventEmitter<IBufferApi>();\n  public get onBufferChange(): IEvent<IBufferApi> { return this._onBufferChange.event; }\n\n  constructor(private _core: ICoreTerminal) {\n    this._normal = new BufferApiView(this._core.buffers.normal, 'normal');\n    this._alternate = new BufferApiView(this._core.buffers.alt, 'alternate');\n    this._core.buffers.onBufferActivate(() => this._onBufferChange.fire(this.active));\n  }\n  public get active(): IBufferApi {\n    if (this._core.buffers.active === this._core.buffers.normal) { return this.normal; }\n    if (this._core.buffers.active === this._core.buffers.alt) { return this.alternate; }\n    throw new Error('Active buffer is neither normal nor alternate');\n  }\n  public get normal(): IBufferApi {\n    return this._normal.init(this._core.buffers.normal);\n  }\n  public get alternate(): IBufferApi {\n    return this._alternate.init(this._core.buffers.alt);\n  }\n}\n", "/**\n * Copyright (c) 2021 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IParams } from 'common/parser/Types';\nimport { IDisposable, IFunctionIdentifier, IParser } from 'xterm';\nimport { ICoreTerminal } from 'common/Types';\n\nexport class ParserApi implements IParser {\n  constructor(private _core: ICoreTerminal) { }\n\n  public registerCsiHandler(id: IFunctionIdentifier, callback: (params: (number | number[])[]) => boolean | Promise<boolean>): IDisposable {\n    return this._core.registerCsiHandler(id, (params: IParams) => callback(params.toArray()));\n  }\n  public addCsiHandler(id: IFunctionIdentifier, callback: (params: (number | number[])[]) => boolean | Promise<boolean>): IDisposable {\n    return this.registerCsiHandler(id, callback);\n  }\n  public registerDcsHandler(id: IFunctionIdentifier, callback: (data: string, param: (number | number[])[]) => boolean | Promise<boolean>): IDisposable {\n    return this._core.registerDcsHandler(id, (data: string, params: IParams) => callback(data, params.toArray()));\n  }\n  public addDcsHandler(id: IFunctionIdentifier, callback: (data: string, param: (number | number[])[]) => boolean | Promise<boolean>): IDisposable {\n    return this.registerDcsHandler(id, callback);\n  }\n  public registerEscHandler(id: IFunctionIdentifier, handler: () => boolean | Promise<boolean>): IDisposable {\n    return this._core.registerEscHandler(id, handler);\n  }\n  public addEscHandler(id: IFunctionIdentifier, handler: () => boolean | Promise<boolean>): IDisposable {\n    return this.registerEscHandler(id, handler);\n  }\n  public registerOscHandler(ident: number, callback: (data: string) => boolean | Promise<boolean>): IDisposable {\n    return this._core.registerOscHandler(ident, callback);\n  }\n  public addOscHandler(ident: number, callback: (data: string) => boolean | Promise<boolean>): IDisposable {\n    return this.registerOscHandler(ident, callback);\n  }\n}\n", "/**\n * Copyright (c) 2021 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ICoreTerminal } from 'common/Types';\nimport { IUnicodeHandling, IUnicodeVersionProvider } from 'xterm';\n\nexport class UnicodeApi implements IUnicodeHandling {\n  constructor(private _core: ICoreTerminal) { }\n\n  public register(provider: IUnicodeVersionProvider): void {\n    this._core.unicodeService.register(provider);\n  }\n\n  public get versions(): string[] {\n    return this._core.unicodeService.versions;\n  }\n\n  public get activeVersion(): string {\n    return this._core.unicodeService.activeVersion;\n  }\n\n  public set activeVersion(version: string) {\n    this._core.unicodeService.activeVersion = version;\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IBufferService, IOptionsService } from 'common/services/Services';\nimport { BufferSet } from 'common/buffer/BufferSet';\nimport { IBufferSet, IBuffer } from 'common/buffer/Types';\nimport { EventEmitter, IEvent } from 'common/EventEmitter';\nimport { Disposable } from 'common/Lifecycle';\nimport { IAttributeData, IBufferLine, ScrollSource } from 'common/Types';\n\nexport const MINIMUM_COLS = 2; // Less than 2 can mess with wide chars\nexport const MINIMUM_ROWS = 1;\n\nexport class BufferService extends Disposable implements IBufferService {\n  public serviceBrand: any;\n\n  public cols: number;\n  public rows: number;\n  public buffers: IBufferSet;\n  /** Whether the user is scrolling (locks the scroll position) */\n  public isUserScrolling: boolean = false;\n\n  private _onResize = new EventEmitter<{ cols: number, rows: number }>();\n  public get onResize(): IEvent<{ cols: number, rows: number }> { return this._onResize.event; }\n  private _onScroll = new EventEmitter<number>();\n  public get onScroll(): IEvent<number> { return this._onScroll.event; }\n\n  public get buffer(): IBuffer { return this.buffers.active; }\n\n  /** An IBufferline to clone/copy from for new blank lines */\n  private _cachedBlankLine: IBufferLine | undefined;\n\n  constructor(\n    @IOptionsService private _optionsService: IOptionsService\n  ) {\n    super();\n    this.cols = Math.max(_optionsService.rawOptions.cols || 0, MINIMUM_COLS);\n    this.rows = Math.max(_optionsService.rawOptions.rows || 0, MINIMUM_ROWS);\n    this.buffers = new BufferSet(_optionsService, this);\n  }\n\n  public dispose(): void {\n    super.dispose();\n    this.buffers.dispose();\n  }\n\n  public resize(cols: number, rows: number): void {\n    this.cols = cols;\n    this.rows = rows;\n    this.buffers.resize(cols, rows);\n    this.buffers.setupTabStops(this.cols);\n    this._onResize.fire({ cols, rows });\n  }\n\n  public reset(): void {\n    this.buffers.reset();\n    this.isUserScrolling = false;\n  }\n\n  /**\n   * Scroll the terminal down 1 row, creating a blank line.\n   * @param isWrapped Whether the new line is wrapped from the previous line.\n   */\n  public scroll(eraseAttr: IAttributeData, isWrapped: boolean = false): void {\n    const buffer = this.buffer;\n\n    let newLine: IBufferLine | undefined;\n    newLine = this._cachedBlankLine;\n    if (!newLine || newLine.length !== this.cols || newLine.getFg(0) !== eraseAttr.fg || newLine.getBg(0) !== eraseAttr.bg) {\n      newLine = buffer.getBlankLine(eraseAttr, isWrapped);\n      this._cachedBlankLine = newLine;\n    }\n    newLine.isWrapped = isWrapped;\n\n    const topRow = buffer.ybase + buffer.scrollTop;\n    const bottomRow = buffer.ybase + buffer.scrollBottom;\n\n    if (buffer.scrollTop === 0) {\n      // Determine whether the buffer is going to be trimmed after insertion.\n      const willBufferBeTrimmed = buffer.lines.isFull;\n\n      // Insert the line using the fastest method\n      if (bottomRow === buffer.lines.length - 1) {\n        if (willBufferBeTrimmed) {\n          buffer.lines.recycle().copyFrom(newLine);\n        } else {\n          buffer.lines.push(newLine.clone());\n        }\n      } else {\n        buffer.lines.splice(bottomRow + 1, 0, newLine.clone());\n      }\n\n      // Only adjust ybase and ydisp when the buffer is not trimmed\n      if (!willBufferBeTrimmed) {\n        buffer.ybase++;\n        // Only scroll the ydisp with ybase if the user has not scrolled up\n        if (!this.isUserScrolling) {\n          buffer.ydisp++;\n        }\n      } else {\n        // When the buffer is full and the user has scrolled up, keep the text\n        // stable unless ydisp is right at the top\n        if (this.isUserScrolling) {\n          buffer.ydisp = Math.max(buffer.ydisp - 1, 0);\n        }\n      }\n    } else {\n      // scrollTop is non-zero which means no line will be going to the\n      // scrollback, instead we can just shift them in-place.\n      const scrollRegionHeight = bottomRow - topRow + 1 /* as it's zero-based */;\n      buffer.lines.shiftElements(topRow + 1, scrollRegionHeight - 1, -1);\n      buffer.lines.set(bottomRow, newLine.clone());\n    }\n\n    // Move the viewport to the bottom of the buffer unless the user is\n    // scrolling.\n    if (!this.isUserScrolling) {\n      buffer.ydisp = buffer.ybase;\n    }\n\n    this._onScroll.fire(buffer.ydisp);\n  }\n\n  /**\n   * Scroll the display of the terminal\n   * @param disp The number of lines to scroll down (negative scroll up).\n   * @param suppressScrollEvent Don't emit the scroll event as scrollLines. This is used\n   * to avoid unwanted events being handled by the viewport when the event was triggered from the\n   * viewport originally.\n   */\n  public scrollLines(disp: number, suppressScrollEvent?: boolean, source?: ScrollSource): void {\n    const buffer = this.buffer;\n    if (disp < 0) {\n      if (buffer.ydisp === 0) {\n        return;\n      }\n      this.isUserScrolling = true;\n    } else if (disp + buffer.ydisp >= buffer.ybase) {\n      this.isUserScrolling = false;\n    }\n\n    const oldYdisp = buffer.ydisp;\n    buffer.ydisp = Math.max(Math.min(buffer.ydisp + disp, buffer.ybase), 0);\n\n    // No change occurred, don't trigger scroll/refresh\n    if (oldYdisp === buffer.ydisp) {\n      return;\n    }\n\n    if (!suppressScrollEvent) {\n      this._onScroll.fire(buffer.ydisp);\n    }\n  }\n\n  /**\n   * Scroll the display of the terminal by a number of pages.\n   * @param pageCount The number of pages to scroll (negative scrolls up).\n   */\n  public scrollPages(pageCount: number): void {\n    this.scrollLines(pageCount * (this.rows - 1));\n  }\n\n  /**\n   * Scrolls the display of the terminal to the top.\n   */\n  public scrollToTop(): void {\n    this.scrollLines(-this.buffer.ydisp);\n  }\n\n  /**\n   * Scrolls the display of the terminal to the bottom.\n   */\n  public scrollToBottom(): void {\n    this.scrollLines(this.buffer.ybase - this.buffer.ydisp);\n  }\n\n  public scrollToLine(line: number): void {\n    const scrollAmount = line - this.buffer.ydisp;\n    if (scrollAmount !== 0) {\n      this.scrollLines(scrollAmount);\n    }\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ICharsetService } from 'common/services/Services';\nimport { ICharset } from 'common/Types';\n\nexport class CharsetService implements ICharsetService {\n  public serviceBrand: any;\n\n  public charset: ICharset | undefined;\n  public glevel: number = 0;\n\n  private _charsets: (ICharset | undefined)[] = [];\n\n  public reset(): void {\n    this.charset = undefined;\n    this._charsets = [];\n    this.glevel = 0;\n  }\n\n  public setgLevel(g: number): void {\n    this.glevel = g;\n    this.charset = this._charsets[g];\n  }\n\n  public setgCharset(g: number, charset: ICharset | undefined): void {\n    this._charsets[g] = charset;\n    if (this.glevel === g) {\n      this.charset = charset;\n    }\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\nimport { IBufferService, ICoreService, ICoreMouseService } from 'common/services/Services';\nimport { EventEmitter, IEvent } from 'common/EventEmitter';\nimport { ICoreMouseProtocol, ICoreMouseEvent, CoreMouseEncoding, CoreMouseEventType, CoreMouseButton, CoreMouseAction } from 'common/Types';\n\n/**\n * Supported default protocols.\n */\nconst DEFAULT_PROTOCOLS: {[key: string]: ICoreMouseProtocol} = {\n  /**\n   * NONE\n   * Events: none\n   * Modifiers: none\n   */\n  NONE: {\n    events: CoreMouseEventType.NONE,\n    restrict: () => false\n  },\n  /**\n   * X10\n   * Events: mousedown\n   * Modifiers: none\n   */\n  X10: {\n    events: CoreMouseEventType.DOWN,\n    restrict: (e: ICoreMouseEvent) => {\n      // no wheel, no move, no up\n      if (e.button === CoreMouseButton.WHEEL || e.action !== CoreMouseAction.DOWN) {\n        return false;\n      }\n      // no modifiers\n      e.ctrl = false;\n      e.alt = false;\n      e.shift = false;\n      return true;\n    }\n  },\n  /**\n   * VT200\n   * Events: mousedown / mouseup / wheel\n   * Modifiers: all\n   */\n  VT200: {\n    events: CoreMouseEventType.DOWN | CoreMouseEventType.UP | CoreMouseEventType.WHEEL,\n    restrict: (e: ICoreMouseEvent) => {\n      // no move\n      if (e.action === CoreMouseAction.MOVE) {\n        return false;\n      }\n      return true;\n    }\n  },\n  /**\n   * DRAG\n   * Events: mousedown / mouseup / wheel / mousedrag\n   * Modifiers: all\n   */\n  DRAG: {\n    events: CoreMouseEventType.DOWN | CoreMouseEventType.UP | CoreMouseEventType.WHEEL | CoreMouseEventType.DRAG,\n    restrict: (e: ICoreMouseEvent) => {\n      // no move without button\n      if (e.action === CoreMouseAction.MOVE && e.button === CoreMouseButton.NONE) {\n        return false;\n      }\n      return true;\n    }\n  },\n  /**\n   * ANY\n   * Events: all mouse related events\n   * Modifiers: all\n   */\n  ANY: {\n    events:\n      CoreMouseEventType.DOWN | CoreMouseEventType.UP | CoreMouseEventType.WHEEL\n      | CoreMouseEventType.DRAG | CoreMouseEventType.MOVE,\n    restrict: (e: ICoreMouseEvent) => true\n  }\n};\n\nconst enum Modifiers {\n  SHIFT = 4,\n  ALT = 8,\n  CTRL = 16\n}\n\n// helper for default encoders to generate the event code.\nfunction eventCode(e: ICoreMouseEvent, isSGR: boolean): number {\n  let code = (e.ctrl ? Modifiers.CTRL : 0) | (e.shift ? Modifiers.SHIFT : 0) | (e.alt ? Modifiers.ALT : 0);\n  if (e.button === CoreMouseButton.WHEEL) {\n    code |= 64;\n    code |= e.action;\n  } else {\n    code |= e.button & 3;\n    if (e.button & 4) {\n      code |= 64;\n    }\n    if (e.button & 8) {\n      code |= 128;\n    }\n    if (e.action === CoreMouseAction.MOVE) {\n      code |= CoreMouseAction.MOVE;\n    } else if (e.action === CoreMouseAction.UP && !isSGR) {\n      // special case - only SGR can report button on release\n      // all others have to go with NONE\n      code |= CoreMouseButton.NONE;\n    }\n  }\n  return code;\n}\n\nconst S = String.fromCharCode;\n\n/**\n * Supported default encodings.\n */\nconst DEFAULT_ENCODINGS: {[key: string]: CoreMouseEncoding} = {\n  /**\n   * DEFAULT - CSI M Pb Px Py\n   * Single byte encoding for coords and event code.\n   * Can encode values up to 223 (1-based).\n   */\n  DEFAULT: (e: ICoreMouseEvent) => {\n    const params = [eventCode(e, false) + 32, e.col + 32, e.row + 32];\n    // supress mouse report if we exceed addressible range\n    // Note this is handled differently by emulators\n    // - xterm:         sends 0;0 coords instead\n    // - vte, konsole:  no report\n    if (params[0] > 255 || params[1] > 255 || params[2] > 255) {\n      return '';\n    }\n    return `\\x1b[M${S(params[0])}${S(params[1])}${S(params[2])}`;\n  },\n  /**\n   * SGR - CSI < Pb ; Px ; Py M|m\n   * No encoding limitation.\n   * Can report button on release and works with a well formed sequence.\n   */\n  SGR: (e: ICoreMouseEvent) => {\n    const final = (e.action === CoreMouseAction.UP && e.button !== CoreMouseButton.WHEEL) ? 'm' : 'M';\n    return `\\x1b[<${eventCode(e, true)};${e.col};${e.row}${final}`;\n  }\n};\n\n/**\n * CoreMouseService\n *\n * Provides mouse tracking reports with different protocols and encodings.\n *  - protocols: NONE (default), X10, VT200, DRAG, ANY\n *  - encodings: DEFAULT, SGR (UTF8, URXVT removed in #2507)\n *\n * Custom protocols/encodings can be added by `addProtocol` / `addEncoding`.\n * To activate a protocol/encoding, set `activeProtocol` / `activeEncoding`.\n * Switching a protocol will send a notification event `onProtocolChange`\n * with a list of needed events to track.\n *\n * The service handles the mouse tracking state and decides whether to send\n * a tracking report to the backend based on protocol and encoding limitations.\n * To send a mouse event call `triggerMouseEvent`.\n */\nexport class CoreMouseService implements ICoreMouseService {\n  private _protocols: {[name: string]: ICoreMouseProtocol} = {};\n  private _encodings: {[name: string]: CoreMouseEncoding} = {};\n  private _activeProtocol: string = '';\n  private _activeEncoding: string = '';\n  private _onProtocolChange = new EventEmitter<CoreMouseEventType>();\n  private _lastEvent: ICoreMouseEvent | null = null;\n\n  constructor(\n    @IBufferService private readonly _bufferService: IBufferService,\n    @ICoreService private readonly _coreService: ICoreService\n  ) {\n    // register default protocols and encodings\n    for (const name of Object.keys(DEFAULT_PROTOCOLS)) this.addProtocol(name, DEFAULT_PROTOCOLS[name]);\n    for (const name of Object.keys(DEFAULT_ENCODINGS)) this.addEncoding(name, DEFAULT_ENCODINGS[name]);\n    // call reset to set defaults\n    this.reset();\n  }\n\n  public addProtocol(name: string, protocol: ICoreMouseProtocol): void {\n    this._protocols[name] = protocol;\n  }\n\n  public addEncoding(name: string, encoding: CoreMouseEncoding): void {\n    this._encodings[name] = encoding;\n  }\n\n  public get activeProtocol(): string {\n    return this._activeProtocol;\n  }\n\n  public get areMouseEventsActive(): boolean {\n    return this._protocols[this._activeProtocol].events !== 0;\n  }\n\n  public set activeProtocol(name: string) {\n    if (!this._protocols[name]) {\n      throw new Error(`unknown protocol \"${name}\"`);\n    }\n    this._activeProtocol = name;\n    this._onProtocolChange.fire(this._protocols[name].events);\n  }\n\n  public get activeEncoding(): string {\n    return this._activeEncoding;\n  }\n\n  public set activeEncoding(name: string) {\n    if (!this._encodings[name]) {\n      throw new Error(`unknown encoding \"${name}\"`);\n    }\n    this._activeEncoding = name;\n  }\n\n  public reset(): void {\n    this.activeProtocol = 'NONE';\n    this.activeEncoding = 'DEFAULT';\n    this._lastEvent = null;\n  }\n\n  /**\n   * Event to announce changes in mouse tracking.\n   */\n  public get onProtocolChange(): IEvent<CoreMouseEventType> {\n    return this._onProtocolChange.event;\n  }\n\n  /**\n   * Triggers a mouse event to be sent.\n   *\n   * Returns true if the event passed all protocol restrictions and a report\n   * was sent, otherwise false. The return value may be used to decide whether\n   * the default event action in the bowser component should be omitted.\n   *\n   * Note: The method will change values of the given event object\n   * to fullfill protocol and encoding restrictions.\n   */\n  public triggerMouseEvent(e: ICoreMouseEvent): boolean {\n    // range check for col/row\n    if (e.col < 0 || e.col >= this._bufferService.cols\n        || e.row < 0 || e.row >= this._bufferService.rows) {\n      return false;\n    }\n\n    // filter nonsense combinations of button + action\n    if (e.button === CoreMouseButton.WHEEL && e.action === CoreMouseAction.MOVE) {\n      return false;\n    }\n    if (e.button === CoreMouseButton.NONE && e.action !== CoreMouseAction.MOVE) {\n      return false;\n    }\n    if (e.button !== CoreMouseButton.WHEEL && (e.action === CoreMouseAction.LEFT || e.action === CoreMouseAction.RIGHT)) {\n      return false;\n    }\n\n    // report 1-based coords\n    e.col++;\n    e.row++;\n\n    // debounce move at grid level\n    if (e.action === CoreMouseAction.MOVE && this._lastEvent && this._compareEvents(this._lastEvent, e)) {\n      return false;\n    }\n\n    // apply protocol restrictions\n    if (!this._protocols[this._activeProtocol].restrict(e)) {\n      return false;\n    }\n\n    // encode report and send\n    const report = this._encodings[this._activeEncoding](e);\n    if (report) {\n      // always send DEFAULT as binary data\n      if (this._activeEncoding === 'DEFAULT') {\n        this._coreService.triggerBinaryEvent(report);\n      } else {\n        this._coreService.triggerDataEvent(report, true);\n      }\n    }\n\n    this._lastEvent = e;\n\n    return true;\n  }\n\n  public explainEvents(events: CoreMouseEventType): {[event: string]: boolean} {\n    return {\n      down: !!(events & CoreMouseEventType.DOWN),\n      up: !!(events & CoreMouseEventType.UP),\n      drag: !!(events & CoreMouseEventType.DRAG),\n      move: !!(events & CoreMouseEventType.MOVE),\n      wheel: !!(events & CoreMouseEventType.WHEEL)\n    };\n  }\n\n  private _compareEvents(e1: ICoreMouseEvent, e2: ICoreMouseEvent): boolean {\n    if (e1.col !== e2.col) return false;\n    if (e1.row !== e2.row) return false;\n    if (e1.button !== e2.button) return false;\n    if (e1.action !== e2.action) return false;\n    if (e1.ctrl !== e2.ctrl) return false;\n    if (e1.alt !== e2.alt) return false;\n    if (e1.shift !== e2.shift) return false;\n    return true;\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ICoreService, ILogService, IOptionsService, IBufferService } from 'common/services/Services';\nimport { EventEmitter, IEvent } from 'common/EventEmitter';\nimport { IDecPrivateModes, IModes } from 'common/Types';\nimport { clone } from 'common/Clone';\nimport { Disposable } from 'common/Lifecycle';\n\nconst DEFAULT_MODES: IModes = Object.freeze({\n  insertMode: false\n});\n\nconst DEFAULT_DEC_PRIVATE_MODES: IDecPrivateModes = Object.freeze({\n  applicationCursorKeys: false,\n  applicationKeypad: false,\n  bracketedPasteMode: false,\n  origin: false,\n  reverseWraparound: false,\n  sendFocus: false,\n  wraparound: true // defaults: xterm - true, vt100 - false\n});\n\nexport class CoreService extends Disposable implements ICoreService {\n  public serviceBrand: any;\n\n  public isCursorInitialized: boolean = false;\n  public isCursorHidden: boolean = false;\n  public modes: IModes;\n  public decPrivateModes: IDecPrivateModes;\n\n  // Circular dependency, this must be unset or memory will leak after Terminal.dispose\n  private _scrollToBottom: (() => void) | undefined;\n\n  private _onData = this.register(new EventEmitter<string>());\n  public get onData(): IEvent<string> { return this._onData.event; }\n  private _onUserInput = this.register(new EventEmitter<void>());\n  public get onUserInput(): IEvent<void> { return this._onUserInput.event; }\n  private _onBinary = this.register(new EventEmitter<string>());\n  public get onBinary(): IEvent<string> { return this._onBinary.event; }\n\n  constructor(\n    // TODO: Move this into a service\n    scrollToBottom: () => void,\n    @IBufferService private readonly _bufferService: IBufferService,\n    @ILogService private readonly _logService: ILogService,\n    @IOptionsService private readonly _optionsService: IOptionsService\n  ) {\n    super();\n    this._scrollToBottom = scrollToBottom;\n    this.register({ dispose: () => this._scrollToBottom = undefined });\n    this.modes = clone(DEFAULT_MODES);\n    this.decPrivateModes = clone(DEFAULT_DEC_PRIVATE_MODES);\n  }\n\n  public reset(): void {\n    this.modes = clone(DEFAULT_MODES);\n    this.decPrivateModes = clone(DEFAULT_DEC_PRIVATE_MODES);\n  }\n\n  public triggerDataEvent(data: string, wasUserInput: boolean = false): void {\n    // Prevents all events to pty process if stdin is disabled\n    if (this._optionsService.rawOptions.disableStdin) {\n      return;\n    }\n\n    // Input is being sent to the terminal, the terminal should focus the prompt.\n    const buffer = this._bufferService.buffer;\n    if (buffer.ybase !== buffer.ydisp) {\n      this._scrollToBottom!();\n    }\n\n    // Fire onUserInput so listeners can react as well (eg. clear selection)\n    if (wasUserInput) {\n      this._onUserInput.fire();\n    }\n\n    // Fire onData API\n    this._logService.debug(`sending data \"${data}\"`, () => data.split('').map(e => e.charCodeAt(0)));\n    this._onData.fire(data);\n  }\n\n  public triggerBinaryEvent(data: string): void {\n    if (this._optionsService.rawOptions.disableStdin) {\n      return;\n    }\n    this._logService.debug(`sending binary \"${data}\"`, () => data.split('').map(e => e.charCodeAt(0)));\n    this._onBinary.fire(data);\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IBufferService, IDirtyRowService } from 'common/services/Services';\n\nexport class DirtyRowService implements IDirtyRowService {\n  public serviceBrand: any;\n\n  private _start!: number;\n  private _end!: number;\n\n  public get start(): number { return this._start; }\n  public get end(): number { return this._end; }\n\n  constructor(\n    @IBufferService private readonly _bufferService: IBufferService\n  ) {\n    this.clearRange();\n  }\n\n  public clearRange(): void {\n    this._start = this._bufferService.buffer.y;\n    this._end = this._bufferService.buffer.y;\n  }\n\n  public markDirty(y: number): void {\n    if (y < this._start) {\n      this._start = y;\n    } else if (y > this._end) {\n      this._end = y;\n    }\n  }\n\n  public markRangeDirty(y1: number, y2: number): void {\n    if (y1 > y2) {\n      const temp = y1;\n      y1 = y2;\n      y2 = temp;\n    }\n    if (y1 < this._start) {\n      this._start = y1;\n    }\n    if (y2 > this._end) {\n      this._end = y2;\n    }\n  }\n\n  public markAllDirty(): void {\n    this.markRangeDirty(0, this._bufferService.rows - 1);\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n *\n * This was heavily inspired from microsoft/vscode's dependency injection system (MIT).\n */\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IInstantiationService, IServiceIdentifier } from 'common/services/Services';\nimport { getServiceDependencies } from 'common/services/ServiceRegistry';\n\nexport class ServiceCollection {\n\n  private _entries = new Map<IServiceIdentifier<any>, any>();\n\n  constructor(...entries: [IServiceIdentifier<any>, any][]) {\n    for (const [id, service] of entries) {\n      this.set(id, service);\n    }\n  }\n\n  public set<T>(id: IServiceIdentifier<T>, instance: T): T {\n    const result = this._entries.get(id);\n    this._entries.set(id, instance);\n    return result;\n  }\n\n  public forEach(callback: (id: IServiceIdentifier<any>, instance: any) => any): void {\n    this._entries.forEach((value, key) => callback(key, value));\n  }\n\n  public has(id: IServiceIdentifier<any>): boolean {\n    return this._entries.has(id);\n  }\n\n  public get<T>(id: IServiceIdentifier<T>): T | undefined {\n    return this._entries.get(id);\n  }\n}\n\nexport class InstantiationService implements IInstantiationService {\n  public serviceBrand: undefined;\n\n  private readonly _services: ServiceCollection = new ServiceCollection();\n\n  constructor() {\n    this._services.set(IInstantiationService, this);\n  }\n\n  public setService<T>(id: IServiceIdentifier<T>, instance: T): void {\n    this._services.set(id, instance);\n  }\n\n  public getService<T>(id: IServiceIdentifier<T>): T | undefined {\n    return this._services.get(id);\n  }\n\n  public createInstance<T>(ctor: any, ...args: any[]): T {\n    const serviceDependencies = getServiceDependencies(ctor).sort((a, b) => a.index - b.index);\n\n    const serviceArgs: any[] = [];\n    for (const dependency of serviceDependencies) {\n      const service = this._services.get(dependency.id);\n      if (!service) {\n        throw new Error(`[createInstance] ${ctor.name} depends on UNKNOWN service ${dependency.id}.`);\n      }\n      serviceArgs.push(service);\n    }\n\n    const firstServiceArgPos = serviceDependencies.length > 0 ? serviceDependencies[0].index : args.length;\n\n    // check for argument mismatches, adjust static args if needed\n    if (args.length !== firstServiceArgPos) {\n      throw new Error(`[createInstance] First service dependency of ${ctor.name} at position ${firstServiceArgPos + 1} conflicts with ${args.length} static arguments`);\n    }\n\n    // now create the instance\n    return new ctor(...[...args, ...serviceArgs]);\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ILogService, IOptionsService, LogLevelEnum } from 'common/services/Services';\n\ntype LogType = (message?: any, ...optionalParams: any[]) => void;\n\ninterface IConsole {\n  log: LogType;\n  error: LogType;\n  info: LogType;\n  trace: LogType;\n  warn: LogType;\n}\n\n// console is available on both node.js and browser contexts but the common\n// module doesn't depend on them so we need to explicitly declare it.\ndeclare const console: IConsole;\n\nconst optionsKeyToLogLevel: { [key: string]: LogLevelEnum } = {\n  debug: LogLevelEnum.DEBUG,\n  info: LogLevelEnum.INFO,\n  warn: LogLevelEnum.WARN,\n  error: LogLevelEnum.ERROR,\n  off: LogLevelEnum.OFF\n};\n\nconst LOG_PREFIX = 'xterm.js: ';\n\nexport class LogService implements ILogService {\n  public serviceBrand: any;\n\n  public logLevel: LogLevelEnum = LogLevelEnum.OFF;\n\n  constructor(\n    @IOptionsService private readonly _optionsService: IOptionsService\n  ) {\n    this._updateLogLevel();\n    this._optionsService.onOptionChange(key => {\n      if (key === 'logLevel') {\n        this._updateLogLevel();\n      }\n    });\n  }\n\n  private _updateLogLevel(): void {\n    this.logLevel = optionsKeyToLogLevel[this._optionsService.rawOptions.logLevel];\n  }\n\n  private _evalLazyOptionalParams(optionalParams: any[]): void {\n    for (let i = 0; i < optionalParams.length; i++) {\n      if (typeof optionalParams[i] === 'function') {\n        optionalParams[i] = optionalParams[i]();\n      }\n    }\n  }\n\n  private _log(type: LogType, message: string, optionalParams: any[]): void {\n    this._evalLazyOptionalParams(optionalParams);\n    type.call(console, LOG_PREFIX + message, ...optionalParams);\n  }\n\n  public debug(message: string, ...optionalParams: any[]): void {\n    if (this.logLevel <= LogLevelEnum.DEBUG) {\n      this._log(console.log, message, optionalParams);\n    }\n  }\n\n  public info(message: string, ...optionalParams: any[]): void {\n    if (this.logLevel <= LogLevelEnum.INFO) {\n      this._log(console.info, message, optionalParams);\n    }\n  }\n\n  public warn(message: string, ...optionalParams: any[]): void {\n    if (this.logLevel <= LogLevelEnum.WARN) {\n      this._log(console.warn, message, optionalParams);\n    }\n  }\n\n  public error(message: string, ...optionalParams: any[]): void {\n    if (this.logLevel <= LogLevelEnum.ERROR) {\n      this._log(console.error, message, optionalParams);\n    }\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IOptionsService, ITerminalOptions, FontWeight } from 'common/services/Services';\nimport { EventEmitter, IEvent } from 'common/EventEmitter';\nimport { isMac } from 'common/Platform';\n\n// Source: https://freesound.org/people/altemark/sounds/45759/\n// This sound is released under the Creative Commons Attribution 3.0 Unported\n// (CC BY 3.0) license. It was created by 'altemark'. No modifications have been\n// made, apart from the conversion to base64.\nexport const DEFAULT_BELL_SOUND = 'data:audio/mp3;base64,SUQzBAAAAAAAI1RTU0UAAAAPAAADTGF2ZjU4LjMyLjEwNAAAAAAAAAAAAAAA//tQxAADB8AhSmxhIIEVCSiJrDCQBTcu3UrAIwUdkRgQbFAZC1CQEwTJ9mjRvBA4UOLD8nKVOWfh+UlK3z/177OXrfOdKl7pyn3Xf//WreyTRUoAWgBgkOAGbZHBgG1OF6zM82DWbZaUmMBptgQhGjsyYqc9ae9XFz280948NMBWInljyzsNRFLPWdnZGWrddDsjK1unuSrVN9jJsK8KuQtQCtMBjCEtImISdNKJOopIpBFpNSMbIHCSRpRR5iakjTiyzLhchUUBwCgyKiweBv/7UsQbg8isVNoMPMjAAAA0gAAABEVFGmgqK////9bP/6XCykxBTUUzLjEwMKqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq';\n\nexport const DEFAULT_OPTIONS: Readonly<ITerminalOptions> = {\n  cols: 80,\n  rows: 24,\n  cursorBlink: false,\n  cursorStyle: 'block',\n  cursorWidth: 1,\n  customGlyphs: true,\n  bellSound: DEFAULT_BELL_SOUND,\n  bellStyle: 'none',\n  drawBoldTextInBrightColors: true,\n  fastScrollModifier: 'alt',\n  fastScrollSensitivity: 5,\n  fontFamily: 'courier-new, courier, monospace',\n  fontSize: 15,\n  fontWeight: 'normal',\n  fontWeightBold: 'bold',\n  lineHeight: 1.0,\n  linkTooltipHoverDuration: 500,\n  letterSpacing: 0,\n  logLevel: 'info',\n  scrollback: 1000,\n  scrollSensitivity: 1,\n  screenReaderMode: false,\n  macOptionIsMeta: false,\n  macOptionClickForcesSelection: false,\n  minimumContrastRatio: 1,\n  disableStdin: false,\n  allowProposedApi: true,\n  allowTransparency: false,\n  tabStopWidth: 8,\n  theme: {},\n  rightClickSelectsWord: isMac,\n  rendererType: 'canvas',\n  windowOptions: {},\n  windowsMode: false,\n  wordSeparator: ' ()[]{}\\',\"`',\n  altClickMovesCursor: true,\n  convertEol: false,\n  termName: 'xterm',\n  cancelEvents: false\n};\n\nconst FONT_WEIGHT_OPTIONS: Extract<FontWeight, string>[] = ['normal', 'bold', '100', '200', '300', '400', '500', '600', '700', '800', '900'];\n\nexport class OptionsService implements IOptionsService {\n  public serviceBrand: any;\n\n  public readonly rawOptions: ITerminalOptions;\n  public options: ITerminalOptions;\n\n  private _onOptionChange = new EventEmitter<string>();\n  public get onOptionChange(): IEvent<string> { return this._onOptionChange.event; }\n\n  constructor(options: Partial<ITerminalOptions>) {\n    // set the default value of each option\n    const defaultOptions = { ...DEFAULT_OPTIONS };\n    for (const key in options) {\n      if (key in defaultOptions) {\n        try {\n          const newValue = options[key];\n          defaultOptions[key] = this._sanitizeAndValidateOption(key, newValue);\n        } catch (e) {\n          console.error(e);\n        }\n      }\n    }\n\n    // set up getters and setters for each option\n    this.rawOptions = defaultOptions;\n    this.options = { ... defaultOptions };\n    this._setupOptions();\n  }\n\n  private _setupOptions(): void {\n    const getter = (propName: string): any => {\n      if (!(propName in DEFAULT_OPTIONS)) {\n        throw new Error(`No option with key \"${propName}\"`);\n      }\n      return this.rawOptions[propName];\n    };\n\n    const setter = (propName: string, value: any): void => {\n      if (!(propName in DEFAULT_OPTIONS)) {\n        throw new Error(`No option with key \"${propName}\"`);\n      }\n\n      value = this._sanitizeAndValidateOption(propName, value);\n      // Don't fire an option change event if they didn't change\n      if (this.rawOptions[propName] !== value) {\n        this.rawOptions[propName] = value;\n        this._onOptionChange.fire(propName);\n      }\n    };\n\n    for (const propName in this.rawOptions) {\n      const desc = {\n        get: getter.bind(this, propName),\n        set: setter.bind(this, propName)\n      };\n      Object.defineProperty(this.options, propName, desc);\n    }\n  }\n\n  public setOption(key: string, value: any): void {\n    this.options[key] = value;\n  }\n\n  private _sanitizeAndValidateOption(key: string, value: any): any {\n    switch (key) {\n      case 'bellStyle':\n      case 'cursorStyle':\n      case 'rendererType':\n      case 'wordSeparator':\n        if (!value) {\n          value = DEFAULT_OPTIONS[key];\n        }\n        break;\n      case 'fontWeight':\n      case 'fontWeightBold':\n        if (typeof value === 'number' && 1 <= value && value <= 1000) {\n          // already valid numeric value\n          break;\n        }\n        value = FONT_WEIGHT_OPTIONS.includes(value) ? value : DEFAULT_OPTIONS[key];\n        break;\n      case 'cursorWidth':\n        value = Math.floor(value);\n        // Fall through for bounds check\n      case 'lineHeight':\n      case 'tabStopWidth':\n        if (value < 1) {\n          throw new Error(`${key} cannot be less than 1, value: ${value}`);\n        }\n        break;\n      case 'minimumContrastRatio':\n        value = Math.max(1, Math.min(21, Math.round(value * 10) / 10));\n        break;\n      case 'scrollback':\n        value = Math.min(value, 4294967295);\n        if (value < 0) {\n          throw new Error(`${key} cannot be less than 0, value: ${value}`);\n        }\n        break;\n      case 'fastScrollSensitivity':\n      case 'scrollSensitivity':\n        if (value <= 0) {\n          throw new Error(`${key} cannot be less than or equal to 0, value: ${value}`);\n        }\n      case 'rows':\n      case 'cols':\n        if (!value && value !== 0) {\n          throw new Error(`${key} must be numeric, value: ${value}`);\n        }\n        break;\n    }\n    return value;\n  }\n\n  public getOption(key: string): any {\n    return this.options[key];\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n *\n * This was heavily inspired from microsoft/vscode's dependency injection system (MIT).\n */\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IServiceIdentifier } from 'common/services/Services';\n\nconst DI_TARGET = 'di$target';\nconst DI_DEPENDENCIES = 'di$dependencies';\n\nexport const serviceRegistry: Map<string, IServiceIdentifier<any>> = new Map();\n\nexport function getServiceDependencies(ctor: any): { id: IServiceIdentifier<any>, index: number, optional: boolean }[] {\n  return ctor[DI_DEPENDENCIES] || [];\n}\n\nexport function createDecorator<T>(id: string): IServiceIdentifier<T> {\n  if (serviceRegistry.has(id)) {\n    return serviceRegistry.get(id)!;\n  }\n\n  const decorator: any = function (target: Function, key: string, index: number): any {\n    if (arguments.length !== 3) {\n      throw new Error('@IServiceName-decorator can only be used to decorate a parameter');\n    }\n\n    storeServiceDependency(decorator, target, index);\n  };\n\n  decorator.toString = () => id;\n\n  serviceRegistry.set(id, decorator);\n  return decorator;\n}\n\nfunction storeServiceDependency(id: Function, target: Function, index: number): void {\n  if ((target as any)[DI_TARGET] === target) {\n    (target as any)[DI_DEPENDENCIES].push({ id, index });\n  } else {\n    (target as any)[DI_DEPENDENCIES] = [{ id, index }];\n    (target as any)[DI_TARGET] = target;\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IEvent } from 'common/EventEmitter';\nimport { IBuffer, IBufferSet } from 'common/buffer/Types';\nimport { IDecPrivateModes, ICoreMouseEvent, CoreMouseEncoding, ICoreMouseProtocol, CoreMouseEventType, ICharset, IWindowOptions, IModes, IAttributeData, ScrollSource } from 'common/Types';\nimport { createDecorator } from 'common/services/ServiceRegistry';\n\nexport const IBufferService = createDecorator<IBufferService>('BufferService');\nexport interface IBufferService {\n  serviceBrand: undefined;\n\n  readonly cols: number;\n  readonly rows: number;\n  readonly buffer: IBuffer;\n  readonly buffers: IBufferSet;\n  isUserScrolling: boolean;\n  onResize: IEvent<{ cols: number, rows: number }>;\n  onScroll: IEvent<number>;\n  scroll(eraseAttr: IAttributeData, isWrapped?: boolean): void;\n  scrollToBottom(): void;\n  scrollToTop(): void;\n  scrollToLine(line: number): void;\n  scrollLines(disp: number, suppressScrollEvent?: boolean, source?: ScrollSource): void;\n  scrollPages(pageCount: number): void;\n  resize(cols: number, rows: number): void;\n  reset(): void;\n}\n\nexport const ICoreMouseService = createDecorator<ICoreMouseService>('CoreMouseService');\nexport interface ICoreMouseService {\n  activeProtocol: string;\n  activeEncoding: string;\n  areMouseEventsActive: boolean;\n  addProtocol(name: string, protocol: ICoreMouseProtocol): void;\n  addEncoding(name: string, encoding: CoreMouseEncoding): void;\n  reset(): void;\n\n  /**\n   * Triggers a mouse event to be sent.\n   *\n   * Returns true if the event passed all protocol restrictions and a report\n   * was sent, otherwise false. The return value may be used to decide whether\n   * the default event action in the bowser component should be omitted.\n   *\n   * Note: The method will change values of the given event object\n   * to fullfill protocol and encoding restrictions.\n   */\n  triggerMouseEvent(event: ICoreMouseEvent): boolean;\n\n  /**\n   * Event to announce changes in mouse tracking.\n   */\n  onProtocolChange: IEvent<CoreMouseEventType>;\n\n  /**\n   * Human readable version of mouse events.\n   */\n  explainEvents(events: CoreMouseEventType): { [event: string]: boolean };\n}\n\nexport const ICoreService = createDecorator<ICoreService>('CoreService');\nexport interface ICoreService {\n  serviceBrand: undefined;\n\n  /**\n   * Initially the cursor will not be visible until the first time the terminal\n   * is focused.\n   */\n  isCursorInitialized: boolean;\n  isCursorHidden: boolean;\n\n  readonly modes: IModes;\n  readonly decPrivateModes: IDecPrivateModes;\n\n  readonly onData: IEvent<string>;\n  readonly onUserInput: IEvent<void>;\n  readonly onBinary: IEvent<string>;\n\n  reset(): void;\n\n  /**\n   * Triggers the onData event in the public API.\n   * @param data The data that is being emitted.\n   * @param wasFromUser Whether the data originated from the user (as opposed to\n   * resulting from parsing incoming data). When true this will also:\n   * - Scroll to the bottom of the buffer.s\n   * - Fire the `onUserInput` event (so selection can be cleared).\n   */\n  triggerDataEvent(data: string, wasUserInput?: boolean): void;\n\n  /**\n   * Triggers the onBinary event in the public API.\n   * @param data The data that is being emitted.\n   */\n  triggerBinaryEvent(data: string): void;\n}\n\nexport const ICharsetService = createDecorator<ICharsetService>('CharsetService');\nexport interface ICharsetService {\n  serviceBrand: undefined;\n\n  charset: ICharset | undefined;\n  readonly glevel: number;\n\n  reset(): void;\n\n  /**\n   * Set the G level of the terminal.\n   * @param g\n   */\n  setgLevel(g: number): void;\n\n  /**\n   * Set the charset for the given G level of the terminal.\n   * @param g\n   * @param charset\n   */\n  setgCharset(g: number, charset: ICharset | undefined): void;\n}\n\nexport const IDirtyRowService = createDecorator<IDirtyRowService>('DirtyRowService');\nexport interface IDirtyRowService {\n  serviceBrand: undefined;\n\n  readonly start: number;\n  readonly end: number;\n\n  clearRange(): void;\n  markDirty(y: number): void;\n  markRangeDirty(y1: number, y2: number): void;\n  markAllDirty(): void;\n}\n\nexport interface IServiceIdentifier<T> {\n  (...args: any[]): void;\n  type: T;\n}\n\nexport interface IBrandedService {\n  serviceBrand: undefined;\n}\n\ntype GetLeadingNonServiceArgs<Args> =\n  Args extends [...IBrandedService[]] ? []\n    : Args extends [infer A1, ...IBrandedService[]] ? [A1]\n      : Args extends [infer A1, infer A2, ...IBrandedService[]] ? [A1, A2]\n        : Args extends [infer A1, infer A2, infer A3, ...IBrandedService[]] ? [A1, A2, A3]\n          : Args extends [infer A1, infer A2, infer A3, infer A4, ...IBrandedService[]] ? [A1, A2, A3, A4]\n            : Args extends [infer A1, infer A2, infer A3, infer A4, infer A5, ...IBrandedService[]] ? [A1, A2, A3, A4, A5]\n              : Args extends [infer A1, infer A2, infer A3, infer A4, infer A5, infer A6, ...IBrandedService[]] ? [A1, A2, A3, A4, A5, A6]\n                : Args extends [infer A1, infer A2, infer A3, infer A4, infer A5, infer A6, infer A7, ...IBrandedService[]] ? [A1, A2, A3, A4, A5, A6, A7]\n                  : Args extends [infer A1, infer A2, infer A3, infer A4, infer A5, infer A6, infer A7, infer A8, ...IBrandedService[]] ? [A1, A2, A3, A4, A5, A6, A7, A8]\n                    : never;\n\nexport const IInstantiationService = createDecorator<IInstantiationService>('InstantiationService');\nexport interface IInstantiationService {\n  serviceBrand: undefined;\n\n  setService<T>(id: IServiceIdentifier<T>, instance: T): void;\n  getService<T>(id: IServiceIdentifier<T>): T | undefined;\n  createInstance<Ctor extends new (...args: any[]) => any, R extends InstanceType<Ctor>>(t: Ctor, ...args: GetLeadingNonServiceArgs<ConstructorParameters<Ctor>>): R;\n}\n\nexport enum LogLevelEnum {\n  DEBUG = 0,\n  INFO = 1,\n  WARN = 2,\n  ERROR = 3,\n  OFF = 4\n}\n\nexport const ILogService = createDecorator<ILogService>('LogService');\nexport interface ILogService {\n  serviceBrand: undefined;\n\n  logLevel: LogLevelEnum;\n\n  debug(message: any, ...optionalParams: any[]): void;\n  info(message: any, ...optionalParams: any[]): void;\n  warn(message: any, ...optionalParams: any[]): void;\n  error(message: any, ...optionalParams: any[]): void;\n}\n\nexport const IOptionsService = createDecorator<IOptionsService>('OptionsService');\nexport interface IOptionsService {\n  serviceBrand: undefined;\n\n  /**\n   * Read only access to the raw options object, this is an internal-only fast path for accessing\n   * single options without any validation as we trust TypeScript to enforce correct usage\n   * internally.\n   */\n  readonly rawOptions: Readonly<ITerminalOptions>;\n  readonly options: ITerminalOptions;\n\n  readonly onOptionChange: IEvent<string>;\n\n  setOption<T>(key: string, value: T): void;\n  getOption<T>(key: string): T | undefined;\n}\n\nexport type FontWeight = 'normal' | 'bold' | '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | number;\nexport type LogLevel = 'debug' | 'info' | 'warn' | 'error' | 'off';\n\nexport type RendererType = 'dom' | 'canvas';\n\nexport interface ITerminalOptions {\n  allowProposedApi: boolean;\n  allowTransparency: boolean;\n  altClickMovesCursor: boolean;\n  bellSound: string;\n  bellStyle: 'none' | 'sound' /* | 'visual' | 'both' */;\n  cols: number;\n  convertEol: boolean;\n  cursorBlink: boolean;\n  cursorStyle: 'block' | 'underline' | 'bar';\n  cursorWidth: number;\n  customGlyphs: boolean;\n  disableStdin: boolean;\n  drawBoldTextInBrightColors: boolean;\n  fastScrollModifier: 'alt' | 'ctrl' | 'shift' | undefined;\n  fastScrollSensitivity: number;\n  fontSize: number;\n  fontFamily: string;\n  fontWeight: FontWeight;\n  fontWeightBold: FontWeight;\n  letterSpacing: number;\n  lineHeight: number;\n  linkTooltipHoverDuration: number;\n  logLevel: LogLevel;\n  macOptionIsMeta: boolean;\n  macOptionClickForcesSelection: boolean;\n  minimumContrastRatio: number;\n  rendererType: RendererType;\n  rightClickSelectsWord: boolean;\n  rows: number;\n  screenReaderMode: boolean;\n  scrollback: number;\n  scrollSensitivity: number;\n  tabStopWidth: number;\n  theme: ITheme;\n  windowsMode: boolean;\n  windowOptions: IWindowOptions;\n  wordSeparator: string;\n\n  [key: string]: any;\n  cancelEvents: boolean;\n  termName: string;\n}\n\nexport interface ITheme {\n  foreground?: string;\n  background?: string;\n  cursor?: string;\n  cursorAccent?: string;\n  selection?: string;\n  black?: string;\n  red?: string;\n  green?: string;\n  yellow?: string;\n  blue?: string;\n  magenta?: string;\n  cyan?: string;\n  white?: string;\n  brightBlack?: string;\n  brightRed?: string;\n  brightGreen?: string;\n  brightYellow?: string;\n  brightBlue?: string;\n  brightMagenta?: string;\n  brightCyan?: string;\n  brightWhite?: string;\n}\n\nexport const IUnicodeService = createDecorator<IUnicodeService>('UnicodeService');\nexport interface IUnicodeService {\n  serviceBrand: undefined;\n  /** Register an Unicode version provider. */\n  register(provider: IUnicodeVersionProvider): void;\n  /** Registered Unicode versions. */\n  readonly versions: string[];\n  /** Currently active version. */\n  activeVersion: string;\n  /** Event triggered, when activate version changed. */\n  readonly onChange: IEvent<string>;\n\n  /**\n   * Unicode version dependent\n   */\n  wcwidth(codepoint: number): number;\n  getStringCellWidth(s: string): number;\n}\n\nexport interface IUnicodeVersionProvider {\n  readonly version: string;\n  wcwidth(ucs: number): 0 | 1 | 2;\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\nimport { IUnicodeService, IUnicodeVersionProvider } from 'common/services/Services';\nimport { EventEmitter, IEvent } from 'common/EventEmitter';\nimport { UnicodeV6 } from 'common/input/UnicodeV6';\n\n\nexport class UnicodeService implements IUnicodeService {\n  public serviceBrand: any;\n\n  private _providers: {[key: string]: IUnicodeVersionProvider} = Object.create(null);\n  private _active: string = '';\n  private _activeProvider: IUnicodeVersionProvider;\n  private _onChange = new EventEmitter<string>();\n  public get onChange(): IEvent<string> { return this._onChange.event; }\n\n  constructor() {\n    const defaultProvider = new UnicodeV6();\n    this.register(defaultProvider);\n    this._active = defaultProvider.version;\n    this._activeProvider = defaultProvider;\n  }\n\n  public get versions(): string[] {\n    return Object.keys(this._providers);\n  }\n\n  public get activeVersion(): string {\n    return this._active;\n  }\n\n  public set activeVersion(version: string) {\n    if (!this._providers[version]) {\n      throw new Error(`unknown Unicode version \"${version}\"`);\n    }\n    this._active = version;\n    this._activeProvider = this._providers[version];\n    this._onChange.fire(version);\n  }\n\n  public register(provider: IUnicodeVersionProvider): void {\n    this._providers[provider.version] = provider;\n  }\n\n  /**\n   * Unicode version dependent interface.\n   */\n  public wcwidth(num: number): number {\n    return this._activeProvider.wcwidth(num);\n  }\n\n  public getStringCellWidth(s: string): number {\n    let result = 0;\n    const length = s.length;\n    for (let i = 0; i < length; ++i) {\n      let code = s.charCodeAt(i);\n      // surrogate pair first\n      if (0xD800 <= code && code <= 0xDBFF) {\n        if (++i >= length) {\n          // this should not happen with strings retrieved from\n          // Buffer.translateToString as it converts from UTF-32\n          // and therefore always should contain the second part\n          // for any other string we still have to handle it somehow:\n          // simply treat the lonely surrogate first as a single char (UCS-2 behavior)\n          return result + this.wcwidth(code);\n        }\n        const second = s.charCodeAt(i);\n        // convert surrogate pair to high codepoint only for valid second part (UTF-16)\n        // otherwise treat them independently (UCS-2 behavior)\n        if (0xDC00 <= second && second <= 0xDFFF) {\n          code = (code - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n        } else {\n          result += this.wcwidth(second);\n        }\n      }\n      result += this.wcwidth(code);\n    }\n    return result;\n  }\n}\n", "// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n", "// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(4389);\n", "export default require(\"./node_modules/xterm/lib/xterm.js\");"],
  "mappings": "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AAQ,IAAA,GAC7C,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAC7C,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAC7C,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAC7C,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAC7C,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAC7C,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAC7C,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAC7C,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAC7C,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAC7C,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAC7C,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAC7C,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAC7C,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAC7C,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAC7C,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAC7C,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAC7C,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAC7C,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAC7C,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAAS,CAAC,MAAQ,IAAA,GAC7C,CAAC,MAAQ,IAAA,GAAS,CAAC,M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",
  "names": ["root", "factory", "exports", "module", "define", "amd", "a", "i", "self", "e", "t", "r", "_terminal", "_renderService", "_liveRegionLineCount", "_charsToConsume", "_charsToAnnounce", "_accessibilityTreeRoot", "document", "createElement", "setAttribute", "classList", "add", "tabIndex", "_rowContainer", "_rowElements", "rows", "_createAccessibilityTreeNode", "appendChild", "_topBoundaryFocusListener", "_onBoundaryFocus", "_bottomBoundaryFocusListener", "addEventListener", "length", "_refreshRowsDimensions", "_renderRowsDebouncer", "TimeBasedDebouncer", "_renderRows", "bind", "_refreshRows", "_liveRegion", "element", "Error", "insertAdjacentElement", "register", "onResize", "_onResize", "onRender", "start", "end", "onScroll", "onA11yChar", "char", "_onChar", "onLineFeed", "onA11yTab", "spaceCount", "_onTab", "onKey", "_onKey", "key", "onBlur", "_clearLiveRegion", "onDimensionsChange", "_screenDprMonitor", "ScreenDprMonitor", "setListener", "addDisposableDomListener", "window", "dispose", "removeElementFromParent", "this", "position", "boundaryElement", "target", "beforeBoundaryElement", "getAttribute", "buffer", "lines", "relatedTarget", "topBoundaryElement", "bottomBoundaryElement", "pop", "removeChild", "shift", "removeEventListener", "newElement", "unshift", "push", "scrollLines", "focus", "preventDefault", "stopImmediatePropagation", "children", "_refreshRowDimensions", "MAX_ROWS_TO_READ", "textContent", "Strings", "tooMuchOutput", "isMac", "parentNode", "setTimeout", "keyChar", "refresh", "setSize", "toString", "lineData", "translateBufferLineToString", "ydisp", "posInSet", "innerText", "_announceCharacters", "dimensions", "actualCellHeight", "style", "height", "Disposable", "AccessibilityManager", "prepareTextForTerminal", "text", "replace", "bracketTextForPaste", "bracketedPasteMode", "paste", "textarea", "coreService", "decPrivateModes", "triggerDataEvent", "value", "moveTextAreaUnderMouseCursor", "ev", "screenElement", "pos", "getBoundingClientRect", "left", "clientX", "top", "clientY", "width", "zIndex", "selectionService", "clipboardData", "setData", "selectionText", "stopPropagation", "getData", "shouldSelectWord", "rightClickSelect", "select", "channels", "rgb", "rgba", "toPaddedHex", "c", "s", "contrastRatio", "l1", "l2", "toCss", "g", "b", "toRgba", "color", "blend", "bg", "fg", "css", "fgR", "fgG", "fgB", "bgR", "bgG", "bgB", "Math", "round", "isOpaque", "ensureContrastRatio", "ratio", "result", "toColor", "opaque", "rgbaColor", "toChannels", "opacity", "n", "toColorRGB", "parseInt", "slice", "relativeLuminance2", "rs", "gs", "bs", "pow", "relativeLuminance", "reduceLuminance", "bgRgba", "fgRgba", "cr", "max", "ceil", "increaseLuminance", "min", "bgL", "fgL", "_color", "_rgba", "clear", "setCss", "getCss", "undefined", "setColor", "getColor", "ColorContrastCache", "DEFAULT_FOREGROUND", "DEFAULT_BACKGROUND", "DEFAULT_CURSOR", "DEFAULT_CURSOR_ACCENT", "DEFAULT_SELECTION", "DEFAULT_ANSI_COLORS", "Object", "freeze", "colors", "v", "allowTransparency", "canvas", "ctx", "getContext", "_ctx", "globalCompositeOperation", "_litmusColor", "createLinearGradient", "_contrastCache", "foreground", "background", "cursor", "cursorAccent", "selectionTransparent", "selectionOpaque", "ansi", "contrastCache", "_updateRestoreColors", "onOptionsChange", "setTheme", "theme", "_parseColor", "selection", "black", "red", "green", "yellow", "blue", "magenta", "cyan", "white", "brightBlack", "brightRed", "brightGreen", "brightYellow", "brightBlue", "brightMagenta", "brightCyan", "brightWhite", "restoreColor", "slot", "_restoreColors", "fallback", "fillStyle", "console", "warn", "fillRect", "data", "getImageData", "o", "substring", "split", "map", "component", "Number", "alpha", "ColorManager", "elements", "parentElement", "node", "type", "handler", "options", "disposed", "_bufferService", "_logService", "_unicodeService", "_linkMatchers", "_nextLinkMatcherId", "_onShowLinkUnderline", "EventEmitter", "_onHideLinkUnderline", "_onLinkTooltip", "_rowsToLinkify", "event", "attachToDom", "mouseZoneManager", "_element", "_mouseZoneManager", "linkifyRows", "clearAll", "_rowsTimeoutId", "clearTimeout", "_linkifyRows", "Linkifier", "_timeBeforeLatency", "absoluteRowIndexStart", "absoluteRowIndexEnd", "overscanLineLimit", "cols", "iterator", "hasNext", "next", "_doLinkifyRow", "range", "first", "content", "debug", "registerLinkMatcher", "regex", "matcher", "id", "matchIndex", "validationCallback", "hoverTooltipCallback", "tooltipCallback", "hoverLeaveCallback", "leaveCallback", "willLinkActivate", "priority", "_addLinkMatcherToList", "splice", "deregisterLinkMatcher", "matcherId", "rowIndex", "match", "rex", "RegExp", "source", "flags", "stringIndex", "uri", "indexOf", "lastIndex", "bufferIndex", "stringIndexToBufferIndex", "line", "get", "attr", "getFg", "isValid", "_addLink", "exec", "x", "y", "getStringCellWidth", "x1", "y1", "floor", "x2", "y2", "MouseZone", "newWindow", "open", "opener", "location", "href", "fire", "_createLinkHoverEvent", "remove", "IBufferService", "ILogService", "IUnicodeService", "clickCallback", "hoverCallback", "_linkProviders", "_linkCacheDisposables", "_isMouseOut", "_activeLine", "getDisposeArrayDisposable", "_currentLink", "registerLinkProvider", "linkProvider", "providerIndex", "mouseService", "renderService", "_mouseService", "_clearCurrentLink", "_onMouseMove", "_onClick", "_lastMouseEvent", "_positionFromMouseEvent", "composedPath", "contains", "_lastBufferCell", "_onHover", "_askForLink", "_linkAtPosition", "link", "useLineCache", "_activeProviderReplies", "forEach", "reply", "linkWithState", "Map", "linkProvided", "_checkLinkProviderResult", "provideLinks", "links", "linksWithState", "set", "size", "_removeIntersectingLinks", "replies", "occupiedCells", "Set", "providerReply", "startX", "endX", "has", "index", "hasLinkBefore", "j", "linkAtPosition", "find", "_handleNewLink", "currentLink", "activate", "startRow", "endRow", "_linkLeave", "disposeArray", "state", "decorations", "underline", "pointerCursor", "isHovered", "_linkHover", "defineProperties", "toggle", "_fireUnderlineEvent", "onRenderedBufferChange", "hover", "showEvent", "scrollOffset", "_createLinkUnderlineEvent", "leave", "sameLine", "wrappedFromLeft", "wrappedToRight", "coords", "getCoords", "Linkifier2", "promptLabel", "_screenElement", "_selectionService", "_optionsService", "_zones", "_areZonesActive", "_lastHoverCoords", "_initialSelectionLength", "_onMouseDown", "_mouseMoveListener", "_mouseLeaveListener", "_onMouseLeave", "_clickListener", "_deactivate", "zone", "_activate", "_currentZone", "pageX", "pageY", "_findZoneEventAt", "_tooltipTimeout", "_onTooltip", "rawOptions", "linkTooltipHoverDuration", "_getSelectionLength", "currentSelectionLength", "IMouseService", "ISelectionService", "IOptionsService", "MouseZoneManager", "_renderCallback", "_animationFrame", "cancelAnimationFrame", "rowStart", "rowEnd", "rowCount", "_rowCount", "_rowStart", "_rowEnd", "requestAnimationFrame", "_innerRefresh", "RenderDebouncer", "_currentDevicePixelRatio", "devicePixelRatio", "listener", "_listener", "clearListener", "_outerListener", "_updateDpr", "_resolutionMediaMatchList", "removeListener", "matchMedia", "addListener", "browser", "Browser", "_keyDownHandled", "_keyPressHandled", "_unprocessedDeadKey", "_onCursorMove", "_onRender", "_onSelectionChange", "_onTitleChange", "_onBell", "_onFocus", "_onBlur", "_onA11yCharEmitter", "_onA11yTabEmitter", "_setup", "linkifier", "_instantiationService", "createInstance", "linkifier2", "_inputHandler", "onRequestBell", "bell", "onRequestRefreshRows", "onRequestSendFocus", "_reportFocus", "onRequestReset", "reset", "onRequestWindowsOptionsReport", "_reportWindowsOptions", "onColor", "_handleColorEvent", "forwardEvent", "onCursorMove", "onTitleChange", "_afterResize", "_colorManager", "req", "acc", "ident", "C0", "ESC", "toRgbString", "BEL", "setColors", "viewport", "onThemeChange", "_isDisposed", "_customKeyEventHandler", "write", "buffers", "active", "preventScroll", "_updateOptions", "_charSizeService", "measure", "setRenderer", "_createRenderer", "syncScrollArea", "optionsService", "screenReaderMode", "_accessibilityManager", "setupTabStops", "_setTheme", "_onTextAreaFocus", "sendFocus", "updateCursorStyle", "_showCursor", "blur", "_onTextAreaBlur", "_syncTextArea", "isCursorInViewport", "_compositionHelper", "isComposing", "cursorY", "ybase", "bufferLine", "cursorX", "cellHeight", "getWidth", "cellWidth", "actualCellWidth", "cursorTop", "cursorLeft", "lineHeight", "_initGlobal", "_bindKeys", "hasSelection", "copyHandler", "pasteHandlerWrapper", "handlePasteEvent", "isFirefox", "button", "rightClickHandler", "rightClickSelectsWord", "isLinux", "_keyUp", "_keyDown", "_keyPress", "compositionstart", "compositionupdate", "compositionend", "_inputEvent", "updateCompositionElements", "_queueLinkification", "parent", "isConnected", "_document", "ownerDocument", "dir", "fragment", "createDocumentFragment", "_viewportElement", "_viewportScrollArea", "_helperContainer", "coreBrowserService", "CoreBrowserService", "setService", "ICoreBrowserService", "CharSizeService", "ICharSizeService", "_theme", "onOptionChange", "_characterJoinerService", "CharacterJoinerService", "ICharacterJoinerService", "renderer", "RenderService", "IRenderService", "resize", "_compositionView", "CompositionHelper", "_soundService", "SoundService", "ISoundService", "MouseService", "Viewport", "amount", "onRequestSyncScrollBar", "onFocus", "SelectionService", "onRequestScrollLines", "suppressScrollEvent", "onSelectionChange", "onRequestRedraw", "onSelectionChanged", "columnSelectMode", "onLinuxMouseSelection", "_onScroll", "onMouseDown", "coreMouseService", "areMouseEventsActive", "disable", "enable", "bindMouse", "rendererType", "Renderer", "DomRenderer", "el", "sendEvent", "but", "action", "getRawByteCoords", "overrideType", "buttons", "deltaY", "triggerMouseEvent", "col", "row", "ctrl", "ctrlKey", "alt", "altKey", "shiftKey", "requestedEvents", "mouseup", "wheel", "mousedrag", "mousemove", "eventListeners", "cancel", "onProtocolChange", "events", "logLevel", "explainEvents", "passive", "activeProtocol", "shouldForceSelection", "hasScrollback", "getLinesScrolled", "sequence", "applicationCursorKeys", "abs", "onWheel", "onTouchStart", "onTouchMove", "refreshRows", "shouldColumnSelect", "isCursorInitialized", "disp", "attachCustomKeyEventHandler", "customKeyEventHandler", "registerCharacterJoiner", "joinerId", "deregisterCharacterJoiner", "deregister", "markers", "addMarker", "cursorYOffset", "normal", "column", "setSelection", "getSelection", "getSelectionPosition", "startColumn", "selectionStart", "endColumn", "selectionEnd", "clearSelection", "selectAll", "selectLines", "keydown", "scrollToBottom", "evaluateKeyboardEvent", "macOptionIsMeta", "scrollCount", "_isThirdLevelShift", "ETX", "CR", "domEvent", "thirdLevelKey", "metaKey", "isWindows", "getModifierState", "keyCode", "charCode", "which", "String", "fromCharCode", "inputType", "composed", "_soundBell", "playBellSound", "hasValidSize", "getBlankLine", "DEFAULT_ATTR_DATA", "clearTextureAtlas", "WindowsOptionsReportType", "GET_WIN_SIZE_PIXELS", "canvasWidth", "scaledCanvasWidth", "toFixed", "canvasHeight", "scaledCanvasHeight", "GET_CELL_SIZE_PIXELS", "scaledCellWidth", "scaledCellHeight", "force", "cancelEvents", "_visualBell", "bellStyle", "CoreTerminal", "Terminal", "_debounceThresholdMS", "_lastRefreshMs", "_additionalRefreshRequested", "_refreshTimeoutID", "refreshRequestTime", "Date", "now", "elapsed", "waitPeriodBeforeTrailingRefresh", "_scrollLines", "_scrollArea", "h", "scrollBarWidth", "_currentRowHeight", "_currentScaledCellHeight", "_lastRecordedBufferLength", "_lastRecordedViewportHeight", "_lastRecordedBufferHeight", "_lastTouchY", "_lastScrollTop", "_lastHadScrollBar", "_wheelPartialScroll", "_refreshAnimationFrame", "_ignoreNextScrollEvent", "offsetWidth", "_activeBuffer", "onBufferActivate", "activeBuffer", "_renderDimensions", "backgroundColor", "_refresh", "immediate", "offsetHeight", "newBufferHeight", "scrollTop", "scrollback", "elementStyle", "getComputedStyle", "elementPadding", "paddingLeft", "paddingRight", "offsetParent", "diff", "_bubbleScroll", "scrollPosFromTop", "cancelable", "_getPixelsScrolled", "_applyScrollModifier", "deltaMode", "WheelEvent", "DOM_DELTA_LINE", "DOM_DELTA_PAGE", "DOM_DELTA_PIXEL", "modifier", "fastScrollModifier", "fastScrollSensitivity", "scrollSensitivity", "touches", "_textarea", "_coreService", "_isComposing", "_isSendingComposition", "_compositionPosition", "_dataAlreadySent", "_finalizeComposition", "_handleAnyTextareaChanges", "waitForPropagation", "input", "oldValue", "dontRecurse", "fontFamily", "fontSize", "compositionViewBounds", "ICoreService", "getCoordsRelativeToElement", "rect", "colCount", "hasValidCharSize", "isSelection", "moveToRequestedRow", "startY", "targetY", "bufferService", "applicationCursor", "wrappedRowsForRow", "rowsToMove", "wrappedRows", "direction", "verticalDirection", "isWrapped", "repeat", "currentRow", "lineWraps", "startCol", "endCol", "forward", "currentCol", "bufferStr", "mod", "count", "str", "rpt", "targetX", "rowDifference", "currX", "CONSTRUCTOR_ONLY_OPTIONS", "_core", "_addonManager", "AddonManager", "_publicOptions", "getter", "propName", "setter", "_checkReadonlyOptions", "desc", "defineProperty", "includes", "_checkProposedApi", "allowProposedApi", "onBell", "onBinary", "onData", "_parser", "ParserApi", "UnicodeApi", "_buffer", "BufferNamespaceApi", "m", "mouseTrackingMode", "applicationCursorKeysMode", "applicationKeypadMode", "applicationKeypad", "insertMode", "modes", "originMode", "origin", "reverseWraparoundMode", "reverseWraparound", "sendFocusMode", "wraparoundMode", "wraparound", "columns", "_verifyIntegers", "registerMarker", "scrollPages", "pageCount", "scrollToTop", "scrollToLine", "callback", "writeUtf8", "writeln", "getOption", "setOption", "loadAddon", "addon", "values", "Infinity", "isNaN", "_container", "_alpha", "_colors", "_rendererId", "_scaledCharWidth", "_scaledCharHeight", "_scaledCellWidth", "_scaledCellHeight", "_scaledCharLeft", "_scaledCharTop", "_currentGlyphIdentifier", "chars", "code", "bold", "dim", "italic", "_canvas", "_initCanvas", "_charAtlas", "throwIfFalsy", "_clearAll", "onOptionsChanged", "onGridChanged", "colorSet", "_refreshCharAtlas", "_setTransparency", "oldCanvas", "cloneNode", "replaceChild", "acquireCharAtlas", "warmUp", "scaledCharWidth", "scaledCharHeight", "scaledCharLeft", "scaledCharTop", "_fillCells", "_fillMiddleLineAtCells", "cellOffset", "_fillBottomLineAtCells", "_fillLeftLineAtCell", "_strokeRectAtCell", "lineWidth", "strokeRect", "clearRect", "_clearCells", "_fillCharTrueColor", "cell", "font", "_getFont", "textBaseline", "TEXT_BASELINE", "_clipRow", "drawSuccess", "customGlyphs", "tryDrawCustomChar", "getChars", "fillText", "_drawChars", "contrastColor", "_getContrastColor", "isFgRGB", "isBgRGB", "_drawUncachedChars", "isInverse", "isBgDefault", "INVERTED_DEFAULT_COLOR", "getBgColor", "isFgDefault", "getFgColor", "DEFAULT_COLOR", "drawBoldTextInBrightColors", "isBold", "WHITESPACE_CELL_CHAR", "getCode", "WHITESPACE_CELL_CODE", "isDim", "isItalic", "draw", "fgOverride", "save", "AttributeData", "join", "globalAlpha", "DIM_OPACITY", "restore", "beginPath", "clip", "fontWeightBold", "fontWeight", "minimumContrastRatio", "adjustedColor", "fgColor", "fgColorMode", "getFgColorMode", "bgColor", "bgColorMode", "getBgColorMode", "temp", "temp2", "_resolveBackgroundRgba", "_resolveForegroundRgba", "inverse", "BaseRenderLayer", "BLINK_INTERVAL", "container", "rendererId", "_onRequestRedraw", "_coreBrowserService", "u", "_cell", "CellData", "_state", "isFocused", "_cursorRenderers", "_renderBarCursor", "_renderBlockCursor", "_renderUnderlineCursor", "_cursorBlinkStateManager", "_clearCursor", "restartBlinkAnimation", "pause", "resume", "cursorBlink", "CursorBlinkStateManager", "_render", "isPaused", "triggeredByAnimationFrame", "isCursorHidden", "viewportRelativeCursorY", "loadCell", "cursorStyle", "_renderBlurCursor", "isCursorVisible", "cursorWidth", "strokeStyle", "CursorRenderLayer", "_restartInterval", "_blinkStartTimeout", "_blinkInterval", "clearInterval", "_animationTimeRestarted", "timeToStart", "time", "setInterval", "blockElementDefinitions", "w", "patternCharacterDefinitions", "boxDrawingDefinitions", "xp", "yp", "xOffset", "yOffset", "blockElementDefinition", "charDefinition", "box", "xEighth", "yEighth", "patternDefinition", "patternSet", "cachedPatterns", "pattern", "tmpCanvas", "tmpCtx", "imageData", "ImageData", "startsWith", "substr", "parseFloat", "putImageData", "createPattern", "boxDrawingDefinition", "entries", "instructions", "f", "instruction", "svgToCanvasInstructionMap", "args", "translateArgs", "error", "stroke", "closePath", "clamp", "bezierCurveTo", "lineTo", "moveTo", "cache", "GridCache", "l", "onShowLinkUnderline", "onHideLinkUnderline", "middleRowCount", "is256Color", "LinkRenderLayer", "nextRendererId", "instantiationService", "_", "_id", "_renderLayers", "TextRenderLayer", "SelectionRenderLayer", "_devicePixelRatio", "_updateDimensions", "removeTerminalFromCache", "onDevicePixelRatioChange", "onCharSizeChanged", "_runOperation", "operation", "renderRows", "letterSpacing", "IInstantiationService", "_clearState", "_didStateChange", "viewportStartRow", "viewportEndRow", "viewportCappedStartRow", "viewportCappedEndRow", "startRowEndCol", "middleRowsCount", "_areCoordinatesEqual", "coord1", "coord2", "_characterWidth", "_characterFont", "_characterOverlapCache", "_workCell", "terminalFont", "_forEachCell", "firstRow", "lastRow", "joinedRanges", "getJoinedCharacters", "isJoined", "lastCharX", "JoinedCellData", "translateToString", "_isOverlapping", "getCodePoint", "NULL_CELL_CODE", "_drawBackground", "prevFillStyle", "nextFillStyle", "isBgPalette", "_drawForeground", "isInvisible", "isUnderline", "isStrikethrough", "beginFrame", "hasOwnProperty", "overlaps", "measureText", "_didWarmUp", "_doWarmUp", "BaseCharAtlas", "charAtlasCache", "newConfig", "generateConfig", "ownedByIndex", "entry", "ownedBy", "configEquals", "config", "atlas", "newEntry", "DynamicCharAtlas", "clonedColors", "colorCode", "isLegacyEdge", "CHAR_ATLAS_CELL_SPACING", "TEXTURE_WIDTH", "TEXTURE_HEIGHT", "TRANSPARENT_COLOR", "getGlyphCacheKey", "glyph", "_config", "_drawToCacheCount", "_glyphsWaitingOnBitmap", "_bitmapCommitTimeout", "_bitmap", "_cacheCanvas", "_cacheCtx", "_tmpCtx", "_width", "_height", "capacity", "_cacheMap", "LRUMap", "prealloc", "_canCache", "glyphKey", "cacheValue", "_drawFromCache", "peek", "_drawToCache", "_toCoordinateX", "_toCoordinateY", "isEmpty", "cacheX", "cacheY", "drawImage", "inBitmap", "_getColorFromAnsiIndex", "idx", "_getBackgroundColor", "_getForegroundColor", "fontStyle", "clearColor", "offset", "_addGlyphToBitmap", "isSafari", "_generateBitmap", "glyphsMovingToBitmap", "createImageBitmap", "then", "bitmap", "NoneCharAtlas", "_map", "_head", "_tail", "_nodePool", "_unlinkNode", "prev", "_appendNode", "tail", "nodePool", "peekValue", "head", "TERMINAL_CLASS_PREFIX", "FG_CLASS_PREFIX", "BG_CLASS_PREFIX", "FOCUS_CLASS", "nextTerminalId", "_linkifier", "_linkifier2", "_terminalClass", "_refreshRowElements", "_selectionContainer", "_injectCss", "_rowFactory", "DomRendererRowFactory", "_onLinkHover", "_onLinkLeave", "_themeStyleElement", "_dimensionsStyleElement", "overflow", "styles", "_terminalSelector", "BOLD_CLASS", "ITALIC_CLASS", "CURSOR_CLASS", "CURSOR_STYLE_BLOCK_CLASS", "CURSOR_BLINK_CLASS", "CURSOR_STYLE_BAR_CLASS", "CURSOR_STYLE_UNDERLINE_CLASS", "documentFragment", "_createSelectionElement", "colStart", "colEnd", "cursorAbsoluteY", "rowElement", "createRow", "_setCellUnderline", "enabled", "span", "textDecoration", "DIM_CLASS", "UNDERLINE_CLASS", "STRIKETHROUGH_CLASS", "isCursorRow", "lineLength", "charElement", "display", "_applyMinimumContrast", "_addStyle", "padStart", "padChar", "isSelectAllActive", "selectionStartLength", "areSelectionValuesReversed", "startPlusLength", "onTrim", "SelectionModel", "_onCharSizeChange", "_measureStrategy", "DomMeasureStrategy", "_parentElement", "_result", "_measureElement", "geometry", "firstCell", "combinedData", "isCombined", "setFromCharData", "getAsCharData", "_characterJoiners", "_nextCharacterJoinerId", "joiner", "ranges", "lineStr", "rangeStartColumn", "currentStringIndex", "rangeStartStringIndex", "rangeAttrFG", "rangeAttrBG", "getBg", "getTrimmedLength", "_getJoinedRanges", "startIndex", "endIndex", "allJoinedRanges", "joinerRanges", "_mergeRanges", "_stringRangesToCellRanges", "currentRangeIndex", "currentRangeStarted", "currentRange", "getString", "newRange", "inRange", "getRootNode", "activeElement", "hasFocus", "_renderer", "_isPaused", "_needsFullRefresh", "_isNextRenderRedrawOnly", "_needsSelectionRefresh", "_canvasWidth", "_canvasHeight", "_selectionState", "_onDimensionsChange", "_onRefreshRequest", "_renderDebouncer", "_fullRefresh", "onCharSizeChange", "IntersectionObserver", "_onIntersectionChange", "threshold", "observe", "disconnect", "isIntersecting", "intersectionRatio", "isRedrawOnly", "_fireOnCanvasResize", "changeOptions", "NON_BREAKING_SPACE_CHAR", "ALL_NON_BREAKING_SPACE_REGEX", "_dragScrollAmount", "_enabled", "_mouseDownTimeStamp", "_oldHasSelection", "_oldSelectionStart", "_oldSelectionEnd", "_onLinuxMouseSelection", "_onRedrawRequest", "_onRequestScrollLines", "_mouseUpListener", "_onMouseUp", "onUserInput", "_trimListener", "_onTrim", "_onBufferActivate", "_model", "_activeSelectionMode", "_removeMouseDownListeners", "finalSelectionStart", "finalSelectionEnd", "lineText", "isLinuxMouseSelection", "_isClickInSelection", "_getMouseBufferCoords", "_areCoordsInSelection", "_selectWordAtCursor", "allowWhitespaceOnlySelection", "getRangeLength", "_selectWordAt", "_getMouseEventScrollAmount", "terminalHeight", "macOptionClickForcesSelection", "timeStamp", "_onIncrementalClick", "detail", "_onSingleClick", "_onDoubleClick", "_onTripleClick", "_addMouseDownListeners", "_dragScrollIntervalTimer", "_dragScroll", "hasWidth", "_selectLineAt", "previousSelectionEnd", "_selectToWordAt", "timeElapsed", "coordinates", "moveToCellSequence", "_fireEventIfSelectionChanged", "_fireOnSelectionChange", "_convertViewportColToCharacterIndex", "charIndex", "_getWordAt", "followWrappedLinesAbove", "followWrappedLinesBelow", "charOffset", "leftWideCharCount", "rightWideCharCount", "leftLongCharOffset", "rightLongCharOffset", "charAt", "_isCharWordSeparator", "trim", "previousBufferLine", "previousLineWordPosition", "nextBufferLine", "nextLineWordPosition", "wordPosition", "wordSeparator", "wrappedRange", "getWrappedRangeForLine", "last", "createDecorator", "_audioContext", "audioContextCtor", "AudioContext", "webkitAudioContext", "audioContext", "bellAudioSource", "createBufferSource", "decodeAudioData", "_base64ToArrayBuffer", "_removeMimeType", "bellSound", "connect", "destination", "base64", "binaryString", "atob", "len", "bytes", "Uint8Array", "charCodeAt", "dataURI", "_maxLength", "onDeleteEmitter", "onInsertEmitter", "onTrimEmitter", "_array", "Array", "_startIndex", "_length", "newMaxLength", "newArray", "_getCyclicIndex", "newLength", "recycle", "deleteCount", "items", "countToTrim", "trimStart", "shiftElements", "expandListBy", "CircularList", "clone", "val", "depth", "clonedObject", "isArray", "hasWriteSyncWarnHappened", "_onBinary", "_onData", "_onLineFeed", "InstantiationService", "OptionsService", "BufferService", "LogService", "CoreService", "CoreMouseService", "ICoreMouseService", "_dirtyRowService", "DirtyRowService", "IDirtyRowService", "unicodeService", "UnicodeService", "_charsetService", "CharsetService", "ICharsetService", "InputHandler", "markRangeDirty", "scrollBottom", "_writeBuffer", "WriteBuffer", "promiseResult", "parse", "_onScrollApi", "_windowsMode", "writeSync", "maxSubsequentCalls", "LogLevelEnum", "WARN", "MINIMUM_COLS", "MINIMUM_ROWS", "scroll", "eraseAttr", "registerEscHandler", "registerDcsHandler", "registerCsiHandler", "registerOscHandler", "windowsMode", "_enableWindowsMode", "updateWindowsModeWrappedState", "final", "_listeners", "_disposed", "_event", "arg1", "arg2", "queue", "call", "from", "to", "GLEVEL", "MAX_PARSEBUFFER_LENGTH", "paramToWindowOption", "opts", "setWinLines", "restoreWin", "minimizeWin", "setWinPosition", "setWinSizePixels", "raiseWin", "lowerWin", "refreshWin", "setWinSizeChars", "maximizeWin", "fullscreenWin", "getWinState", "getWinPosition", "getWinSizePixels", "getScreenSizePixels", "getCellSizePixels", "getWinSizeChars", "getScreenSizeChars", "getIconTitle", "getWinTitle", "pushTitle", "popTitle", "_data", "Uint32Array", "hook", "params", "put", "concat", "subarray", "unhook", "success", "utf32ToString", "pt", "_coreMouseService", "EscapeSequenceParser", "_parseBuffer", "_stringDecoder", "StringToUtf32", "_utf8Decoder", "Utf8ToUtf32", "_windowTitle", "_iconName", "_windowTitleStack", "_iconNameStack", "_curAttrData", "_eraseAttrDataInternal", "_onRequestBell", "_onRequestRefreshRows", "_onRequestReset", "_onRequestSendFocus", "_onRequestSyncScrollBar", "_onRequestWindowsOptionsReport", "_onA11yChar", "_onA11yTab", "_onColor", "_parseStack", "paused", "cursorStartX", "cursorStartY", "decodedLength", "_specialColors", "setCsiHandlerFallback", "identifier", "identToString", "toArray", "setEscHandlerFallback", "setExecuteHandlerFallback", "setOscHandlerFallback", "setDcsHandlerFallback", "payload", "setPrintHandler", "print", "insertChars", "intermediates", "scrollLeft", "cursorUp", "scrollRight", "cursorDown", "cursorForward", "cursorBackward", "cursorNextLine", "cursorPrecedingLine", "cursorCharAbsolute", "cursorPosition", "cursorForwardTab", "eraseInDisplay", "prefix", "eraseInLine", "insertLines", "deleteLines", "deleteChars", "scrollUp", "scrollDown", "eraseChars", "cursorBackwardTab", "charPosAbsolute", "hPositionRelative", "repeatPrecedingCharacter", "sendDeviceAttributesPrimary", "sendDeviceAttributesSecondary", "linePosAbsolute", "vPositionRelative", "hVPosition", "tabClear", "setMode", "setModePrivate", "resetMode", "resetModePrivate", "charAttributes", "deviceStatus", "deviceStatusPrivate", "softReset", "setCursorStyle", "setScrollRegion", "saveCursor", "windowOptions", "restoreCursor", "insertColumns", "deleteColumns", "setExecuteHandler", "LF", "lineFeed", "VT", "FF", "carriageReturn", "BS", "backspace", "HT", "tab", "SO", "shiftOut", "SI", "shiftIn", "C1", "IND", "NEL", "nextLine", "HTS", "tabSet", "OscHandler", "setTitle", "setIconName", "setOrReportIndexedColor", "setOrReportFgColor", "setOrReportBgColor", "setOrReportCursorColor", "restoreIndexedColor", "restoreFgColor", "restoreBgColor", "restoreCursorColor", "reverseIndex", "keypadApplicationMode", "keypadNumericMode", "fullReset", "setgLevel", "selectDefaultCharset", "flag", "S", "selectCharset", "CHARSETS", "screenAlignmentPattern", "setErrorHandler", "DECRQSS", "_preserveStack", "_logSlowResolvingAsync", "p", "Promise", "race", "res", "rej", "catch", "err", "wasPaused", "DEBUG", "clearRange", "decode", "chWidth", "charset", "curAttr", "bufferRow", "markDirty", "setCellFromCodePoint", "extended", "wcwidth", "ch", "stringFromCodePoint", "_eraseAttrData", "insertCells", "getNullCell", "NULL_CELL_WIDTH", "addCodepointToCell", "precedingCodepoint", "hasContent", "DcsHandler", "convertEol", "_restrictCursor", "originalX", "nextStop", "maxCol", "_setCursor", "_moveCursor", "diffToTop", "diffToBottom", "param", "tabs", "prevStop", "_eraseInBufferLine", "clearWrap", "replaceCells", "_resetBufferLine", "fill", "scrollBackSize", "scrollBottomRowsOffset", "scrollBottomAbsolute", "deleteCells", "_is", "term", "termName", "setgCharset", "DEFAULT_CHARSET", "activeEncoding", "activateAltBuffer", "activateNormalBuffer", "_updateAttrColor", "mode", "c1", "c2", "c3", "fromColorRGB", "_extractColor", "accu", "cSpace", "advance", "hasSubParams", "subparams", "getSubParams", "underlineColor", "_processUnderline", "underlineStyle", "updateExtended", "savedX", "savedY", "savedCurAttrData", "savedCharset", "isBlinking", "bottom", "second", "_savedCharset", "slots", "spec", "parseColor", "_setOrReportSpecialColor", "collectAndFlag", "scrollRegionHeight", "level", "markAllDirty", "_disposables", "d", "unregister", "disposables", "array", "isNode", "navigator", "userAgent", "platform", "test", "isIpad", "isIphone", "fillFallback", "constructor", "lastChar", "CHAR_DATA_CODE_INDEX", "ExtendedAttrs", "newObj", "isBlink", "isFgPalette", "isAttributeDefault", "hasExtendedAttrs", "getUnderlineColor", "getUnderlineColorMode", "isUnderlineColorRGB", "isUnderlineColorPalette", "isUnderlineColorDefault", "getUnderlineStyle", "MAX_BUFFER_SIZE", "_hasScrollback", "_nullCell", "fromCharData", "NULL_CELL_CHAR", "_whitespaceCell", "WHITESPACE_CELL_WIDTH", "_cols", "_rows", "_getCorrectBufferLength", "getWhitespaceCell", "BufferLine", "maxLength", "relativeY", "correctBufferLength", "fillViewportRows", "fillAttr", "newCols", "newRows", "nullCell", "addToY", "amountToTrim", "_isReflowEnabled", "_reflow", "_reflowLarger", "_reflowSmaller", "toRemove", "reflowLargerGetLinesToRemove", "newLayoutResult", "reflowLargerCreateNewLayout", "reflowLargerApplyNewLayout", "layout", "_reflowLargerAdjustViewport", "countRemoved", "viewportAdjustments", "toInsert", "countToInsert", "wrappedLines", "absoluteY", "trimmedLines", "lastLineLength", "destLineLengths", "reflowSmallerGetNewLineLengths", "linesToAdd", "newLines", "newLine", "destLineIndex", "destCol", "srcLineIndex", "srcCol", "cellsToCopy", "copyCellsFrom", "wrappedLinesIndex", "getWrappedLineTrimmedLength", "setCell", "insertEvents", "originalLines", "originalLinesLength", "originalLineIndex", "nextToInsertIndex", "nextToInsert", "countInsertedSoFar", "nextI", "insertCountEmitted", "lineIndex", "trimRight", "CHAR_DATA_WIDTH_INDEX", "CHAR_DATA_CHAR_INDEX", "tabStopWidth", "marker", "Marker", "onInsert", "onDelete", "onDispose", "_removeMarker", "startOverscan", "endOverscan", "BufferStringIterator", "Buffer", "_trimRight", "_endIndex", "_startOverscan", "_endOverscan", "_current", "fillCellData", "_combined", "_extendedAttrs", "cp", "CHAR_DATA_ATTR_INDEX", "codePoint", "eAttrs", "keys", "copyFrom", "src", "applyInReverse", "srcData", "srcCombinedKeys", "bufferCols", "endsInNull", "followingLineStartsWithWide", "oldCols", "bufferAbsoluteY", "srcTrimmedTineLength", "srcRemainingCells", "destRemainingCells", "countToRemove", "nextToRemoveIndex", "nextToRemoveStart", "countRemovedSoFar", "newLayout", "newLayoutLines", "newLineLengths", "cellsNeeded", "reduce", "srcLine", "cellsAvailable", "oldTrimmedLength", "endsWithWide", "_normal", "_alt", "inactiveBuffer", "BufferSet", "obj", "combined", "DEFAULT_ATTR", "_nextId", "isDisposed", "_onDispose", "C", "NUL", "SOH", "STX", "EOT", "ENQ", "ACK", "DLE", "DC1", "DC2", "DC3", "DC4", "NAK", "SYN", "ETB", "CAN", "EM", "SUB", "FS", "GS", "RS", "US", "SP", "DEL", "PAD", "HOP", "BPH", "NBH", "SSA", "ESA", "HTJ", "VTS", "PLD", "PLU", "RI", "SS2", "SS3", "DCS", "PU1", "PU2", "STS", "CCH", "MW", "SPA", "EPA", "SOS", "SGCI", "SCI", "CSI", "ST", "OSC", "PM", "APC", "KEYCODE_KEY_MAPPINGS", "applicationCursorMode", "modifiers", "keyMapping", "codepoint", "_interim", "startPos", "interim", "byte1", "byte2", "byte3", "byte4", "discardInterim", "tmp", "missing", "fourStop", "table", "BMP_COMBINING", "HIGH_COMBINING", "version", "num", "ucs", "mid", "UnicodeV6", "qmt", "queueMicrotask", "cb", "resolve", "_action", "_callbacks", "_pendingData", "_bufferOffset", "_isSyncWriting", "_syncCalls", "chunk", "_innerWrite", "lastTime", "startTime", "RGB_REX", "HASH_REX", "pad", "bits", "s2", "low", "toLowerCase", "base", "adv", "PAYLOAD_LIMIT", "EMPTY_HANDLERS", "_handlers", "create", "_active", "_ident", "_handlerFb", "_stack", "loopPosition", "fallThrough", "registerHandler", "handlerList", "handlerIndex", "clearHandler", "setHandlerFallback", "handlerResult", "DcsParser", "EMPTY_PARAMS", "Params", "addParam", "_handler", "_params", "_hitLimit", "ret", "setDefault", "addMany", "codes", "TransitionTable", "NON_ASCII_PRINTABLE", "VT500_TRANSITION_TABLE", "blueprint", "apply", "unused", "PRINTABLES", "EXECUTABLES", "states", "_transitions", "handlers", "handlerPos", "transition", "chunkPos", "initialState", "currentState", "_collect", "_printHandlerFb", "_executeHandlerFb", "_csiHandlerFb", "_escHandlerFb", "_errorHandlerFb", "_printHandler", "_executeHandlers", "_csiHandlers", "_escHandlers", "_oscParser", "OscParser", "_dcsParser", "_errorHandler", "_identifier", "finalRange", "intermediate", "finalCode", "reverse", "clearPrintHandler", "clearEscHandler", "clearExecuteHandler", "clearCsiHandler", "clearDcsHandler", "clearOscHandler", "clearErrorHandler", "collect", "abort", "addSubParam", "addDigit", "handlersEsc", "jj", "_start", "_put", "MAX_VALUE", "maxSubParamsLength", "Int32Array", "_subParams", "_subParamsLength", "_subParamsIdx", "Uint16Array", "_rejectDigits", "_rejectSubDigits", "_digitIsSub", "fromArray", "k", "newParams", "prototype", "getSubParamsAll", "store", "cur", "_addons", "instance", "terminal", "loadedAddon", "_wrappedAddonDispose", "init", "getLine", "BufferLineApiView", "BufferApiView", "_line", "getCell", "_onBufferChange", "_alternate", "alternate", "addCsiHandler", "addDcsHandler", "addEscHandler", "addOscHandler", "provider", "versions", "activeVersion", "isUserScrolling", "_cachedBlankLine", "topRow", "bottomRow", "willBufferBeTrimmed", "isFull", "oldYdisp", "scrollAmount", "glevel", "_charsets", "DEFAULT_PROTOCOLS", "NONE", "restrict", "X10", "VT200", "DRAG", "ANY", "eventCode", "isSGR", "DEFAULT_ENCODINGS", "DEFAULT", "SGR", "_protocols", "_encodings", "_activeProtocol", "_activeEncoding", "_onProtocolChange", "_lastEvent", "addProtocol", "addEncoding", "name", "protocol", "encoding", "_compareEvents", "report", "triggerBinaryEvent", "down", "up", "drag", "move", "e1", "e2", "DEFAULT_MODES", "DEFAULT_DEC_PRIVATE_MODES", "_onUserInput", "_scrollToBottom", "wasUserInput", "disableStdin", "_end", "_entries", "service", "ServiceCollection", "_services", "getService", "ctor", "serviceDependencies", "getServiceDependencies", "sort", "serviceArgs", "dependency", "firstServiceArgPos", "optionsKeyToLogLevel", "info", "INFO", "ERROR", "off", "OFF", "_updateLogLevel", "_evalLazyOptionalParams", "optionalParams", "_log", "message", "log", "DEFAULT_BELL_SOUND", "DEFAULT_OPTIONS", "altClickMovesCursor", "FONT_WEIGHT_OPTIONS", "_onOptionChange", "defaultOptions", "newValue", "_sanitizeAndValidateOption", "_setupOptions", "storeServiceDependency", "serviceRegistry", "decorator", "arguments", "_providers", "_onChange", "defaultProvider", "_activeProvider", "__webpack_module_cache__", "__webpack_require__", "moduleId", "cachedModule", "__webpack_modules__"]
}
